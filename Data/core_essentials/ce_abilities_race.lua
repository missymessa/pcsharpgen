-- Converted From LST file data\pathfinder\paizo\roleplaying_game\core_essentials\ce_abilities_race.lst
-- From repository https://github.com/pcgen/pcgen at commit 11ceb52482855f2e5f0f6c108c3dc665b12af237
SetSource({
  SourceLong="Bestiary",
  SourceShort="B1",
  SourceWeb="http://paizo.com/store/downloads/pathfinder/pathfinderRPG/v5748btpy8auu",
  SourceDate="2009-10",
})
DefineAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Companion Tracker",
      },
      Conditions={
        function (character, item)
          return (character.Variables["FamiliarMasterLVL"] >= 1) or (character.Variables["AnimalCompanionMasterLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Flight Maneuverability",
      },
      Conditions={
        function (character, item)
          return (character.HasMovement("Fly", 1)) or (character.Variables["Maneuverability"] > 0)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fast Healing",
      },
      Conditions={
        function (character, item)
          return (character.Variables["FastHealingRate"] > 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("0"),
      Variables={
        "Maneuverability",
      },
    },
  },
})
DefineAbility({
  Name="Select Racial Traits",
  Category="Internal",
})
DefineAbility({
  Name="Companion Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AnimalCompanionMasterLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "AnimalCompanionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("FamiliarMasterLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "FamiliarLVL",
      },
    },
  },
})
DefineAbility({
  Name="Low-Light Vision",
  Key="Low-Light Vision",
  Category="Special Ability",
  Description={
    Format="You can see x%1 as far as humans in low illumination. Characters with low-light vision have eyes that are so sensitive to light that they can see twice as far as normal in dim light. Low-Light Vision is color vision. A spellcaster with low-light vision can read a scroll as long as even the tiniest candle flame is next to her as a source of light. Characters with low-light vision can see outdoors on a moonlit night as well as they can during the day.",
    Arguments={
      Formula("LowLightDistance"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="Low-Light Vision",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "LowLightDistance",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Low-Light Vision",
      },
    },
  },
})
DefineAbility({
  Name="Darkvision",
  Key="Darkvision",
  Category="Special Ability",
  Description={
    Format="Range %1 ft.; Darkvision is the extraordinary ability to see with no light source at all, out to a range specified for the creature. Darkvision is black and white only (colors cannot be discerned). It does not allow characters to see anything that they could not see otherwise-invisible objects are still invisible, and illusions are still visible as what they seem to be. Likewise, darkvision subjects a creature to gaze attacks normally. The presence of light does not spoil darkvision.",
    Arguments={
      Formula("DarkvisionRange"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="Darkvision %1 ft.",
      Arguments={
        "DarkvisionRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Darkvision (DarkvisionRange)",
      },
    },
  },
})
DefineAbility({
  Name="Blindsense",
  Key="Blindsense",
  Category="Special Ability",
  Description={
    Format="Range %1 ft.; Other creatures have blindsense, a lesser ability that lets the creature notice things it cannot see, but without the precision of blindsight. The creature with blindsense usually does not need to make Spot or Listen checks to notice and locate creatures within range of its blindsense ability, provided that it has line of effect to that creature. Any opponent the creature cannot see has total concealment (50%% miss chance) against the creature with blindsense, and the blindsensing creature still has the normal miss chance when attacking foes that have concealment. Visibility still affects the movement of a creature with blindsense. A creature with blindsense is still denied its Dexterity bonus to Armor Class against attacks from creatures it cannot see.",
    Arguments={
      Formula("BlindsenseRange"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="Blindsense %1 ft.",
      Arguments={
        "BlindsenseRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Blindsense (BlindsenseRange)",
      },
    },
  },
})
DefineAbility({
  Name="Blindsight",
  Key="Blindsight",
  Category="Special Ability",
  Description={
    Format="Range %1 ft.; Some creatures have blindsight, the extraordinary ability to use a nonvisual sense (or a combination of such senses) to operate effectively without vision. Such sense may include sensitivity to vibrations, acute scent, keen hearing, or echolocation. This ability makes invisibility and concealment (even magical darkness) irrelevant to the creature (though it still can't see ethereal creatures and must have line of effect to a creature or object to discern that creature or object). This ability operates out to a range specified in the creature description. The creature usually does not need to make Spot or Listen checks to notice creatures within range of its blindsight ability. Unless noted otherwise, blindsight is continuous, and the creature need do nothing to use it. Some forms of blindsight, however, must be triggered as a free action. If so, this is noted in the creature's description. If a creature must trigger its blindsight ability, the creature gains the benefits of blindsight only during its turn.&nl;Blindsight never allows a creature to distinguish color or visual contrast. A creature cannot read with blindsight.&nl;Blindsight does not subject a creature to gaze attacks (even though darkvision does).&nl;Blinding attacks do not penalize creatures using blindsight.&nl;Deafening attacks thwart blindsight if it relies on hearing.&nl;Blindsight works underwater but not in a vacuum.&nl;Blindsight negates displacement and blur effects.",
    Arguments={
      Formula("BlindsightRange"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="Blindsight %1 ft.",
      Arguments={
        "BlindsightRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Blindsight (BlindsightRange)",
      },
    },
  },
})
DefineAbility({
  Name="Tremorsense",
  Key="Tremorsense",
  Category="Special Ability",
  Description={
    Format="Range %1 ft.; A creature with tremorsense automatically senses the location of anything that is in contact with the ground and within range. Aquatic creatures with tremorsense can also sense the location of creatures moving through water. If no straight path exists through the ground from the creature to those that it's sensing, then the range defines the maximum distance of the shortest indirect path. It must itself be in contact with the ground, and the creatures must be moving. As long as the other creatures are taking physical actions, including casting spells with somatic components, they're considered moving; they don't have to move from place to place for a creature with tremorsense to detect them.",
    Arguments={
      Formula("TremorsenseRange"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="Tremorsense %1 ft.",
      Arguments={
        "TremorsenseRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Tremorsense (TremorsenseRange)",
      },
    },
  },
})
DefineAbility({
  Name="See Etheral",
  Key="See Etheral",
  Category="Special Ability",
  Description={
    Format="Range %1 ft.",
    Arguments={
      Formula("SeeEtheralRange"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="See Etheral %1 ft.",
      Arguments={
        "SeeEtheralRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Vision",
  },
  Visions={
    {
      Kind={
        "See Etheral (SeeEtheralRange)",
      },
    },
  },
})
DefineAbility({
  Name="See Invisibility",
  Key="See Invisibility",
  Category="Special Ability",
  Description={
    Format="Range %1 ft.",
    Arguments={
      Formula("SeeInvisibilityRange"),
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="See Invisibility %1 ft.",
      Arguments={
        "SeeInvisibilityRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Vision",
  },
  Visions={
    {
      Kind={
        "See Invisibility (SeeInvisibilityRange)",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Low-Light Vision",
      },
      Conditions={
        function (character, item)
          return (character.Variables["LowLightRange"] >= 1) or (character.Variables["HasLowlightVision"] >= 1) or (character.Variables["LowLightDistance"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Darkvision",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DarkvisionRange"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Blindsense",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BlindsenseRange"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Blindsight",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BlindsightRange"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Tremorsense",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TremorsenseRange"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "See Etheral",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SeeEtheralRange"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "See Invisibility",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SeeInvisibilityRange"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Acid",
      },
      Conditions={
        function (character, item)
          return (character.Variables["AcidResistanceBonus"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Cold",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ColdResistanceBonus"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Fire",
      },
      Conditions={
        function (character, item)
          return (character.Variables["FireResistanceBonus"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Electricity",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ElectricityResistanceBonus"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Sonic",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SonicResistanceBonus"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("max(AC_Natural_Armor,0)"),
      Type={
        Name="NaturalArmor",
      },
      Variables={
        "AC",
      },
    },
  },
})
DefineAbility({
  Name="Steady",
  Category="Internal",
  SourcePage="p.21",
  UnencumberedMove={
    "HeavyLoad",
    "HeavyArmor",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
})
DefineAbility({
  Name="Default Setting",
  Key="Race Language ~ Default Setting",
  Category="Internal",
  Description={
    Format="Grants the race the default race language of the core supplements.",
  },
  Types={
    "RaceLangSelection",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "UseAutoReach",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_0",
      },
      Conditions={
        function (character, item)
          return character.Size == "F" or character.Size == "D" or character.Size == "T"
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_5",
      },
      Conditions={
        function (character, item)
          return character.Size == "S" or character.Size == "M"
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_10",
      },
      Conditions={
        function (character, item)
          return character.Size == "L"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 0)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_15",
      },
      Conditions={
        function (character, item)
          return character.Size == "H"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 0)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_20",
      },
      Conditions={
        function (character, item)
          return character.Size == "G"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 0)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_30",
      },
      Conditions={
        function (character, item)
          return character.Size == "C"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 0)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_5",
      },
      Conditions={
        function (character, item)
          return character.Size == "L"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 1)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_10",
      },
      Conditions={
        function (character, item)
          return character.Size == "H"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 1)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_15",
      },
      Conditions={
        function (character, item)
          return character.Size == "G"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 1)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "REACH_20",
      },
      Conditions={
        function (character, item)
          return character.Size == "C"
        end,
        function (character, item)
          return (character.Variables["RaceSizeIsLong"] == 1)
        end,
        function (character, item)
          return (character.Variables["UseAutoReach"] == 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Size Tracker",
      },
    },
  },
})
DefineAbility({
  Name="REACH_0",
  Category="Internal",
  Visible=false,
  Templates={
    "REACH_0",
  },
})
DefineAbility({
  Name="REACH_5",
  Category="Internal",
  Visible=false,
  Templates={
    "REACH_5",
  },
})
DefineAbility({
  Name="REACH_10",
  Category="Internal",
  Visible=false,
  Templates={
    "REACH_10",
  },
})
DefineAbility({
  Name="REACH_15",
  Category="Internal",
  Visible=false,
  Templates={
    "REACH_15",
  },
})
DefineAbility({
  Name="REACH_20",
  Category="Internal",
  Visible=false,
  Templates={
    "REACH_20",
  },
})
DefineAbility({
  Name="REACH_30",
  Category="Internal",
  Visible=false,
  Templates={
    "REACH_30",
  },
})
DefineAbility({
  Name="SIZE_F",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_F",
  },
})
DefineAbility({
  Name="SIZE_D",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_D",
  },
})
DefineAbility({
  Name="SIZE_T",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_T",
  },
})
DefineAbility({
  Name="SIZE_S",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_S",
  },
})
DefineAbility({
  Name="SIZE_M",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_M",
  },
})
DefineAbility({
  Name="SIZE_L",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_L",
  },
})
DefineAbility({
  Name="SIZE_H",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_H",
  },
})
DefineAbility({
  Name="SIZE_G",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_G",
  },
})
DefineAbility({
  Name="SIZE_C",
  Category="Internal",
  Visible=false,
  Templates={
    "SIZE_C",
  },
})
DefineAbility({
  Name="Size Tracker",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Fine",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("F")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Diminutive",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("D")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Tiny",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("T")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Small",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("S")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Medium",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("M")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Large",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("L")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Huge",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("H")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Gargantuan",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("G")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Base Size ~ Colossal",
      },
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("C")
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Fine",
      },
      Conditions={
        function (character, item)
          return character.Size == "F"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Diminutive",
      },
      Conditions={
        function (character, item)
          return character.Size == "D"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Tiny",
      },
      Conditions={
        function (character, item)
          return character.Size == "T"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Small",
      },
      Conditions={
        function (character, item)
          return character.Size == "S"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Medium",
      },
      Conditions={
        function (character, item)
          return character.Size == "M"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Large",
      },
      Conditions={
        function (character, item)
          return character.Size == "L"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Huge",
      },
      Conditions={
        function (character, item)
          return character.Size == "H"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Gargantuan",
      },
      Conditions={
        function (character, item)
          return character.Size == "G"
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Current Size ~ Colossal",
      },
      Conditions={
        function (character, item)
          return character.Size == "C"
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CurrentSize-BaseSize"),
      Variables={
        "SizeIncrease",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BaseSize-CurrentSize"),
      Variables={
        "SizeDecrease",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("7"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("8"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Current Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("9"),
      Variables={
        "CurrentSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("7"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("8"),
      Variables={
        "BaseSize",
      },
    },
  },
})
DefineAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("9"),
      Variables={
        "BaseSize",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Fine",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 8)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 8)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 8)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Diminutive",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Tiny",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Small",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Medium",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Large",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-3"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Huge",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
        Stack=true,
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeIncrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-4"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-3"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Gargantuan",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-5"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-4"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 2)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-3"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 3)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-8"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 4)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 5)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "CON",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-4"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 6)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 7)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
ModifyAbility({
  Name="Base Size ~ Colossal",
  Category="Internal",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return (character.Variables["SizeDecrease"] >= 8)
        end,
        function (character, item)
          return (character.Variables["BypassSizeMods"] == 0)
        end,
      },
      Variables={
        "DEX",
      },
    },
  },
})
DefineAbility({
  Name="Fine",
  Key="Base Race Size ~ F",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Fine"] == "true"
    end,
  },
  Templates={
    "SIZE_F",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Diminutive",
  Key="Base Race Size ~ D",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Diminutive"] == "true"
    end,
  },
  Templates={
    "SIZE_D",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Tiny",
  Key="Base Race Size ~ T",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Tiny"] == "true"
    end,
  },
  Templates={
    "SIZE_T",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Small",
  Key="Base Race Size ~ S",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Small"] == "true"
    end,
  },
  Templates={
    "SIZE_S",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Medium",
  Key="Base Race Size ~ M",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Medium"] == "true"
    end,
  },
  Templates={
    "SIZE_M",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Large",
  Key="Base Race Size ~ L",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Large"] == "true"
    end,
  },
  Templates={
    "SIZE_L",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Huge",
  Key="Base Race Size ~ H",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Huge"] == "true"
    end,
  },
  Templates={
    "SIZE_H",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Gargantuan",
  Key="Base Race Size ~ G",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Gargantuan"] == "true"
    end,
  },
  Templates={
    "SIZE_G",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Colossal",
  Key="Base Race Size ~ C",
  Category="Racial Size",
  Conditions={
    function (character, item)
      return character.Facts["ABILITY"]["RaceSizeAllowed_Colossal"] == "true"
    end,
  },
  Templates={
    "SIZE_C",
  },
  Types={
    "Race Size Selection",
  },
})
DefineAbility({
  Name="Reset Attack Start Value ~ Gore",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "GoreAttacks",
      },
    },
  },
})
DefineAbility({
  Name="Reset Attack Start Value ~ Hoof",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Variables={
        "HoofAttacks",
      },
    },
  },
})
DefineAbility({
  Name="Reset Attack Start Value ~ Slam",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "SlamAttacks",
      },
    },
  },
})
DefineAbility({
  Name="Reset Attack Start Value ~ Talons",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Variables={
        "TalonsAttacks",
      },
    },
  },
})
DefineAbility({
  Name="Reset Attack Start Value ~ Wing",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Variables={
        "WingAttacks",
      },
    },
  },
})
DefineAbility({
  Name="Bite",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite Damage Increase",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteOnlyAttack"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "BiteAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] < 2)
        end,
      },
      Variables={
        "BiteOnlyAttack",
      },
    },
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Gore",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "GoreAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Gore",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Gore",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Gore",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Claw",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "ClawAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ClawAttacks"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Claw",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Claw",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Claw",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Slam",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SlamAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Slam",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Slam",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Slam",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Sting",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "StingAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Sting",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Sting",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Sting",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Talons",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "TalonsAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TalonsAttacks"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Talons",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Talons",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Talons",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Pincers",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "PincersAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PincersAttacks"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Pincers",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Pincers",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Pincers",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Tail Slap",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "TailSlapAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Tail Slap",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Tail Slap",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Tail Slap",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Hoof",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "HoofAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("HoofAttacks"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Hoof",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Hoof",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Hoof",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Tentacle",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "TentacleAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TentacleAttacks"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Tentacle",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Tentacle",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Tentacle",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Wing",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "WingAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("WingAttacks"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Wing",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Wing",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Wing",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Ranged Slam",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "RangedSlamAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Ranged Slam",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Ranged Slam",
      Formula=Formula("floor(STR/2)-STR"),
      Conditions={
        function (character, item)
          return (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Ranged Slam",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Rake",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "RakeAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("0"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Rake",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return (character.Variables["NaturalAttacks"] == 1)
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackPrimary",
    "Primary",
  },
})
DefineAbility({
  Name="Hair",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "HairAttacks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Hair",
      Formula=Formula("-5"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackPrimary") then return true end
            return false
          end) or 2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("NaturalAttackSecondary") then return true end
            return false
          end) or (character.Variables["UseWeaponsWithNaturalAttacks"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Tail Sweep",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Tail Sweep",
      Formula=Formula("(STR/2)"),
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Crush",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NaturalAttacks",
      },
    },
    {
      Category="WEAPONPROF=Crush",
      Formula=Formula("(STR/2)"),
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "NaturalAttack",
    "NaturalAttackSecondary",
    "Secondary",
  },
})
DefineAbility({
  Name="Bite Damage Increase",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("MAX(STR/2,0)"),
      Conditions={
        function (character, item)
          return not ((character.Variables["UseWeaponsWithNaturalAttacks"] == 1))
        end,
      },
      Variables={
        "DAMAGE",
      },
    },
  },
})
ModifyAbility({
  Name="Bite",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Gore",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Gore",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Pincers",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Pincers",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Tail Slap",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Tail Slap",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Claw",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Claw",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Slam",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Slam",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Sting",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Sting",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Talons",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Talons",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Hoof",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Hoof",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Tentacle",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Tentacle",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Wing",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Wing",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Rake",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Rake",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Tail Sweep",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Tail Sweep",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Crush",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Crush",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Hair",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Hair",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Ranged Slam",
  Category="Internal",
  Bonuses={
    {
      Category="WEAPONPROF=Ranged Slam",
      Formula=Formula("SizeIncrease"),
      Variables={
        "WIELDCATEGORY",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("F")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("D")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("T")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("S")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("M")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("L")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("7"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("H")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("8"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("G")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("9"),
      Conditions={
        function (character, item)
          return character.BaseSize == GetSize("C")
        end,
      },
      Variables={
        "NaturalAttackSize",
      },
    },
  },
})
ModifyAbility({
  Name="Bite",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "BiteSize",
      },
    },
  },
})
ModifyAbility({
  Name="Gore",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "GoreSize",
      },
    },
  },
})
ModifyAbility({
  Name="Pincers",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "PincersSize",
      },
    },
  },
})
ModifyAbility({
  Name="Tail Slap",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "TailSlapSize",
      },
    },
  },
})
ModifyAbility({
  Name="Claw",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "ClawSize",
      },
    },
  },
})
ModifyAbility({
  Name="Slam",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "SlamSize",
      },
    },
  },
})
ModifyAbility({
  Name="Sting",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "StingSize",
      },
    },
  },
})
ModifyAbility({
  Name="Talons",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "TalonsSize",
      },
    },
  },
})
ModifyAbility({
  Name="Hoof",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "HoofSize",
      },
    },
  },
})
ModifyAbility({
  Name="Tentacle",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "TentacleSize",
      },
    },
  },
})
ModifyAbility({
  Name="Wing",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "WingSize",
      },
    },
  },
})
ModifyAbility({
  Name="Rake",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "RakeSize",
      },
    },
  },
})
ModifyAbility({
  Name="Tail Sweep",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "TailSweepSize",
      },
    },
  },
})
ModifyAbility({
  Name="Crush",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "CrushSize",
      },
    },
  },
})
ModifyAbility({
  Name="Hair",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "HairSize",
      },
    },
  },
})
ModifyAbility({
  Name="Ranged Slam",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("NaturalAttackSize"),
      Variables={
        "RangedSlamSize",
      },
    },
  },
})
ModifyAbility({
  Name="Bite",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["BiteSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["BiteAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Gore",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Gore 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["GoreSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["GoreAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pincers",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Pincers 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["PincersSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["PincersAttacks"] == 6)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Tail Slap",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Fine)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 1)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Slap 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSlapSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TailSlapAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Claw",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["ClawSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Slam",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Slam 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["SlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["SlamAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Sting",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sting 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["StingAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Talons",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Talons 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TalonsSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TalonsAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Hoof",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hoof 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HoofSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HoofAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Tentacle",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tentacle 8 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TentacleSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["TentacleAttacks"] == 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wing",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wing 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["WingSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["WingAttacks"] == 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rake",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rake 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RakeSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["ClawAttacks"] == 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Tail Sweep",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TailSweepSize"] == 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Crush",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Crush (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["CrushSize"] == 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Hair",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Hair 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["HairSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["HairAttacks"] == 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranged Slam",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 1 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 2 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 3 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 4 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 5 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 6 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Diminutive)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 2)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Tiny)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 3)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Small)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 4)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Medium)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 5)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Large)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 6)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Huge)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 7)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Gargantuan)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 8)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranged Slam 7 (Colossal)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["RangedSlamSize"] == 9)
        end,
        function (character, item)
          return (character.Variables["RangedSlamAttacks"] == 7)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Bite 1 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 1 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 2 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 3 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 4 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 5 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 6 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Bite 7 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Bite 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Bite 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Bite 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Bite 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Bite 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Bite 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Bite 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Bite 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Bite 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 1 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 2 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 3 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 4 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 5 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 6 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Gore 7 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Gore 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Gore 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Gore 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Gore 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Gore 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Gore 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Gore 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Gore 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Gore 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 1 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 2 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 3 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 4 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 5 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 6 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Pincers 7 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Pincers 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Pincers 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Pincers 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Pincers 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Pincers 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Pincers 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Pincers 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Pincers 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Pincers 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 1 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 2 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 3 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 4 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 5 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 6 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Fine)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("F")
    end,
  },
  Templates={
    "Tail Slap 7 (Fine)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Slap 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Slap 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Slap 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Slap 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Slap 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Slap 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Slap 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Slap 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Slap 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Claw 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Claw 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Claw 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Claw 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Claw 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Claw 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Claw 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Claw 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Claw 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Slam 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Slam 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Slam 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Slam 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Slam 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Slam 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Slam 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Slam 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Slam 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Sting 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Sting 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Sting 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Sting 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Sting 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Sting 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Sting 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Sting 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Sting 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Talons 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Talons 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Talons 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Talons 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Talons 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Talons 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Talons 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Talons 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Talons 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Hoof 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hoof 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hoof 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hoof 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hoof 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hoof 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hoof 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hoof 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hoof 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tentacle 8 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tentacle 8 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tentacle 8 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tentacle 8 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tentacle 8 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tentacle 8 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tentacle 8 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tentacle 8 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tentacle 8 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Wing 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Wing 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Wing 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Wing 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Wing 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Wing 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Wing 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Wing 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Wing 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Tail Sweep (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Tail Sweep (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Tail Sweep (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Tail Sweep (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Tail Sweep (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Tail Sweep (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Tail Sweep (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Tail Sweep (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Tail Sweep (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Crush (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Crush (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Crush (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Crush (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Crush (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Crush (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Crush (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Crush (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Crush (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Rake 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Rake 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Rake 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Rake 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Rake 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Rake 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Rake 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Rake 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Rake 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hair 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hair 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hair 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hair 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hair 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hair 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hair 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hair 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hair 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hair 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hair 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hair 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hair 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hair 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hair 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hair 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hair 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hair 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hair 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hair 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hair 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Hair 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Hair 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Hair 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Hair 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Hair 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Hair 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Hair 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Hair 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 1 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 1 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 1 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 1 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 1 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 1 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 1 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 1 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 1 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 2 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 2 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 2 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 2 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 2 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 2 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 2 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 2 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 2 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 3 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 3 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 3 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 3 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 3 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 3 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 3 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 3 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 3 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 4 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 4 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 4 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 4 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 4 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 4 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 4 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 4 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 4 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 5 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 5 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 5 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 5 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 5 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 5 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 5 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 5 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 5 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 6 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 6 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 6 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 6 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 6 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 6 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 6 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 6 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 6 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Diminutive)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("D")
    end,
  },
  Templates={
    "Ranged Slam 7 (Diminutive)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Tiny)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("T")
    end,
  },
  Templates={
    "Ranged Slam 7 (Tiny)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Small)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("S")
    end,
  },
  Templates={
    "Ranged Slam 7 (Small)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Medium)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("M")
    end,
  },
  Templates={
    "Ranged Slam 7 (Medium)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Large)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("L")
    end,
  },
  Templates={
    "Ranged Slam 7 (Large)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Huge)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("H")
    end,
  },
  Templates={
    "Ranged Slam 7 (Huge)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Gargantuan)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("G")
    end,
  },
  Templates={
    "Ranged Slam 7 (Gargantuan)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Ranged Slam 7 (Colossal)",
  Category="Internal",
  Conditions={
    function (character, item)
      return character.BaseSize == GetSize("C")
    end,
  },
  Templates={
    "Ranged Slam 7 (Colossal)",
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="True Dragon Defaults",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Fly Speed",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dragon ~ Bite",
        "Dragon ~ Breath Weapon",
        "Dragon ~ Claw",
        "Dragon ~ Dragon Senses",
        "Dragon ~ Immunities",
        "Dragon ~ Spell-Like Abilities",
        "Dragon ~ Spells",
        "Dragon Age Category",
        "Flight Maneuverability",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dragon ~ Tail Slap",
      },
      Conditions={
        function (character, item)
          return character.Size >= "L"
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dragon ~ Crush",
      },
      Conditions={
        function (character, item)
          return character.Size >= "H"
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dragon ~ Tail Sweep",
      },
      Conditions={
        function (character, item)
          return character.Size >= "G"
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dragon ~ Wing",
      },
      Conditions={
        function (character, item)
          return character.Size >= "M"
        end,
        function (character, item)
          return (character.Variables["HasWings"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("DragonNaturalArmor"),
      Type={
        Name="NaturalArmor",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "DragonSizeTracker",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3*(DragonAgeCategory-1)"),
      Variables={
        "DragonNaturalArmor",
      },
    },
  },
  Templates={
    "Dragon Size Tracker",
  },
})
DefineAbility({
  Name="Dragon Age (2)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("2"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "CON",
        "INT",
        "WIS",
        "CHA",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DragonSizeTracker",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (3)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("2"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DragonSizeTracker",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (4)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
        "CON",
        "INT",
        "WIS",
        "CHA",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (5)",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dragon ~ Damage Reduction",
        "Dragon ~ Spell Resistance",
      },
    },
  },
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("2"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DragonSizeTracker",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (6)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
        "CON",
        "INT",
        "WIS",
        "CHA",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (7)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (8)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("2"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
        "CON",
        "INT",
        "WIS",
        "CHA",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DragonSizeTracker",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (9)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (10)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
        "CON",
        "INT",
        "WIS",
        "CHA",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (11)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "DEX",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Age (12)",
  Category="Internal",
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("2"),
      Variables={
        "CR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Type={
        Name="Racial",
        Stack=true,
      },
      Variables={
        "STR",
        "CON",
        "INT",
        "WIS",
        "CHA",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DragonSizeTracker",
      },
    },
  },
})
DefineAbility({
  Name="Bite",
  Key="Dragon ~ Bite",
  Category="Special Ability",
  Description={
    Format="This is a primary attack that deals the indicated damage plus 1-1/2 times the dragon's Strength bonus (even though it has more than one attack). A dragon's bite attack has reach as if the creature were one size category larger (+10 feet for Colossal dragons).",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item)
          return character.Size == "T" or character.Size >= "L"
        end,
      },
      Variables={
        "DragonBiteReach",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item)
          return character.Size == "C"
        end,
      },
      Variables={
        "DragonBiteReach",
      },
    },
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("DragonBiteReach"),
      Variables={
        "REACH",
      },
    },
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("max(0,STR/2)"),
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Claw",
  Key="Dragon ~ Claw",
  Category="Special Ability",
  Description={
    Format="These primary attacks deal the indicated damage plus the dragon's Strength bonus.",
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Wing",
  Key="Dragon ~ Wing",
  Category="Special Ability",
  Description={
    Format="The dragon can slam foes with its wings, even when flying. Wing attacks are secondary attacks that deal the indicated damage plus 1/2 the dragon's Strength bonus.",
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Tail Slap",
  Key="Dragon ~ Tail Slap",
  Category="Special Ability",
  Description={
    Format="The dragon can slap one foe each round with its tail. A tail slap is a secondary attack that deals the indicated damage plus 1-1/2 times the dragon's Strength bonus (this is an exception to the normal secondary attack rules).",
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Crush",
  Key="Dragon ~ Crush",
  Category="Special Ability",
  Description={
    Format="A flying or jumping Huge or larger dragon can land on foes as a standard action, using its whole body to crush them. Crush attacks are effective only against opponents three or more size categories smaller than the dragon. A crush attack affects as many creatures as fit in the dragon's space. Creatures in the affected area must succeed on a Reflex save (DC %4) or be pinned, automatically taking bludgeoning damage during the next round unless the dragon moves off them. If the dragon chooses to maintain the pin, it must succeed at a combat maneuver check as normal. Pinned foes take damage from the crush each round if they don't escape. A crush attack deals %1d%2+%3.",
    Arguments={
      Formula("CrushDice"),
      Formula("CrushDie"),
      Formula("CrushBonusDamage"),
      Formula("CrushDC"),
      Formula("1"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.90",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Crush",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3, DC %4)",
      Arguments={
        "CrushDice",
        "CrushDie",
        "CrushBonusDamage",
        "CrushDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("STR*1.5"),
      Variables={
        "CrushBonusDamage",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "CrushDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Crush)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CrushDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "CrushDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.Size >= "G"
        end,
      },
      Variables={
        "CrushDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Variables={
        "CrushDie",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item)
          return character.Size == "G"
        end,
      },
      Variables={
        "CrushDie",
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Tail Sweep",
  Key="Dragon ~ Tail Sweep",
  Category="Special Ability",
  Description={
    Format="This allows a Gargantuan or larger dragon to sweep with its tail as a standard action. The sweep affects a half-circle with a radius of 30 feet (or 40 feet for a Colossal dragon), extending from an intersection on the edge of the dragon's space in any direction. Creatures within the swept area are affected if they are four or more size categories smaller than the dragon. A tail sweep automatically deals %1d%2+%3. Affected creatures can attempt Reflex saves to take half damage (DC %4).",
    Arguments={
      Formula("TailSweepDice"),
      Formula("TailSweepDie"),
      Formula("TailSweepBonusDamage"),
      Formula("TailSweepDC"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.92",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Tail Sweep",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3, DC %4)",
      Arguments={
        "TailSweepDice",
        "TailSweepDie",
        "TailSweepBonusDamage",
        "TailSweepDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "TailSweepDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "TailSweepDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("STR*1.5"),
      Variables={
        "TailSweepBonusDamage",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Tail Sweep)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "TailSweepDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "TailSweepDie",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.Size == "C"
        end,
      },
      Variables={
        "TailSweepDie",
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Dragon ~ Breath Weapon",
  Category="Special Ability",
  Description={
    Format="Using a breath weapon is a standard action. A dragon can use its breath weapon once every 1d4 rounds, even if it possesses more than one breath weapon. A breath weapon always starts at an intersection adjacent to the dragon and extends in a direction of the dragon's choice. Breath weapons come in two shapes, lines and cones, whose areas vary with the dragon's size. If a breath weapon deals damage, those caught in the area can attempt Reflex saves to take half damage. The save DC against a breath weapon is 10 + 1/2 dragon's HD + dragon's Con modifier. Saves against various breath weapons use the same DC; the type of saving throw is noted in the variety descriptions. A dragon can use its breath weapon when it is grappling or being grappled.",
  },
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("15"),
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("30"),
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item)
          return character.Size >= "S"
        end,
      },
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size >= "S"
        end,
      },
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size >= "M"
        end,
      },
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item)
          return character.Size >= "M"
        end,
      },
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size >= "L"
        end,
      },
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item)
          return character.Size >= "L"
        end,
      },
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size >= "H"
        end,
      },
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item)
          return character.Size >= "H"
        end,
      },
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size >= "G"
        end,
      },
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item)
          return character.Size >= "G"
        end,
      },
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size >= "C"
        end,
      },
      Variables={
        "BreathWeaponCone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item)
          return character.Size >= "C"
        end,
      },
      Variables={
        "BreathWeaponLine",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DragonAgeCategory*2"),
      Variables={
        "BreathWeaponDice",
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Dragon Senses",
  Key="Dragon ~ Dragon Senses",
  Category="Special Ability",
  Description={
    Format="Dragons have darkvision 120 ft. and blindsense 60 ft. They see four times as well as a human in dim light and twice as well in normal light.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("60"),
      Type={
        Name="Base",
      },
      Variables={
        "BlindsenseRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("120"),
      Type={
        Name="Base",
      },
      Variables={
        "DarkvisionRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "LowLightDistance",
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Frightful Presence",
  Key="Dragon ~ Frightful Presence",
  Category="Special Ability",
  Description={
    Format="A dragon's frightful presence has a range equal to 30 feet x the dragon's age category [%1'], but otherwise functions as detailed on page 300.",
    Arguments={
      Formula("FrightfulPresenceRange"),
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DragonAgeCategory*30"),
      Variables={
        "FrightfulPresenceRange",
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Spells",
  Key="Dragon ~ Spells",
  Category="Special Ability",
  Description={
    Format="A dragon knows and casts arcane spells as a sorcerer of the level indicated in its specific description. Its caster level depends on its age, as shown for each type.",
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Spell-Like Abilities",
  Key="Dragon ~ Spell-Like Abilities",
  Category="Special Ability",
  Description={
    Format="A dragon's caster level for its spelllike abilities is equal to its total Hit Dice.",
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Damage Reduction",
  Key="Dragon ~ Damage Reduction",
  Category="Special Ability",
  Description={
    Format="Dragons gain damage reduction as they age, as indicated on each dragon's specific entry. Their natural weapons are treated as magic weapons for the purpose of overcoming damage reduction.",
  },
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Damage Reduction / Magic",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DisableDragonBaseDR"] == 0)
        end,
      },
    },
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Immunities",
  Key="Dragon ~ Immunities",
  Category="Special Ability",
  Description={
    Format="Every dragon is immune to sleep and paralysis. In addition, a dragon is immune to one or two additional forms of attack no matter what its age, as given in its description.",
  },
  Types={
    "RaceAbility",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Spell Resistance",
  Key="Dragon ~ Spell Resistance",
  Category="Special Ability",
  Description={
    Format="As dragons grow older, they become more resistant to spells and spell-like abilities, as indicated in the dragon descriptions. A dragon's SR is equal to 11 + its CR.",
  },
  SpellResistance=Formula("CR+11"),
  Types={
    "RaceAbility",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Damage Reduction / Magic",
  Category="Internal",
  DamageReduction={
    Value="DragonDR/Magic",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5*(floor((DragonAgeCategory-3)/2))"),
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 5)
        end,
      },
      Variables={
        "DragonDR",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Fly Speed",
  Category="Internal",
  Visible=false,
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("50"),
      Conditions={
        function (character, item)
          return character.Size >= "S"
        end,
      },
      Variables={
        "TYPE.Fly",
      },
    },
    {
      Category="MOVEADD",
      Formula=Formula("50"),
      Conditions={
        function (character, item)
          return character.Size >= "L"
        end,
      },
      Variables={
        "TYPE.Fly",
      },
    },
    {
      Category="MOVEADD",
      Formula=Formula("50"),
      Conditions={
        function (character, item)
          return character.Size >= "G"
        end,
      },
      Variables={
        "TYPE.Fly",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Variables={
        "Maneuverability",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item)
          return character.Size >= "L"
        end,
      },
      Variables={
        "Maneuverability",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item)
          return character.Size >= "G"
        end,
      },
      Variables={
        "Maneuverability",
      },
    },
  },
  Movement={
    Fly=100,
  },
})
DefineAbility({
  Name="Dragon Age Category",
  SortKey="a",
  Category="Special Ability",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (2)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (3)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (4)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (5)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (6)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (7)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (8)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (9)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 9)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (10)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 10)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (11)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 11)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Dragon Age (12)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 12)
        end,
      },
    },
  },
  Aspects={
    {
      Name="NAME",
      FormatString="Dragon Age Category - Wyrmling",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 1)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Very Young",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 2)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Young",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 3)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Juvenile",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 4)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Young Adult",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 5)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Adult",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 6)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Mature Adult",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 7)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Old",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 8)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Very Old",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 9)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Ancient",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 10)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Wyrm",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] == 11)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Dragon Age Category - Great Wyrm",
      Conditions={
        function (character, item)
          return (character.Variables["DragonAgeCategory"] >= 12)
        end,
      },
    },
  },
  Types={
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Dragon Age Selected",
  Category="Internal",
  Visible=false,
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fast Healing",
      },
      Conditions={
        function (character, item)
          return (character.Variables["FastHealingRate"] >= 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Ability Damage",
  Key="Ability Damage ~ Ex",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseString({"Cha", "Con", "Dex", "Int", "Str", "Wis"}),
  },
  Description={
    Format="Your attack causes ability damage reducing %1 by the %2d%3. Ability damage can be healed naturally.",
    Arguments={
      Formula("%CHOICE"),
      Formula("AbilityDamageDice"),
      Formula("AbilityDamageDieSize"),
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 %3 damage)",
      Arguments={
        "AbilityDamageDice",
        "AbilityDamageDieSize",
        "%CHOICE",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "AbilityDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Ability Damage",
  Key="Ability Damage ~ Su",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseString({"Cha", "Con", "Dex", "Int", "Str", "Wis"}),
  },
  Description={
    Format="Your attack causes ability damage reducing %1 by the %2d%3. Ability damage can be healed naturally.",
    Arguments={
      Formula("%CHOICE"),
      Formula("AbilityDamageDice"),
      Formula("AbilityDamageDieSize"),
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 %3 damage)",
      Arguments={
        "AbilityDamageDice",
        "AbilityDamageDieSize",
        "%CHOICE",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "AbilityDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "AttackOption",
  },
})
DefineAbility({
  Name="Ability Drain",
  Key="Ability Drain ~ Ex",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseString({"Cha", "Con", "Dex", "Int", "Str", "Wis"}),
  },
  Description={
    Format="Your attack causes ability drain reducing %1 by the %2d%3. Ability drain is permanent and can only be restored through magic.",
    Arguments={
      Formula("%CHOICE"),
      Formula("AbilityDrainDice"),
      Formula("AbilityDrainDieSize"),
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 %3 damage)",
      Arguments={
        "AbilityDamageDice",
        "AbilityDamageDieSize",
        "%CHOICE",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "AbilityDrainDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Ability Drain",
  Key="Ability Drain ~ Su",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseString({"Cha", "Con", "Dex", "Int", "Str", "Wis"}),
  },
  Description={
    Format="Your attack causes ability drain reducing %1 by the %2d%3. Ability drain is permanent and can only be restored through magic.",
    Arguments={
      Formula("%CHOICE"),
      Formula("AbilityDrainDice"),
      Formula("AbilityDrainDieSize"),
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 %3 damage)",
      Arguments={
        "AbilityDamageDice",
        "AbilityDamageDieSize",
        "%CHOICE",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "AbilityDrainDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "AttackOption",
  },
})
DefineAbility({
  Name="Amphibious",
  Category="Special Ability",
  Description={
    Format="You have the aquatic subtype, but you can survive indefinitely on land.",
  },
  SourcePage="p.299",
  Templates={
    "Aquatic",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Bleed",
  Category="Special Ability",
  Description={
    Format="You can cause wounds that continue to bleed, inflicting an additional %1d%2 damage each round at the start of the affected creature's turn. This bleeding can be stopped by a successful DC 15 Heal skill check or through the application of any magical healing.",
    Arguments={
      Formula("BleedDamageDice"),
      Formula("BleedDamageDieSize"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1d%2/round",
      Arguments={
        "BleedDamageDice",
        "BleedDamageDieSize",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "BleedDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Cold",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Cold %2d%3 cold, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Cold %2d%3 cold, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Corrosive Gas",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Corrosive Gas, %2d%3 acid DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Corrosive Gas, %2d%3 acid DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Fire",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Fire %2d%3 Fire, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Fire %2d%3 Fire, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Paralyzing Gas",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Paralyzing Gas, DC %2 for 1d6+%3 rounds, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDC"),
      Formula("BreathWeaponDuration"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Paralyzing Gas, DC %2 for 1d6+%3 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDC",
        "BreathWeaponDuration",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Repulsion Gas",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Repulsion Gas, DC %2 for 1d6+%3 rounds, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDC"),
      Formula("BreathWeaponDuration"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Repulsion Gas, DC %2 for 1d6+%3 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDC",
        "BreathWeaponDuration",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Sleep",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Sleep DC %2 for 1d6+%3 rounds, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDC"),
      Formula("BreathWeaponDuration"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Sleep DC %2 for 1d6+%3 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDC",
        "BreathWeaponDuration",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Slow",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Slow DC %2 for 1d6+%3 rounds, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDC"),
      Formula("BreathWeaponDuration"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Slow DC %2 for 1d6+%3 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDC",
        "BreathWeaponDuration",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Weakening Gas",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Weakening Gas, DC %2 or -%3 STR, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDC"),
      Formula("BreathWeaponStatDamage"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Weakening Gas, DC %2 or -%3 STR)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDC",
        "BreathWeaponStatDamage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Line of Acid",
  Category="Special Ability",
  Description={
    Format="%1' Line of Acid %2d%3 acid, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponLine"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Line of Acid %2d%3 acid, DC %4)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Line of Fire",
  Category="Special Ability",
  Description={
    Format="%1' Line of Fire %2d%3 fire, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponLine"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Line of Fire %2d%3 fire, DC %4)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Line of Lightning",
  Category="Special Ability",
  Description={
    Format="%1' Line of Lightning %2d%3 electricity, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponLine"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Line of Lightning %2d%3 electricity, DC %4)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Force",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Force %2d%3, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Force %2d%3, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Prismatic Spray",
  Category="Special Ability",
  Description={
    Format="%1' Prismatic Spray Effect, DC %2, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponSpray"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Prismatic Spray Effect, DC %2)",
      Arguments={
        "BreathWeaponSpray",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Sonic",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Sonic %2d%3, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Sonic %2d%3, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Lightning",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Lightning %2d%3, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Lightning %2d%3, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Piercing",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Piercing %2d%3, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1' Cone of Piercing %2d%3, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Burn",
  Category="Special Ability",
  Description={
    Format="You deal fire damage in addition to damage dealt on a successful hit in melee. Those affected by the burn ability must also succeed on a Reflex (DC %1) save or catch fire, taking %2d%3 damage for an additional 1d4 rounds at the start of its turn. A burning creature can attempt a new save as a full-round action. Dropping and rolling on the ground grants a +4 bonus on this save. Creatures that hit a burning creature with natural weapons or unarmed attacks take fire damage as though hit by the burning creature and must make a Reflex save to avoid catching on fire.",
    Arguments={
      Formula("BurnDC"),
      Formula("BurnDamageDice"),
      Formula("BurnDamageDieSize"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Burn",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2, DC %3)",
      Arguments={
        "BurnDamageDice",
        "BurnDamageDieSize",
        "BurnDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BurnDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Burn)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BurnDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "BurnDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Can't be Disarmed",
  Category="Special Ability",
  Types={
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Change Shape",
  Category="Special Ability",
  Description={
    Format="You have the ability to assume the appearance of a specific creature or type of creature (usually a humanoid), but retains most of your own physical qualities. You cannot change shape to a form more than one size category smaller or larger than your original form. This ability functions as a polymorph spell, but you do not adjust your ability scores (although you gain any other abilities of the creature you mimic). Unless otherwise stated, you can remain in an alternate form indefinitely.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.298",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Channel Resistance",
  Category="Special Ability",
  Description={
    Format="You are less easily affected by clerics or paladins. You add +%1 to saves made to resist the effects of channel energy, including effects that rely on the use of channel energy.",
    Arguments={
      Formula("ChannelResistance"),
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "ChannelResistance",
      },
    },
    {
      Name="Resistance",
      FormatString="Channel",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Constrict",
  Category="Special Ability",
  Description={
    Format="You can crush an opponent, dealing %1d%2+%3 bludgeoning damage, when you make a successful grapple check (in addition to any other effects caused by a successful check, including additional damage).",
    Arguments={
      Formula("ConstrictDice"),
      Formula("ConstrictDieSize"),
      Formula("ConstrictBonusDamage"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3)",
      Arguments={
        "ConstrictDice",
        "ConstrictDieSize",
        "ConstrictBonusDamage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "ConstrictDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Curse",
  Category="Special Ability",
  Description={
    Format="You can bestow a curse upon your enemies.",
  },
  SourcePage="p.299",
  Types={
    "SpecialAttack",
    "Supernatural",
    "AttackOption",
  },
})
DefineAbility({
  Name="Disease",
  Key="Disease ~ Ex",
  Category="Special Ability",
  Description={
    Format="You can cause disease in those you contact.",
  },
  SourcePage="p.299",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Disease",
  Key="Disease ~ Su",
  Category="Special Ability",
  Description={
    Format="You can cause disease in those you contact.",
  },
  SourcePage="p.299",
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Disease",
  Key="Disease ~ Filth Fever",
  Category="Special Ability",
  Description={
    Format="Filth Fever-Bite injury; Save Fort DC %1; Onset 1d3 days; Frequency 1/day; Effect 1d3 Dex damage and 1d3 Con damage; Cure 2 consecutive saves.",
    Arguments={
      Formula("DiseaseDC"),
    },
  },
  SourcePage="p.232",
  Visible=true,
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Disease",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Disease",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "DiseaseDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Disease)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "DiseaseDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Distraction",
  Key="Distraction ~ Swarm",
  Category="Special Ability",
  Description={
    Format="You can nauseate creatures that you damage. Any living creature that takes damage from you is nauseated for 1 round; a Fortitude save (DC %1) negates the effect.",
    Arguments={
      Formula("DistractionDC"),
    },
  },
  SourcePage="p.299",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Distraction",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "DistractionDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "DistractionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Distraction)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "DistractionDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Distraction",
  Key="Distraction",
  Category="Special Ability",
  Description={
    Format="You can nauseate creatures that you damage. Any living creature that takes damage from you is nauseated for 1 round; a Fortitude save (DC %1) negates the effect.",
    Arguments={
      Formula("DistractionDC"),
    },
  },
  SourcePage="p.299",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Distraction",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "DistractionDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "DistractionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Distraction)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "DistractionDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Energy Drain",
  Category="Special Ability",
  Description={
    Format="Negative levels remain until 24 hours have passed or until they are removed with a spell, such as restoration. If a negative level is not removed before 24 hours have passed, the affected creature must attempt a Fortitude save (DC %1). On a success, the negative level goes away with no harm to the creature. On a failure, the negative level becomes permanent. A separate saving throw is required for each negative level.",
    Arguments={
      Formula("EnergyDrainDC"),
    },
  },
  SourcePage="p.299",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Energy Drain",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 level, DC %2)",
      Arguments={
        "EnergyDrainLevels",
        "EnergyDrainDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CHA"),
      Variables={
        "EnergyDrainDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Energy Drain)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "EnergyDrainDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Fast Healing",
  Category="Special Ability",
  Description={
    Format="You regain hit points at %1 per round. Fast healing does not restore hit points lost from starvation, thirst, or suffocation, nor does it allow a creature to regrow lost body parts. Unless otherwise stated, it does not allow lost body parts to be reattached. Fast healing continues to function (even at negative hit points) until a creature dies, at which point the effects of fast healing end immediately.",
    Arguments={
      Formula("FastHealingRate"),
    },
  },
  SourcePage="p.300",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "FastHealingRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Ferocity",
  Category="Special Ability",
  Description={
    Format="You remain conscious and can continue fighting even if your hit point total is below 0. You are still staggered and loose 1 hit point each round. You still die when your hit point total reach -%1.",
    Arguments={
      Formula("CONSCORE"),
    },
  },
  SourcePage="p.300",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Flight",
  Key="Flight ~ Ex",
  Category="Special Ability",
  Description={
    Format="You can cease or resume flight as a free action.",
  },
  SourcePage="p.300",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Flight",
  Key="Flight ~ Su",
  Category="Special Ability",
  Description={
    Format="You can cease or resume flight as a free action. Supernatural flight becomes ineffective in an antimagic field, and the creature loses its ability to fly for as long as the antimagic effect persists.",
  },
  SourcePage="p.300",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Flight Maneuverability",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="VAR",
      Formula=Formula("%CHOICE"),
      Variables={
        "Maneuverability",
      },
    },
    Target="PC",
  },
  TemporaryBonusDescription={
    Format="Adjust Flight Maneuverability up or down by assigning a possitive or negative number",
  },
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Maneuverability (Clumsy)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["Maneuverability"] <= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Maneuverability (Poor)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["Maneuverability"] == 2)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Maneuverability (Average)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["Maneuverability"] == 3)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Maneuverability (Good)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["Maneuverability"] == 4)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Maneuverability (Perfect)",
      },
      Conditions={
        function (character, item)
          return (character.Variables["Maneuverability"] >= 5)
        end,
      },
    },
  },
  Aspects={
    {
      Name="NAME",
      FormatString="Maneuverability (Perfect)",
      Conditions={
        function (character, item)
          return (character.Variables["FlightManeuverabilityCategory"] == 5)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Maneuverability (Good)",
      Conditions={
        function (character, item)
          return (character.Variables["FlightManeuverabilityCategory"] == 4)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Maneuverability (Average)",
      Conditions={
        function (character, item)
          return (character.Variables["FlightManeuverabilityCategory"] == 3)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Maneuverability (Poor)",
      Conditions={
        function (character, item)
          return (character.Variables["FlightManeuverabilityCategory"] == 2)
        end,
      },
    },
    {
      Name="NAME",
      FormatString="Maneuverability (Clumsy)",
      Conditions={
        function (character, item)
          return (character.Variables["FlightManeuverabilityCategory"] <= 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(Maneuverability,5)"),
      Type={
        Name="Base",
      },
      Variables={
        "FlightManeuverabilityCategory",
      },
    },
  },
  ClassSkills={
    "Fly",
  },
})
DefineAbility({
  Name="Maneuverability (Perfect)",
  Category="Special Ability",
  Visible=false,
  Aspects={
    {
      Name="Maneuverability",
      FormatString="Perfect",
    },
  },
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("8"),
      Variables={
        "Fly",
      },
    },
  },
  Types={
    "Maneuverability",
  },
})
DefineAbility({
  Name="Maneuverability (Good)",
  Category="Special Ability",
  Visible=false,
  Aspects={
    {
      Name="Maneuverability",
      FormatString="Good",
    },
  },
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("4"),
      Variables={
        "Fly",
      },
    },
  },
  Types={
    "Maneuverability",
  },
})
DefineAbility({
  Name="Maneuverability (Average)",
  Category="Special Ability",
  Visible=false,
  Aspects={
    {
      Name="Maneuverability",
      FormatString="Average",
    },
  },
  Types={
    "Maneuverability",
  },
})
DefineAbility({
  Name="Maneuverability (Poor)",
  Category="Special Ability",
  Visible=false,
  Aspects={
    {
      Name="Maneuverability",
      FormatString="Poor",
    },
  },
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("-4"),
      Variables={
        "Fly",
      },
    },
  },
  Types={
    "Maneuverability",
  },
})
DefineAbility({
  Name="Maneuverability (Clumsy)",
  Category="Special Ability",
  Visible=false,
  Aspects={
    {
      Name="Maneuverability",
      FormatString="Clumsy",
    },
  },
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("-8"),
      Variables={
        "Fly",
      },
    },
  },
  Types={
    "Maneuverability",
  },
})
DefineAbility({
  Name="Frightful Presence",
  Category="Special Ability",
  Description={
    Format="Your very presence unsettling to foes. Activating this ability is a free action that is usually part of an attack or charge. Opponents within range who witness the action may become frightened or shaken. The range is %1 feet, and the duration is usually 5d6 rounds. This ability affects only opponents with fewer Hit Dice or levels than the creature has. An affected opponent can resist the effects with a successful Will save (DC %2). On a failed save, the opponent is shaken, or panicked if 4 HD or fewer. An opponent that succeeds on the saving throw is immune to your frightful presence for 24 hours. Frightful presence is a mind-affecting fear effect.",
    Arguments={
      Formula("FrightfulPresenceRange"),
      Formula("FrightfulPresenceDC"),
    },
  },
  SourcePage="p.300",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2)",
      Arguments={
        "FrightfulPresenceRange",
        "FrightfulPresenceDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CHA"),
      Variables={
        "FrightfulPresenceDC",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Aura",
  },
})
DefineAbility({
  Name="Gaze",
  Category="Special Ability",
  Description={
    Format="Your gaze special attack takes effect when foes look at the attacking creature's eyes.",
  },
  SourcePage="p.300",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Gaze",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %2)",
      Arguments={
        "GazeDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CHA"),
      Variables={
        "GazeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Gaze)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "GazeDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Grab",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Immunity to Acid",
  Category="Special Ability",
  Description={
    Format="You never take acid damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Acid",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Cold",
  Category="Special Ability",
  Description={
    Format="You never take cold damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Cold",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Fire",
  Category="Special Ability",
  Description={
    Format="You never take fire damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Fire",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Electricity",
  Category="Special Ability",
  Description={
    Format="You never take electricity damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Electricity",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Sonic",
  Category="Special Ability",
  Description={
    Format="You never take sonic damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Sonic",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Ability Damage",
  Category="Special Ability",
  Description={
    Format="You are immune to ability damage attacks.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Ability Damage",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Ability Drain",
  Category="Special Ability",
  Description={
    Format="You are immune to ability drain attacks.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Ability Drain",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Blindness",
  Category="Special Ability",
  Description={
    Format="You are immune to blindness effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Blindness",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Bleed",
  Category="Special Ability",
  Description={
    Format="You are immune to bleed effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Bleed",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Charm",
  Category="Special Ability",
  Description={
    Format="You are never subject to charm effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Charm",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Compulsion",
  Category="Special Ability",
  Description={
    Format="You are never subject to compulsion effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Compulsion",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Critical Hits",
  Category="Special Ability",
  Description={
    Format="You are never subject to critical hits.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Critical Hits",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Curse Effects",
  Category="Special Ability",
  Description={
    Format="You are never affected by curse effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Curse Effects",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Deafness",
  Category="Special Ability",
  Description={
    Format="You are never subject to deafness effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Deafness",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Death Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to death effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Death Effects",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Death from Massive Damage",
  Category="Special Ability",
  Description={
    Format="You are not at risk of death from massive damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Death from Massive Damage",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Disease",
  Category="Special Ability",
  Description={
    Format="You are never subject to disease effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Disease",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Fatigue",
  Category="Special Ability",
  Description={
    Format="You can never be fatigued.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Fatigue",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Fear",
  Category="Special Ability",
  Description={
    Format="You are never subject to fear effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Fear",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Flanking",
  Category="Special Ability",
  Description={
    Format="You cannot be flanked.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Flanking",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Energy Drain",
  Category="Special Ability",
  Description={
    Format="You are immune to energy drain attacks.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Energy Drain",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Exhaustion",
  Category="Special Ability",
  Description={
    Format="You can never be exhausted.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Exhaustion",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Language-Dependent Spells",
  Category="Special Ability",
  Description={
    Format="You are never subject to language-dependent spells.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Language-Dependent Spells",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Magical Sleep",
  Category="Special Ability",
  Description={
    Format="You are never subject to magic sleep effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Magical Sleep",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Mind-Affecting Effects",
  Category="Special Ability",
  Description={
    Format="You are never affected by mind-affecting effects (charms, compulsions, phantasms, patterns, and morale effects).",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Mind-Affecting Effects",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Necromancy",
  Category="Special Ability",
  Description={
    Format="You are never subject to necromancy effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Necromancy",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Nonlethal Damage",
  Category="Special Ability",
  Description={
    Format="You are never subject to nonlethal damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Nonlethal Damage",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Paralysis",
  Category="Special Ability",
  Description={
    Format="You can never be paralyzed.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Paralysis",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Petrification",
  Category="Special Ability",
  Description={
    Format="You can never be petrified.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Petrification",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Phantasms",
  Category="Special Ability",
  Description={
    Format="You are never subject to phantasm effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Phantasms",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Poison",
  Category="Special Ability",
  Description={
    Format="You never take poison damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Poison",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Polymorph",
  Category="Special Ability",
  Description={
    Format="You are never subject to polymorph effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Polymorph",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Precision Damage",
  Category="Special Ability",
  Description={
    Format="You are never subject to precision damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Precision Damage",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Slashing and Piercing Damage",
  Category="Special Ability",
  Description={
    Format="You are never subject to slashing or piercing damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Slashing and Piercing Damage",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Sleep",
  Category="Special Ability",
  Description={
    Format="You are never subject to sleep effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Sleep",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Sneak Attacks",
  Category="Special Ability",
  Description={
    Format="You do not take additional damage from precision-based attacks, such as sneak attack.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Sneak Attacks",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Strength Drain",
  Category="Special Ability",
  Description={
    Format="You are immune to strength drain attacks.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Strength Drain",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Stunning",
  Category="Special Ability",
  Description={
    Format="You are never subject to stunning.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Stunning",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Weapon Damage",
  Category="Special Ability",
  Description={
    Format="You are never subject to weapon damage.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Weapon Damage",
    },
  },
  Conditions={
    function (character, item)
      return character.Size == "F" or character.Size == "D"
    end,
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Wind Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to wind effects.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Wind Effects",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Magic Missile",
  Category="Special Ability",
  Description={
    Format="You cannot be harmed by magic missile.",
  },
  SourcePage="p.",
  Aspects={
    {
      Name="Immunity",
      FormatString="Magic Missile",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Negative Levels",
  Category="Special Ability",
  Description={
    Format="You are never subject to Negative Levels.",
  },
  SourcePage="p.",
  Aspects={
    {
      Name="Immunity",
      FormatString="Negative Levels",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Permanent Wounds",
  Category="Special Ability",
  Description={
    Format="You are never subject to Permanent Wounds.",
  },
  SourcePage="p.",
  Aspects={
    {
      Name="Immunity",
      FormatString="Permanent Wounds",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Bludgeoning Damage",
  Category="Special Ability",
  Types={
    "SpecialQuality",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Piercing Damage",
  Category="Special Ability",
  Types={
    "SpecialQuality",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Slashing Damage",
  Category="Special Ability",
  Types={
    "SpecialQuality",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Magic",
  Category="Special Ability",
  Description={
    Format="You are immune to all spells and spell-like abilities that allow spell resistance.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Immunity",
      FormatString="Magic",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Incorporeal",
  Category="Special Ability",
  Description={
    Format="You have no physical body. You can be harmed only by other incorporeal creatures, magic weapons or creatures that strike as magic weapons, and spells, spell-like abilities, or supernatural abilities. You are immune to all nonmagical attack forms. Even when hit by spells or magic weapons, you take only half damage from a corporeal source except for channel energy. Although it is not a magical attack, holy water can affect incorporeal undead. Corporeal spells and effects that do not cause damage only have a 50%% chance of affecting you. Force spells and effects, such as from a magic missile, affect you normally.",
  },
  SourcePage="p.301",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Light Blindness",
  Category="Special Ability",
  Description={
    Format="You are blinded for 1 round if exposed to bright light, such as sunlight or the daylight spell. You are dazzled as long as you remain in areas of bright light.",
  },
  SourcePage="p.301",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
  },
})
DefineAbility({
  Name="Light Sensitivity",
  Category="Special Ability",
  Description={
    Format="You are dazzled in areas of bright sunlight or within the radius of a daylight spell.",
  },
  SourcePage="p.301",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
  },
})
DefineAbility({
  Name="Oversized Weapon",
  Key="Oversized Weapon",
  Category="Special Ability",
  Description={
    Format="You can wield weapons of one size larger than you without penalty.",
  },
  Bonuses={
    {
      Category="WIELDCATEGORY",
      Formula=Formula("-1"),
      Variables={
        "ALL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "OversizedWeapon",
  },
})
DefineAbility({
  Name="Paralysis",
  Key="Paralysis ~ Ex",
  Category="Special Ability",
  Description={
    Format="You can render your victims immobile. Paralyzed creatures cannot move, speak, or take any physical actions. The creature is rooted to the spot, frozen and helpless. Paralysis works on the body, and a character can usually resist it with a Fortitude saving throw (DC %1). Unlike hold person and similar effects, a paralysis effect does not allow a new save each round. A Tail Sweeped creature flying in the air at the time that it is paralyzed cannot flap its Tail Sweeps and falls. A swimmer can't swim and may drown.",
    Arguments={
      Formula("ParalysisDC"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Paralysis",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Paralysis",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "ParalysisDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "ParalysisDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Paralysis)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "ParalysisDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Paralysis",
  Key="Paralysis ~ Su",
  Category="Special Ability",
  Description={
    Format="You can render your victims immobile. Paralyzed creatures cannot move, speak, or take any physical actions. The creature is rooted to the spot, frozen and helpless. Paralysis works on the body, and a character can usually resist it with a Fortitude saving throw (DC %1). Unlike hold person and similar effects, a paralysis effect does not allow a new save each round. A Tail Sweeped creature flying in the air at the time that it is paralyzed cannot flap its Tail Sweeps and falls. A swimmer can't swim and may drown.",
    Arguments={
      Formula("ParalysisDC"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Paralysis",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Paralysis",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "ParalysisDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "ParalysisDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Paralysis)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "ParalysisDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Poison",
  Key="Poison ~ Ex",
  Category="Special Ability",
  Description={
    Format="You can poison those you attack. The saving throw to resist a poison is usually a Fort save (DC %1). Poisons can be removed through neutralize poison and similar effects.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Poison",
  Key="Poison ~ Su",
  Category="Special Ability",
  Description={
    Format="You can poison those you attack. The saving throw to resist a poison is usually a Fort save (DC %1). Poisons can be removed through neutralize poison and similar effects.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Pounce",
  Category="Special Ability",
  Description={
    Format="When you make a charge, you can make a full attack (including rake attacks if you also have the rake ability).",
  },
  SourcePage="p.302",
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Powerful Charge",
  Category="Special Ability",
  Description={
    Format="When you make a charge, your attack deals extra damage in addition to the normal benefits and hazards of a charge.",
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3)",
      Arguments={
        "PowerfulChargeDamageDice",
        "PowerfulChargeDamageDieSize",
        "PowerfulChargeBonusDamage",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Pull",
  Category="Special Ability",
  Description={
    Format="You can choose to make a free combat maneuver check with a successful attack. If successful, this check pulls a creature closer. This ability only works on creatures of a size equal to or smaller than you. Creatures pulled in this way do not provoke attacks of opportunity and stop if the pull would move them into a solid object or creature.",
  },
  SourcePage="p.303",
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Push",
  Category="Special Ability",
  Description={
    Format="You can choose to make a free combat maneuver check with a certain successful attack (often a slam attack). If successful, this check pushes a creature directly away as with a bull rush. This ability only works on creatures of a size equal to or smaller than the pushing creature. Creatures pushed in this way do not provoke attacks of opportunity and stop if the push would move them into a solid object or creature.",
  },
  SourcePage="p.303",
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Rake",
  Category="Special Ability",
  Description={
    Format="You gain extra natural attacks under certain conditions, typically when you grapple foes. In addition to the options available to all grapplers, a monster with the rake ability gains two additional claw attacks that it can use only against a grappled foe. A monster with the rake ability must begin its turn already grappling to use its rake--it can't begin a grapple and rake in the same turn.",
  },
  SourcePage="p.303",
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Regeneration",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Certain attack forms, typically fire and acid, cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Evil",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Evil weapons and effects cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (evil weapons and effects)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Evil Magic",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Evil artifacts, effects, and spells cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (evil artifacts, effects, and spells)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Good",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Good weapons and effects cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (good weapons, good spells)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Good/Silver",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Good weapons and spells, or silver weapons cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (good weapons and spells, silver weapons)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Cold Iron",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Cold Iron causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (cold iron)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Acid/Fire",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Acid or fire causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (acid or fire)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Cold/Evil",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Cold or evil causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (cold or evil)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Acid",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Acid causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (acid)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Acid/Cold",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Acid or cold causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (acid or cold)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Acid/Cold/Fire",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Acid, cold or fire causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (Acid, Cold or Fire)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Fire or Good Spells",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Good weapons and effects cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (fire or good spells)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Epic",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Epic cause your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (epic)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration ~ Choose",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseUserInput(),
  },
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). %2, causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
      Formula("%LIST"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="NAME",
      FormatString="Regeneration (%1 / %2)",
      Arguments={
        "RegenerationRate",
        "%LIST",
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%1 (%2)",
      Arguments={
        "RegenerationRate",
        "%LIST",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Rend",
  Category="Special Ability",
  Description={
    Format="If you hit with two or more natural attacks in 1 round, you can cause tremendous damage (%1d%2+%3) by latching onto the opponent's body and tearing flesh. This attack deals an additional amount of damage, but no more than once per round.",
    Arguments={
      Formula("RendDamageDice"),
      Formula("RendDamageDieSize"),
      Formula("RendBonusDamage"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3)",
      Arguments={
        "RendDamageDice",
        "RendDamageDieSize",
        "RendBonusDamage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "RendDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Resistance to Acid",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="VIRTUAL",
      Names={
        "Resistance to Acid ~ Output",
      },
      Conditions={
        function (character, item)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Acid" then return true end
            return false
          end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Resistance to Cold",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="VIRTUAL",
      Names={
        "Resistance to Cold ~ Output",
      },
      Conditions={
        function (character, item)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Cold" then return true end
            return false
          end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Resistance to Fire",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="VIRTUAL",
      Names={
        "Resistance to Fire ~ Output",
      },
      Conditions={
        function (character, item)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Fire" then return true end
            return false
          end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Resistance to Electricity",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="VIRTUAL",
      Names={
        "Resistance to Electricity ~ Output",
      },
      Conditions={
        function (character, item)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Electricity" then return true end
            return false
          end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Resistance to Sonic",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="VIRTUAL",
      Names={
        "Resistance to Sonic ~ Output",
      },
      Conditions={
        function (character, item)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Sonic" then return true end
            return false
          end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Resistance to Acid ~ Output",
  Category="Special Ability",
  Description={
    Format="You may ignore %1 points of Acid damage each time you take acid damage.",
    Arguments={
      Formula("AcidResistanceBonus"),
    },
  },
  DisplayName="Resistance to Acid",
  SourcePage="p.303",
  Aspects={
    {
      Name="Resistance",
      FormatString="Acid",
    },
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "AcidResistanceBonus",
      },
    },
    {
      Name="ResistanceOutput",
      FormatString="Acid %1",
      Arguments={
        "AcidResistanceBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Resistance",
  },
})
DefineAbility({
  Name="Resistance to Cold ~ Output",
  Category="Special Ability",
  Description={
    Format="You may ignore %1 points of Cold damage each time you take cold damage.",
    Arguments={
      Formula("ColdResistanceBonus"),
    },
  },
  DisplayName="Resistance to Cold",
  SourcePage="p.303",
  Aspects={
    {
      Name="Resistance",
      FormatString="Cold",
    },
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "ColdResistanceBonus",
      },
    },
    {
      Name="ResistanceOutput",
      FormatString="Cold %1",
      Arguments={
        "ColdResistanceBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Resistance",
  },
})
DefineAbility({
  Name="Resistance to Fire ~ Output",
  Category="Special Ability",
  Description={
    Format="You may ignore %1 points of Fire damage each time you take fire damage.",
    Arguments={
      Formula("FireResistanceBonus"),
    },
  },
  DisplayName="Resistance to Fire",
  SourcePage="p.303",
  Aspects={
    {
      Name="Resistance",
      FormatString="Fire",
    },
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "FireResistanceBonus",
      },
    },
    {
      Name="ResistanceOutput",
      FormatString="Fire %1",
      Arguments={
        "FireResistanceBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Resistance",
  },
})
DefineAbility({
  Name="Resistance to Electricity ~ Output",
  Category="Special Ability",
  Description={
    Format="You may ignore %1 points of Electricity damage each time you take electricity damage.",
    Arguments={
      Formula("ElectricityResistanceBonus"),
    },
  },
  DisplayName="Resistance to Electricity",
  SourcePage="p.303",
  Aspects={
    {
      Name="Resistance",
      FormatString="Electricity",
    },
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "ElectricityResistanceBonus",
      },
    },
    {
      Name="ResistanceOutput",
      FormatString="Electricity %1",
      Arguments={
        "ElectricityResistanceBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Resistance",
  },
})
DefineAbility({
  Name="Resistance to Sonic ~ Output",
  Category="Special Ability",
  Description={
    Format="You may ignore %1 points of Sonic damage each time you take sonic damage.",
    Arguments={
      Formula("SonicResistanceBonus"),
    },
  },
  DisplayName="Resistance to Sonic",
  SourcePage="p.303",
  Aspects={
    {
      Name="Resistance",
      FormatString="Sonic",
    },
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "SonicResistanceBonus",
      },
    },
    {
      Name="ResistanceOutput",
      FormatString="Sonic %1",
      Arguments={
        "SonicResistanceBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Resistance",
  },
})
DefineAbility({
  Name="Rock Catching",
  Category="Special Ability",
  Description={
    Format="You can catch Small, Medium, or Large rocks (or projectiles of similar shape). Once per round, if you would normally be hit by a rock, you can make a Reflex save to catch it as a free action. The DC is 15 for a Small rock, 20 for a Medium one, and 25 for a Large one. (If the projectile provides a magical bonus on attack rolls, the DC increases by that amount.) You must be aware of the attack in order to make a rock catching attempt.",
  },
  SourcePage="p.303",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Rock Throwing",
  Category="Special Ability",
  Description={
    Format="You are an accomplished rock thrower and have a +1 racial bonus on attack rolls with thrown rocks. A creature can hurl rocks up to two categories smaller than its size. A \"rock\" is any large, bulky, and relatively regularly shaped object made of any material with a hardness of at least 5. The creature can hurl the rock up to five range increments. Damage from a thrown rock is generally twice your base slam damage plus 1-1/2 your Strength bonus.",
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 ft.)",
      Arguments={
        "RockThrowingRange",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Rock",
      },
    },
  },
  Bonuses={
    {
      Category="WEAPONPROF=Rock",
      Formula=Formula("1"),
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=Rock",
      Formula=Formula("STR/2"),
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Scent",
  Category="Special Ability",
  Description={
    Format="You can detect approaching enemies, sniff out hidden foes, and track by sense of smell. You can identify familiar odors just as humans do familiar sights. You can detect opponents within 30 feet by sense of smell. If the opponent is upwind, the range increases to 60 feet; if downwind, it drops to 15 feet. Strong scents, such as smoke or rotting garbage, can be detected at twice the ranges noted above. Overpowering scents, such as skunk musk or troglodyte stench, can be detected at triple normal range. When you detect a scent, the exact location of the source is not revealed--only its presence somewhere within range. You can take a move action to note the direction of the scent. When you are within 5 feet of the source, you pinpoint the source's location. You can follow tracks by smell, making a Wisdom (or Survival) check to find or follow a track. The typical DC for a fresh trail is 10 (no matter what kind of surface holds the scent). This DC increases or decreases depending on how strong the quarry's odor is, the number of creatures, and the age of the trail. For each hour that the trail is cold, the DC increases by 2. The ability otherwise follows the rules for the Survival skill. When tracking by scent you ignore the effects of surface conditions and poor visibility.",
  },
  SourcePage="p.304",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Sense",
  },
})
DefineAbility({
  Name="Stench",
  Category="Special Ability",
  Description={
    Format=" Creatures that successfully save cannot be affected by your stench for 24 hours. A delay poison or neutralize poison spell removes the effect from the sickened creature. Creatures with immunity to poison are unaffected, and creatures resistant to poison receive their normal bonus on their saving throws.",
  },
  SourcePage="p.304",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Stench",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2 rounds)",
      Arguments={
        "StenchDC",
        "StenchDuration",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StenchDieSize"] == 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3 rounds)",
      Arguments={
        "StenchDC",
        "StenchDice",
        "StenchDieSize",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StenchDieSize"] > 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3 minutes)",
      Arguments={
        "StenchDC",
        "StenchDice",
        "StenchDieSizeMinutes",
      },
      Conditions={
        function (character, item)
          return (character.Variables["StenchDieSizeMinutes"] > 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "StenchDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Stench)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "StenchDC",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Aura",
  },
})
DefineAbility({
  Name="Swallow Whole",
  Category="Special Ability",
  Description={
    Format="If you begin your turn with an opponent grappled in your mouth, you can attempt a new combat maneuver check. If you succeed, you swallow your prey, and the opponent takes bite damage. The opponent can be up to one size category smaller than you. Being swallowed causes a creature to take damage each round. A swallowed creature keeps the grappled condition, while you do not. A swallowed creature can try to cut its way free with any light slashing or piercing weapon (the amount of cutting damage required to get free is equal to 1/10 of your total hit points), or it can just try to escape the grapple. The Armor Class of your interior is normally 10 + 1/2 of your natural armor bonus, with no modifiers for size or Dexterity. If a swallowed creature cuts its way out, you cannot use swallow whole again until the damage is healed. If the swallowed creature escapes the grapple, success puts it back in your mouth, where it may be bitten or swallowed again.  (%1d%2+%3, AC %4, %5 hp)",
    Arguments={
      Formula("SwallowWholeDice"),
      Formula("SwallowWholeDamageDie"),
      Formula("SwallowWholeBonusDamage"),
      Formula("SwallowWholeAC"),
      Formula("SwallowWholeHP"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.304",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3, AC %4, %5 hp)",
      Arguments={
        "SwallowWholeDice",
        "SwallowWholeDamageDie",
        "SwallowWholeBonusDamage",
        "SwallowWholeAC",
        "SwallowWholeHP",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(var(\"AC.NaturalArmor\")/2)"),
      Variables={
        "SwallowWholeAC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("HP/10"),
      Variables={
        "SwallowWholeHP",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Telepathy",
  Category="Special Ability",
  Description={
    Format="You can mentally communicate with any other creature within %1 feet that has a language. It is possible to address multiple creatures at once telepathically, although maintaining a telepathic conversation with more than one creature at a time is just as difficult as simultaneously speaking and listening to multiple people at the same time.",
    Arguments={
      Formula("TelepathyRange"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.305",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 ft.",
      Arguments={
        "TelepathyRange",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("100"),
      Variables={
        "TelepathyRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
    "Communicate",
  },
})
DefineAbility({
  Name="Trample",
  Category="Special Ability",
  Description={
    Format="As a full-round action, you can attempt to overrun any creature that is at least one size category smaller than yourself. This works just like the overrun combat maneuver, but the trampling creature does not need to make a check, it merely has to move over opponents in its path. Targets of a trample take %1d%2+%3 points of damage. Targets of a trample can make an attack of opportunity, but at a -4 penalty. If targets forgo an attack of opportunity, they can attempt to avoid the trampling creature and receive a Reflex (DC %4) save to take half damage. You can only deal trampling damage to each target once per round, no matter how many times its movement takes it over a target creature.",
    Arguments={
      Formula("TrampleDamageDice"),
      Formula("TrampleDamageDieSize"),
      Formula("TrampleDamageBonus"),
      Formula("TrampleDC"),
    },
  },
  SourcePage="p.305",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Trample",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3, DC %4)",
      Arguments={
        "TrampleDamageDice",
        "TrampleDamageDieSize",
        "TrampleDamageBonus",
        "TrampleDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+STR"),
      Variables={
        "TrampleDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Trample)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "TrampleDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "TrampleDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("STR*3/2"),
      Variables={
        "TrampleDamageBonus",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Trip",
  Category="Special Ability",
  Description={
    Format="You can attempt to trip your opponent as a free action without provoking an attack of opportunity if you hit with the specified attack. If the attempt fails, you are not tripped in return.",
  },
  SourcePage="p.305",
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Vulnerability to Acid",
  Category="Special Ability",
  Description={
    Format="You take half again as much (+50%%) damage as normal from Acid, regardless of whether a saving throw is allowed, or if the save is a success or failure",
  },
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
    "VulnerabilityEnergy",
  },
})
DefineAbility({
  Name="Vulnerability to Cold",
  Category="Special Ability",
  Description={
    Format="You take half again as much (+50%%) damage as normal from Cold, regardless of whether a saving throw is allowed, or if the save is a success or failure",
  },
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
    "VulnerabilityEnergy",
  },
})
DefineAbility({
  Name="Vulnerability to Fire",
  Category="Special Ability",
  Description={
    Format="You take half again as much (+50%%) damage as normal from Fire, regardless of whether a saving throw is allowed, or if the save is a success or failure",
  },
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
    "VulnerabilityEnergy",
  },
})
DefineAbility({
  Name="Vulnerability to Electricity",
  Category="Special Ability",
  Description={
    Format="You take half again as much (+50%%) damage as normal from Electricity, regardless of whether a saving throw is allowed, or if the save is a success or failure",
  },
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
    "VulnerabilityEnergy",
  },
})
DefineAbility({
  Name="Vulnerability to Sonic",
  Category="Special Ability",
  Description={
    Format="You take half again as much (+50%%) damage as normal from Sonic, regardless of whether a saving throw is allowed, or if the save is a success or failure",
  },
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
    "VulnerabilityEnergy",
  },
})
DefineAbility({
  Name="Vulnerability to Sunlight",
  Category="Special Ability",
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
  },
})
DefineAbility({
  Name="Vulnerability to Protection from Evil",
  Category="Special Ability",
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
  },
})
DefineAbility({
  Name="Water Dependency",
  Category="Special Ability",
  Types={
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Web",
  Category="Special Ability",
  Description={
    Format="You can use webs to support yourself and up to one additional creature of the same size. In addition, you can throw a web up to eight times per day. This is similar to an attack with a net but has a maximum range of 50 feet, with a range increment of 10 feet, and is effective against targets up to one size category larger than you. An entangled creature can escape with a successful Escape Artist check (DC %1) or burst the web with a Strength check (DC %1). Attempts to burst a web by those caught in it suffer a -4 penalty. Web spinners can create sheets of sticky webbing up to three times their size. They usually position these sheets to snare flying creatures but can also try to trap prey on the ground. Approaching creatures must succeed on a DC 20 Perception check to notice a web; otherwise they stumble into it and become trapped as though by a successful web attack. Attempts to escape or burst the webbing gain a +5 bonus if the trapped creature has something to walk on or grab while pulling free. A creature can move across its own web at its climb speed and can pinpoint the location of any creature touching its web.",
    Arguments={
      Formula("WebDC"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.305",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Web",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+%1 ranged, DC %2, hp %3)",
      Arguments={
        "WebToHit",
        "WebDC",
        "WebHP",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BAB+DEX+SIZEMOD"),
      Variables={
        "WebToHit",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "WebDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TL"),
      Variables={
        "WebHP",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Web)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WebDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Whirlwind",
  Category="Special Ability",
  Description={
    Format="You can transform yourself into a whirlwind and remain in that form for up to %1 rounds. If you have a fly speed, you can continue to fly at that same speed while in whirlwind form, otherwise you gain a fly speed equal to your base land speed (average maneuverability) while in whirlwind form. The whirlwind is always 5 feet wide at its base, A whirlwind's width at its peak is always equal to half of its height. You control the exact height, but it must be at least 10 feet and at most %2 feet high. The whirlwind form does not provoke attacks of opportunity, even if you enter the space another creature occupies. Another creature might be caught in the whirlwind if it touches or enters the whirlwind, or if the whirlwind moves into or through a creature's space. In whirlwind form you cannot make your normal attacks, and you do not threaten the area around you. Creatures one or more size categories smaller than the whirlwind might take damage when caught in the whirlwind (generally damage equal your slam attack) and may be lifted into the air. An affected creature must succeed on a Reflex save (DC %3) when it comes into contact with the whirlwind or take damage as if it were hit by the your slam attack. It must also succeed on a second Reflex save or be picked up bodily and held suspended in the powerful winds, automatically taking the indicated damage each round. A creature that can fly is allowed a Reflex save each round to escape the whirlwind. The creature still takes damage but can leave if the save is successful. Creatures trapped in the whirlwind cannot move except to go where the whirlwind carries them or to escape the whirlwind. Trapped creatures can otherwise act normally, but must succeed on a Concentration check (DC 15 + spell level) to cast a spell. Creatures caught in the whirlwind take a -4 penalty to Dexterity and a -2 penalty on attack rolls. The whirlwind can have only as many creatures trapped inside at one time as will fit inside the whirlwind's volume. The whirlwind can eject any carried creatures whenever you wish as a free action, depositing them in your space. If the whirlwind's base touches the ground, it creates a swirling cloud of debris. This cloud is centered on the creature and has a diameter equal to half the whirlwind's height. The cloud obscures all vision, including darkvision, beyond 5 feet. Creatures 5 feet away have concealment, while those farther away have total concealment. Those caught in the cloud of debris must succeed on a Concentration check (DC 15 + spell level) to cast a spell.",
    Arguments={
      Formula("WhirlwindDuration"),
      Formula("WhirlwindHeight"),
      Formula("WhirlwindDC"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.306",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Whirlwind",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "WhirlwindDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("HD/2"),
      Variables={
        "WhirlwindDuration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("0"),
      Variables={
        "WhirlwindHeight",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+STR"),
      Variables={
        "WhirlwindDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Whirlwind)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WhirlwindDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "AttackOption",
  },
})
DefineAbility({
  Name="Smite Evil",
  Key="Celestial Creature ~ Smite Evil",
  Category="Special Ability",
  Description={
    Format="%1/day as a swift action (adds +%2 on attack rolls and +%3 damage bonus against evil foes; smite persists until target is dead or the celestial creature rests).",
    Arguments={
      Formula("SmiteEvilTimes"),
      Formula("SmiteEvilAttackBonus"),
      Formula("SmiteEvilDamageBonus"),
    },
  },
  SourcePage="p.294",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1/day (+%2 attack, +%3 damage)",
      Arguments={
        "SmiteEvilTimes",
        "SmiteEvilAttackBonus",
        "SmiteEvilDamageBonus",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SmiteEvilTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(CHA,0)"),
      Variables={
        "SmiteEvilAttackBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TL"),
      Variables={
        "SmiteEvilDamageBonus",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Smite Good",
  Key="Fiendish Creature ~ Smite Good",
  Category="Special Ability",
  Description={
    Format="%1/day as a swift action. Add +%2 to attack rolls and +%3 damage bonus against good foes; smite persists until target is dead or the fiendish creature rests.",
    Arguments={
      Formula("SmiteGoodTimes"),
      Formula("SmiteGoodAttackBonus"),
      Formula("SmiteGoodDamageBonus"),
    },
  },
  SourcePage="p.294",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1/day (+%2 attack, +%3 damage)",
      Arguments={
        "SmiteGoodTimes",
        "SmiteGoodAttackBonus",
        "SmiteGoodDamageBonus",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SmiteGoodTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(CHA,0)"),
      Variables={
        "SmiteGoodAttackBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TL"),
      Variables={
        "SmiteGoodDamageBonus",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Aligned",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseString({"Chaotic", "Evil", "Good", "Lawful"}),
  },
  Description={
    Format="Your natural weapons, as well as any weapons you wield, are treated as %1 for the purpose of resolving damage reduction.",
    Arguments={
      Formula("%LIST"),
    },
  },
  SourcePage="p.312",
  Stackable=false,
  Types={
    "SpecialQuality",
  },
})
DefineAbility({
  Name="All-Around Vision",
  Category="Special Ability",
  Description={
    Format="You can see in all directions at once. You cannot be flanked.",
  },
  SourcePage="p.136,153,192,201,249,284",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Sense",
  },
})
DefineAbility({
  Name="Can't Be Tripped",
  Category="Special Ability",
  Description={
    Format="A creature with this ability cannot be tripped.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "CantBeTripped",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Cannot Speak",
  Category="Special Ability",
  Description={
    Format="A creature with this ability may understand one of more languages but cannot speak.",
  },
  Types={
    "Communicate",
    "Language Modifier",
  },
})
DefineAbility({
  Name="Stampede",
  Category="Special Ability",
  Description={
    Format="A stampede occurs if three or more creatures with stampede make a trample attack while remaining adjacent to each other. While stampeding, the creatures can trample foes of their size or smaller, and the trample's save DC increases by +2.",
  },
  SourcePage="p.174",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "TrampleDC+2",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="+4 Strength",
  Key="+4 Strength ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("4"),
      Variables={
        "STR",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+2 Strength ~ Class Level" then return true end
        if ability.Name == "-2 Strength ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus4",
  },
})
DefineAbility({
  Name="+4 Dexterity",
  Key="+4 Dexterity ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("4"),
      Variables={
        "DEX",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+2 Dexterity ~ Class Level" then return true end
        if ability.Name == "-2 Dexterity ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus4",
  },
})
DefineAbility({
  Name="+4 Constitution",
  Key="+4 Constitution ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("4"),
      Variables={
        "CON",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+2 Constitution ~ Class Level" then return true end
        if ability.Name == "-2 Constitution ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus4",
  },
})
DefineAbility({
  Name="+4 Intelligence",
  Key="+4 Intelligence ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("4"),
      Variables={
        "INT",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+2 Intelligence ~ Class Level" then return true end
        if ability.Name == "-2 Intelligence ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus4",
  },
})
DefineAbility({
  Name="+4 Wisdom",
  Key="+4 Wisdom ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("4"),
      Variables={
        "WIS",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+2 Wisdom ~ Class Level" then return true end
        if ability.Name == "-2 Wisdom ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus4",
  },
})
DefineAbility({
  Name="+4 Charisma",
  Key="+4 Charisma ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("4"),
      Variables={
        "CHA",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+2 Charisma ~ Class Level" then return true end
        if ability.Name == "-2 Charisma ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus4",
  },
})
DefineAbility({
  Name="+2 Strength",
  Key="+2 Strength ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "STR",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Strength ~ Class Level" then return true end
        if ability.Name == "-2 Strength ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus2",
  },
})
DefineAbility({
  Name="+2 Dexterity",
  Key="+2 Dexterity ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "DEX",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Dexterity ~ Class Level" then return true end
        if ability.Name == "-2 Dexterity ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus2",
  },
})
DefineAbility({
  Name="+2 Constitution",
  Key="+2 Constitution ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "CON",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Constitution ~ Class Level" then return true end
        if ability.Name == "-2 Constitution ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus2",
  },
})
DefineAbility({
  Name="+2 Intelligence",
  Key="+2 Intelligence ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "INT",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Intelligence ~ Class Level" then return true end
        if ability.Name == "-2 Intelligence ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus2",
  },
})
DefineAbility({
  Name="+2 Wisdom",
  Key="+2 Wisdom ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "WIS",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Wisdom ~ Class Level" then return true end
        if ability.Name == "-2 Wisdom ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus2",
  },
})
DefineAbility({
  Name="+2 Charisma",
  Key="+2 Charisma ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "CHA",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Charisma ~ Class Level" then return true end
        if ability.Name == "-2 Charisma ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentPlus2",
  },
})
DefineAbility({
  Name="-2 Strength",
  Key="-2 Strength ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Variables={
        "STR",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Strength ~ Class Level" then return true end
        if ability.Name == "+2 Strength ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
  },
})
DefineAbility({
  Name="-2 Dexterity",
  Key="-2 Dexterity ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Variables={
        "DEX",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Dexterity ~ Class Level" then return true end
        if ability.Name == "+2 Dexterity ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
  },
})
DefineAbility({
  Name="-2 Constitution",
  Key="-2 Constitution ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Variables={
        "CON",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Constitution ~ Class Level" then return true end
        if ability.Name == "+2 Constitution ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
  },
})
DefineAbility({
  Name="-2 Intelligence",
  Key="-2 Intelligence ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Variables={
        "INT",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Intelligence ~ Class Level" then return true end
        if ability.Name == "+2 Intelligence ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
  },
})
DefineAbility({
  Name="-2 Wisdom",
  Key="-2 Wisdom ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Variables={
        "WIS",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Wisdom ~ Class Level" then return true end
        if ability.Name == "+2 Wisdom ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
  },
})
DefineAbility({
  Name="-2 Charisma",
  Key="-2 Charisma ~ Class Level",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("-2"),
      Variables={
        "CHA",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "+4 Charisma ~ Class Level" then return true end
        if ability.Name == "+2 Charisma ~ Class Level" then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
  },
})
DefineAbility({
  Name="Disable the Creature with Class Level Bonus",
  Category="Special Ability",
  Cost=0,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-2"),
      Variables={
        "Class Level +4 Ability Adjustment",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-2"),
      Variables={
        "Class Level +2 Ability Adjustment",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Variables={
        "Class Level -2 Ability Adjustment",
      },
    },
  },
  Conditions={
    function (character, item)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("ClassLevelAdjustmentMinus2", "ClassLevelAdjustmentPlus2", "ClassLevelAdjustmentPlus4") then return true end
        return false
      end))
    end,
  },
  Types={
    "ClassLevelAdjustmentMinus2",
    "ClassLevelAdjustmentPlus2",
    "ClassLevelAdjustmentPlus4",
  },
})
SetSource({
  SourceLong="Bestiary 2",
  SourceShort="B2",
  SourceWeb="http://paizo.com/store/byCompany/p/paizoPublishingLLC/pathfinder/pathfinderRPG/v5748btpy8ddb",
  SourceDate="2010-12",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aeon Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Aeon") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Agathion Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Agathion") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Angel ~ Cassisian Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Angel ~ Cassisian") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Daemon Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Daemon") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dark Folk Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Dark Folk") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Dhampir Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Dhampir") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Grippli Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Grippli") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Inevitable Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Inevitable") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Nightshade Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Nightshade") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Protean Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Protean") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Protean ~ Voidworm Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Protean ~ Voidworm") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Qlippoth Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Qlippoth") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Qlippoth ~ Cythnigot Traits",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Qlippoth ~ Cythnigot") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Templates={
    "Creature with Class Levels",
  },
})
DefineAbility({
  Name="Aeon Traits",
  Category="Special Ability",
  SourcePage="p.305",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aeon ~ Envisaging",
        "Aeon ~ Extension of All",
        "Aeon ~ Void Form",
        "Immunity to Cold",
        "Immunity to Critical Hits",
        "Immunity to Poison",
        "Resistance to Electricity",
        "Resistance to Fire",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
        "FireResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Agathion Traits",
  Category="Special Ability",
  SourcePage="p.306",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Agathion ~ Lay on Hands",
        "Agathion ~ Poison Save Bonus",
        "Agathion ~ Speak with Animals",
        "Agathion ~ Truespeech",
        "Immunity to Electricity",
        "Immunity to Petrification",
        "Resistance to Cold",
        "Resistance to Sonic",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ColdResistanceBonus",
        "SonicResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(20,TL)"),
      Variables={
        "LayOnHandsLVL",
      },
    },
  },
  Visions={
    {
      Kind={
        "Low-Light Vision",
      },
    },
  },
})
DefineAbility({
  Name="Angel ~ Cassisian Traits",
  Category="Special Ability",
  SourcePage="p.310",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Angel ~ Save vs Poison",
        "Angel ~ Truespeech",
        "Immunity to Acid",
        "Immunity to Cold",
        "Immunity to Petrification",
        "Resistance to Electricity",
        "Resistance to Fire",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
        "FireResistanceBonus",
      },
    },
  },
  Visions={
    {
      Kind={
        "Darkvision (60')",
        "Low-Light Vision",
      },
    },
  },
})
DefineAbility({
  Name="Daemon Traits",
  Category="Special Ability",
  SourcePage="p.306",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aligned (Evil)",
        "Immunity to Acid",
        "Immunity to Death Effects",
        "Immunity to Disease",
        "Immunity to Poison",
        "Resistance to Cold",
        "Resistance to Electricity",
        "Resistance to Fire",
        "Telepathy",
      },
    },
  },
  AutomaticLanguages={
    {
      Selector=function (language)
        return stringMatch(language.Name, "Abyssal") or stringMatch(language.Name, "Infernal")
      end,
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ColdResistanceBonus",
        "ElectricityResistanceBonus",
        "FireResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Dark Folk Traits",
  Category="Special Ability",
  SourcePage="p.307",
  Visible=false,
})
DefineAbility({
  Name="Dhampir Traits",
  Category="Special Ability",
  SourcePage="p.89",
  Visible=false,
})
DefineAbility({
  Name="Grippli Traits",
  Category="Special Ability",
  SourcePage="p.149",
  Visible=false,
})
DefineAbility({
  Name="Inevitable Traits",
  Category="Special Ability",
  SourcePage="p.307",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Inevitable ~ Constructed",
        "Inevitable ~ Truespeech",
        "Regeneration ~ Chaotic",
      },
    },
  },
  ClassSkills={
    "Acrobatics",
    "Diplomacy",
    "Intimidate",
    "Survival",
  },
  Visions={
    {
      Kind={
        "Low-Light Vision",
      },
    },
  },
})
DefineAbility({
  Name="Nightshade Traits",
  Category="Special Ability",
  SourcePage="p.308",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Nightshade ~ Channel Energy",
        "Nightshade ~ Darksense",
        "Nightshade ~ Desecrating Aura",
        "Nightshade ~ Light Aversion",
      },
    },
  },
  Visions={
    {
      Kind={
        "Low-Light Vision",
      },
    },
  },
})
DefineAbility({
  Name="Protean Traits",
  Category="Special Ability",
  SourcePage="p.308",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aligned (Chaos)",
        "Constrict",
        "Grab",
        "Immunity to Acid",
        "Protean ~ Amorphous Anatomy",
        "Protean ~ Change Shape",
        "Protean ~ Freedom of Movement",
        "Resistance to Electricity",
        "Resistance to Sonic",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
        "SonicResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Protean ~ Voidworm Traits",
  Category="Special Ability",
  SourcePage="p.308",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aligned (Chaos)",
        "Immunity to Acid",
        "Protean ~ Amorphous Anatomy",
        "Protean ~ Change Shape",
        "Protean ~ Freedom of Movement",
        "Resistance to Electricity",
        "Resistance to Sonic",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
        "SonicResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Qlippoth Traits",
  Category="Special Ability",
  SourcePage="p.309",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
        "Immunity to Mind-Affecting Effects",
        "Immunity to Poison",
        "Resistance to Acid",
        "Resistance to Electricity",
        "Resistance to Fire",
        "Telepathy",
      },
    },
  },
  AutomaticLanguages={
    {
      Selector=function (language)
        return stringMatch(language.Name, "Abyssal")
      end,
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ElectricityResistanceBonus",
        "FireResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Qlippoth ~ Cythnigot Traits",
  Category="Special Ability",
  SourcePage="p.309",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
        "Immunity to Mind-Affecting Effects",
        "Immunity to Poison",
        "Resistance to Acid",
        "Resistance to Electricity",
        "Resistance to Fire",
        "Telepathy ~ Touch",
      },
    },
  },
  AutomaticLanguages={
    {
      Selector=function (language)
        return stringMatch(language.Name, "Abyssal")
      end,
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ElectricityResistanceBonus",
        "FireResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Amorphous",
  Category="Special Ability",
  Description={
    Format="Your body is malleable and shapeless. You are immune to precision damage (like sneak attacks) and critical hits, and can move through an area as small as one-quarter of your space without squeezing or one eighth of your space when squeezing.",
  },
  SourcePage="p.294",
  Types={
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Compression",
  Category="Special Ability",
  Description={
    Format="The creature can move through an area as small as one-quarter its space without squeezing or one-eighth its space when squeezing.",
  },
  SourcePage="p.295",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Blood Drain",
  Category="Special Ability",
  Description={
    Format="The creature drains blood at the end of its turn if it is attached to a foe, inflicting Constitution damage.",
  },
  SourcePage="p.294",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 Constitution)",
      Arguments={
        "BloodDrainDice",
        "BloodDrainDieSize",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "BloodDrainDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Blood Rage",
  Category="Special Ability",
  Description={
    Format="When the creature takes damage in combat, on its next turn it can fly into a rage as a free action.  It gains +2 Constitution and +2 Strength, but takes a -2 penalty on AC.  The rage lasts as long as the battle or 1 minute, whichever is shorter.  It cannot end its rage voluntarily.",
  },
  SourcePage="p.294",
  TemporaryBonus={
    Bonus={
      Category="STAT",
      Formula=Formula("2"),
      Variables={
        "STR",
        "CON",
      },
    },
    Target="PC",
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Sound",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Cold %2d%3 cold, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 sonic, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Breath Weapon ~ Cone of Negative Energy",
  Category="Special Ability",
  Description={
    Format="%1' Cone of Negative Energy %2d%3 negative energy, DC %4, usable every 1d4 rounds. Breath weapons allow a Reflex save for half damage. You are immune to your own breath weapon.  Although it deals negative energy damage, this breath weapon does not heal undead creatures.",
    Arguments={
      Formula("BreathWeaponCone"),
      Formula("BreathWeaponDice"),
      Formula("BreathWeaponDamageDie"),
      Formula("BreathWeaponDC"),
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 neg. energy, DC %4)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Engulf",
  Category="Special Ability",
  Description={
    Format="The creature can engulf creatures in its path as part of a standard action.  It cannot make other attacks during a round in which it engulfs.  The creature merely has to move over its opponents, affecting as many as it can cover.  Targeted creatures can make attacks of opportunity against the creature, but if they do so, they are not entitled to a saving throw against the engulf attack.  Those who do not attempt attacks of opportunity can attempt a DC %1 Reflex save to avoid being engulfed - on a success, they are pushed back or aside (target's choice) as the creature moves forward.  Engulfed opponents gain the pinned condition, are in danger of suffocating, are trapped within the creature's body until they are no longer pinned, and may be subject to other special attacks from the creature.",
    Arguments={
      Formula("EngulfDC"),
    },
  },
  SourcePage="p.296",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Engulf",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3+%4)",
      Arguments={
        "EngulfDC",
        "ENgulfDice",
        "EngulfDieSize",
        "EngulfBonusDamage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "EngulfDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+TL/2+STR"),
      Variables={
        "EngulfDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Engulf)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "EngulfDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Entrap",
  Key="Entrap ~ Su",
  Category="Special Ability",
  Description={
    Format="The creature has an ability that restricts another creature's movement, usually with a physical attack such as ice, mud, lava, or webs.  The target of an entrap must make a DC %1 Fortitude save or become entangled for the duration.  If a target is already entangled by this ability, a second entrap attack means the target must make a Fortitude save or become helpless for the listed duration.  A target made helpless by this ability is conscious but can take no physical actions (except attempting to break free) until the entrapping material is removed.  The target can use spells with only verbal components or spell-like abilities if it can make a DC 20 concentration check.  An entangled creature can make a DC %1 Strength check as a full-round action to break free; the DC for a helpless creature is +5 greater than the saving throw DC.  Destroying the entrapping material frees the creature.",
    Arguments={
      Formula("EntrapDC"),
    },
  },
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Entrap",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "EntrapDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Entrap)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "EntrapDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Fast Swallow",
  Category="Special Ability",
  Description={
    Format="The creature can use its swallow whole ability as a free action at any time during its turn, not just at the start of its turn.",
  },
  SourcePage="p.297",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Fear",
  Key="Fear ~ Aura",
  Category="Special Ability",
  Description={
    Format="The use of this ability is a free action.  The aura functions like the fear spell.  A fear aura is an area effect.",
  },
  SourcePage="p.297",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Fear",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2)",
      Arguments={
        "FearAuraRange",
        "FearAuraDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CHA"),
      Variables={
        "FearAuraDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Fear)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "FearAuraDC",
      },
    },
  },
  Types={
    "Supernatural",
    "Aura",
  },
})
DefineAbility({
  Name="Freeze",
  Category="Special Ability",
  Description={
    Format="The creature can hold itself so still it appears to be an inanimate object of the appropriate shape (a statue, patch of fungus, and so on).  The creature can take 20 on its Stealth check to hide in plain sight as this kind of inanimate object.",
  },
  SourcePage="p.297",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Colossal",
  Category="Special Ability",
  Description={
    Format="The creature can grab others of up to size Colossal.",
  },
  SourcePage="p.297",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Grab",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(Colossal)",
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Heat",
  Category="Special Ability",
  Description={
    Format="The creature generates so much heat that its mere touch deals additional fire damage.  The creature's metallic melee weapons also conduct this heat.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 fire)",
      Arguments={
        "HeatDamageDice",
        "HeatDamageDieSize",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "HeatDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Hold Breath",
  Category="Special Ability",
  Description={
    Format="The creature can hold its breath for %1 minutes before it risks drowning.",
    Arguments={
      Formula("6*CONSCORE"),
    },
  },
  SourcePage="p.298",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Immunity to Aging",
  Category="Special Ability",
  Description={
    Format="You are never subject to aging effects.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Immunity",
      FormatString="Aging",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Attacks Relying on Sight",
  Category="Special Ability",
  Description={
    Format="You are never subject to attacks relying on sight.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Attacks Relying on Sight",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Confusion Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to confusion effects.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Immunity",
      FormatString="Confusion Effects",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Confusion and Insanity Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to confusion or insanity effects.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Immunity",
      FormatString="Confusion and Insanity Effects",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Curses",
  Category="Special Ability",
  Description={
    Format="You are never subject to curses.",
  },
  SourcePage="p.",
  Aspects={
    {
      Name="Immunity",
      FormatString="Curses",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Enchantment Spells",
  Category="Special Ability",
  Description={
    Format="You are never subject to enchantment spells.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Enchantment Spells",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Gaze Attacks",
  Category="Special Ability",
  Description={
    Format="You are never subject to gaze attacks.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Gaze Attacks",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Hostile Transformation Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to hostile transformation effects.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Hostile Transformation Effects",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Illusion Spells",
  Category="Special Ability",
  Description={
    Format="You are never subject to illusion spells.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Illusion Spells",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Illusions",
  Category="Special Ability",
  Description={
    Format="You are never subject to illusions.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Illusions",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Level Drain",
  Category="Special Ability",
  Description={
    Format="You are never subject to level draining effects.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Immunity",
      FormatString="Level Drain",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Polymorph Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to polymorph effects.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Immunity",
      FormatString="Polymorph Effects",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Visual Effects",
  Category="Special Ability",
  Description={
    Format="You are never subject to visual effects.",
  },
  SourcePage="p.209",
  Aspects={
    {
      Name="Immunity",
      FormatString="Visual Effects",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Waters of the River Styx",
  Category="Special Ability",
  Description={
    Format="You are never subject to waters of the river Styx.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Immunity",
      FormatString="Waters of the River Styx",
    },
  },
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Jet",
  Category="Special Ability",
  Description={
    Format="The creature can swim backward as a full-round action at the listed speed.  It must move in a straight line while jetting, and does not provoke attacks of opportunity when it does so.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 ft.)",
      Arguments={
        "JetSpeed",
      },
    },
  },
  Types={
    "ModifyMovement",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Keen Scent",
  Category="Special Ability",
  Description={
    Format="The creature can notice other creatures by scent in a 180-foot radius underwater and can detect blood in the water at ranges of up to a mile.",
  },
  SourcePage="p.298",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="180 ft.",
    },
  },
  Types={
    "Sense",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Lifesense",
  Category="Special Ability",
  Description={
    Format="The creature notices and locates living creatures within 60 feet, just as if it possessed the blindsight ability.",
  },
  SourcePage="p.298",
  Types={
    "Sense",
    "Supernatural",
  },
})
DefineAbility({
  Name="Natural Invisibility",
  Key="Natural Invisibility ~ Ex",
  Category="Special Ability",
  Description={
    Format="This ability is constant - the creature remains invisible at all times, even when attacking.  As this ability is inherent, it is not subject to the invisibility purge spell.",
  },
  SourcePage="p.298",
  Types={
    "Defensive",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Natural Invisibility",
  Key="Natural Invisibility ~ Su",
  Category="Special Ability",
  Description={
    Format="This ability is constant - the creature remains invisible at all times, even when attacking.  As this ability is inherent, it is not subject to the invisibility purge spell.",
  },
  SourcePage="p.298",
  Types={
    "Defensive",
    "Supernatural",
  },
})
DefineAbility({
  Name="Negative Energy Affinity",
  Category="Special Ability",
  Description={
    Format="The creature is alive, but reacts to positive and negative energy as if it were undead - positive energy harms it, negative energy heals it.",
  },
  SourcePage="p.299",
  Types={
    "Defensive",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Never Surprised or Flat-Footed",
  Category="Special Ability",
  Description={
    Format="This creature is never surprised or flat-footed.",
  },
  SourcePage="p.222",
  Types={
    "Defensive",
    "Supernatural",
  },
})
DefineAbility({
  Name="No Breath",
  Category="Special Ability",
  Description={
    Format="A creature with this ability does not breathe, and is immune to effects that require breathing (such as inhaled poison). This does not give immunity to cloud or gas attacks that do not require breathing.",
  },
  SourcePage="p.299",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="No Combat Maneuvers",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "NoCombatManeuvers",
      },
    },
  },
})
DefineAbility({
  Name="Ooze Traits",
  Key="Ooze Traits ~ Not Blind",
  Category="Special Ability",
  SourcePage="p.309",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Ooze Traits Output",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Critical Hits",
        "Immunity to Flanking",
        "Immunity to Paralysis",
        "Immunity to Poison",
        "Immunity to Polymorph",
        "Immunity to Sleep",
        "Immunity to Sneak Attacks",
        "Immunity to Stunning",
      },
    },
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Acid/Cold",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Acid or cold damage causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (acid or cold)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Acid/Sonic",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Acid or sonic damage causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (acid or sonic)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Bludgeoning/Fire",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Bludgeoning or fire damage causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (bludgeoning or fire)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Chaotic",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Chaotic-aligned damage causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (chaotic)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Chaotic/Magic",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Chaotic-aligned or magic damage causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (chaotic or magic)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Regeneration ~ Fire",
  Category="Special Ability",
  Description={
    Format="You are difficult to kill. You heal damage at %1 points per round, as with fast healing, but you cannot die as long as your regeneration is still functioning (although you still fall unconscious when their hit points are below 0). Fire causes your regeneration to stop functioning on the round following the attack. During this round, you cannot heal any damage and can die normally. Attack forms that don't deal hit point damage are not healed by regeneration. Regeneration also does not restore hit points lost from starvation, thirst, or suffocation. You can regrow lost portions of you body and can reattach severed limbs or body parts if they are brought together within 1 hour of severing. Severed parts that are not reattached wither and die normally.",
    Arguments={
      Formula("RegenerationRate"),
    },
  },
  SourcePage="p.303",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 (fire)",
      Arguments={
        "RegenerationRate",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="See in Darkness",
  Category="Special Ability",
  Description={
    Format="The creature can see perfectly in darkness of any kind, including that created by deeper darkness.",
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Vision",
      FormatString="See in Darkness",
    },
  },
  Types={
    "Sense",
    "Supernatural",
  },
  Visions={
    {
      Kind={
        "See in Darkness",
      },
    },
  },
})
DefineAbility({
  Name="Sound Mimicry",
  Category="Special Ability",
  Description={
    Format="The creature perfectly imitates certain sounds or even specific voices.  The creature makes a Bluff check opposed by the listener's Sense Motive check to recognize the mimicry, although if the listener isn't familiar with the person or type of creatures mimicked, it takes a -8 penalty on its Sense Motive check.  The creature has a +8 racial bonus on its Bluff check to mimic sounds (including accents and speech patterns, if a voice mimic) it has listened to for at least 10 minutes.  The creature cannot duplicate the effects of magical abilities (such as bardic performance or a harpy's captivating song), though it may be able to mimic the sound of those abilities.  This ability does not allow the creature to speak or understand languages it doesn't know.",
  },
  SourcePage="p.301",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Split",
  Category="Special Ability",
  Description={
    Format="The creature splits into two identical copies of itself if subject to certain attacks or effects.  Each copy has half the original's current hit points (rounded down).  A creature reduced below the listed hit points cannot be further split and can be killed normally.",
  },
  SourcePage="p.302",
  Types={
    "Defensive",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Strangle",
  Category="Special Ability",
  Description={
    Format="An opponent grappled by the creature cannot speak or cast spells with verbal components.",
  },
  SourcePage="p.302",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Sunlight Powerlessness",
  Category="Special Ability",
  Description={
    Format="If the creature is in sunlight (but not in an area of daylight or similar spells), it cannot attack and is staggered.",
  },
  SourcePage="p.302",
  Types={
    "Weakness",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Telepathy",
  Key="Telepathy ~ Miles",
  Category="Special Ability",
  Description={
    Format="You can mentally communicate with any other creature within %1 miles that has a language. It is possible to address multiple creatures at once telepathically, although maintaining a telepathic conversation with more than one creature at a time is just as difficult as simultaneously speaking and listening to multiple people at the same time.",
    Arguments={
      Formula("TelepathyMilesRange"),
    },
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
      function (character, item)
        return (character.Variables["TelepathyMilesRange"] > 1)
      end,
    },
  },
  SourcePage="p.305",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 mile",
      Arguments={
        "TelepathyMilesRange",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TelepathyMilesRange"] == 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%1 miles",
      Arguments={
        "TelepathyMilesRange",
      },
      Conditions={
        function (character, item)
          return (character.Variables["TelepathyMilesRange"] > 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "TelepathyMilesRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("100"),
      Variables={
        "TelepathyRange",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
    "Communicate",
  },
})
DefineAbility({
  Name="Telepathy",
  Key="Telepathy ~ Touch",
  Category="Special Ability",
  Description={
    Format="You can mentally communicate with any other creature you are touching that has a language. It is possible to address multiple creatures at once telepathically, although maintaining a telepathic conversation with more than one creature at a time is just as difficult as simultaneously speaking and listening to multiple people at the same time.",
  },
  SourcePage="p.305",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(touch)",
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
    "Communicate",
  },
})
DefineAbility({
  Name="Undersized Weapons",
  Category="Special Ability",
  Description={
    Format="The creature uses manufactured weapons as if it were one size category smaller than the creature's actual size.",
  },
  SourcePage="p.303",
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Simple",
      Formula=Formula("2"),
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=TYPE.Martial",
      Formula=Formula("2"),
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WEAPONPROF=TYPE.Exotic",
      Formula=Formula("2"),
      Variables={
        "TOHIT",
      },
    },
    {
      Category="WIELDCATEGORY",
      Formula=Formula("1"),
      Variables={
        "ALL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Water Breathing",
  Category="Special Ability",
  SourcePage="p.94",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Smite Chaos",
  Key="Resolute Creature ~ Smite Chaos",
  Category="Special Ability",
  Description={
    Format="%1/day as a swift action. Add +%2 to attack rolls and +%3 damage bonus against chaotic foes; smite persists until target is dead or the resolute creature rests.",
    Arguments={
      Formula("SmiteChaosTimes"),
      Formula("SmiteChaosAttackBonus"),
      Formula("SmiteChaosDamageBonus"),
    },
  },
  SourcePage="p.292",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SmiteChaosTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(CHA,0)"),
      Variables={
        "SmiteChaosAttackBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TL"),
      Variables={
        "SmiteChaosDamageBonus",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Smite Law",
  Key="Entropic Creature ~ Smite Law",
  Category="Special Ability",
  Description={
    Format="%1/day as a swift action. Add +%2 to attack rolls and +%3 damage bonus against lawful foes; smite persists until target is dead or the entropic creature rests.",
    Arguments={
      Formula("SmiteLawTimes"),
      Formula("SmiteLawAttackBonus"),
      Formula("SmiteLawDamageBonus"),
    },
  },
  SourcePage="p.292",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SmiteLawTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(CHA,0)"),
      Variables={
        "SmiteLawAttackBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TL"),
      Variables={
        "SmiteLawDamageBonus",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Desecrating Aura",
  Key="Nightshade ~ Desecrating Aura",
  Category="Special Ability",
  Description={
    Format="All nightshades have a 30-foot-radius emanation equivalent to a desecrate spell centered on a shrine of evil power.  Undead within this radius (including the nightshade) gain a +2 profane bonus on attack and damage rolls and saving throws, as well as +2 hit points per die, and the save DC of channeled negative energy is increased by +6 (these adjustments are included for the nightshades in their entries).  This aura can be negated by dispel evil, but a nightshade can reactivate it on its turnas a free action.  A desecrating aura suppresses and is suppressed by consecrate or hallow; both effects are negated wtihin any overlapping area of effect.",
  },
  SourcePage="p.3208",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(30 ft.)",
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("2"),
      Type={
        Name="Profane",
      },
      Variables={
        "TOHIT",
      },
    },
    {
      Category="COMBAT",
      Formula=Formula("2"),
      Type={
        Name="Profane",
      },
      Variables={
        "DAMAGE.Melee",
        "DAMAGE.Ranged",
      },
    },
    {
      Category="HP",
      Formula=Formula("2*TL"),
      Variables={
        "CURRENTMAX",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("2"),
      Type={
        Name="Profane",
      },
      Variables={
        "ALL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "ClericChannelNegativeEnergyDC",
      },
    },
  },
  Types={
    "Aura",
    "Supernatural",
  },
})
DefineAbility({
  Name="Channel Energy",
  Key="Nightshade ~ Channel Energy",
  Category="Special Ability",
  Description={
    Format="A nightshade can chanel negative energy as a cleric of a level equal to its base CR.  It can use this ability a number of times equal to 3 + its Charisma modifier.",
  },
  SourcePage="p.308",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Channel Negative Energy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CR"),
      Variables={
        "ClericChannelNegativeEnergyLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3+CHA"),
      Variables={
        "ClericChannelEnergyTimes",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Darksense",
  Key="Nightshade ~ Darksense",
  Category="Special Ability",
  Description={
    Format="Nightshades gain true seeing in dim light and darkness.  Regardless of light conditions, they can detect living creatures and their health within 60 feet, as blindsense with deathwatch continuously active.  Mind blank and nondetection prevent the latter effect but not the nightshade's true seeing.",
  },
  SourcePage="p.308",
  Types={
    "Sense",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Light Aversion",
  Key="Nightshade ~ Light Aversion",
  Category="Special Ability",
  Description={
    Format="A nightshade in bright light becomes sickened - the penalties form this condition are doubled when the nightshade is in natural sunlight.",
  },
  SourcePage="p.308",
  Types={
    "Weakness",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Envisaging",
  Key="Aeon ~ Envisaging",
  Category="Special Ability",
  Description={
    Format="Aeons communicate wordlessly, almost incomprehensibly. Caring little for the wants and desires of other creatures, they have no need to engage in exchanges of dialogue. Instead, aeons mentally scan beings for their thoughts and intentions, and then retaliate with flashes of psychic projections that emit a single concept in response to whatever the other being was thinking. The flash is usually a combination of a visual and aural stimulation, which displays how the aeon perceives future events might work out. For instance, an aeon seeking to raze a city communicates this concept to non-aeons by sending them a vivid image of the city crumbling to ash. An aeon's envisaging functions as a non-verbal form of telepathy. Aeons cannot read the thoughts of any creature immune to mind-affecting effects.",
  },
  SourcePage="p.305",
  Types={
    "SpecialQuality",
    "Supernatural",
    "Communicate",
  },
})
DefineAbility({
  Name="Extension of All",
  Key="Aeon ~ Extension of All",
  Category="Special Ability",
  Description={
    Format="Through an aeon's connection to the multiverse, it gains access to strange and abstruse knowledge that filters through all existence. Much of the knowledge is timeless, comprised of events long past, present, and potentially even those yet to come. Aeons gain a racial bonus equal to %1 on all Knowledge skill checks. This same connection also binds them to other aeons. As a result, they can communicate with each other freely, over great distances as if using telepathy. This ability also works across planes, albeit less effectively, allowing the communication of vague impressions or feelings, not specific details or sights. Due to the vast scope of the aeon race's multiplanar concerns,though, even the most dire reports of a single aeon rarely inspire dramatic or immediate action.",
  },
  SourcePage="p.306",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("HD/2"),
      Type={
        Name="Racial",
      },
      Variables={
        "TYPE=Knowledge",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Void Form",
  Key="Aeon ~ Void Form",
  Category="Special Ability",
  Description={
    Format="Though aeons aren't incorporeal, their forms are only a semi-tangible manifestation of something greater. An aeon's void form grants it a +%1 deflection bonus.",
    Arguments={
      Formula("VoidFormACBonus"),
    },
  },
  SourcePage="p.306",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("VoidFormACBonus"),
      Type={
        Name="Deflection",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("HD/4"),
      Variables={
        "VoidFormACBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Special Ability|Paladin ~ Lay on Hands.COPY=Agathion ~ Lay on Hands",
})
ModifyAbility({
  Name="Agathion ~ Lay on Hands",
  Category="Special Ability",
  DisplayName="Lay on Hands",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d6, %2/day, as a %3-level paladin)",
      Arguments={
        "LayOnHandsDice",
        "LayOnHandsTimes",
        "LayOnHandsLVL",
      },
    },
  },
})
DefineAbility({
  Name="Poison Save Bonus",
  Key="Agathion ~ Poison Save Bonus",
  Category="Special Ability",
  Description={
    Format="Agathions gain a +4 racial bonus on saving throws against poison.",
  },
  SourcePage="p.306",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+4 vs. poison",
    },
  },
  Types={
    "SaveBonus",
  },
})
DefineAbility({
  Name="Speak with Animals",
  Key="Agathion ~ Speak with Animals",
  Category="Special Ability",
  Description={
    Format="This ability works like speak with animals (caster level %1) but is a free action and does not require sound.",
    Arguments={
      Formula("TL"),
    },
  },
  SourcePage="p.306",
  Types={
    "Communicate",
    "Supernatural",
  },
})
DefineAbility({
  Name="Truespeech",
  Key="Agathion ~ Truespeech",
  Category="Special Ability",
  Description={
    Format="All agathions can speak with any creature that has a language, as if using a tongues spell (caster level %1).  This ability is always active.",
    Arguments={
      Formula("TL"),
    },
  },
  SourcePage="p.306",
  Types={
    "Communicate",
    "Supernatural",
  },
})
DefineAbility({
  Name="Constructed",
  Key="Inevitable ~ Constructed",
  Category="Special Ability",
  Description={
    Format="Although inevitables are living outsiders, their bodies are constructed of physical components, and in many ways they function as constructs. For the purposes of effects targeting creatures by type (such as a ranger's favored enemy and bane weapons), inevitables count as both outsiders and constructs. They are immune to death effects, disease, mind-affecting effects, necromancy effects, paralysis, poison, sleep, stun, and any effect that requires a Fortitude save (unless the effect also works on objects, or is harmless). Inevitables are not subject to nonlethal damage, ability damage, ability drain, fatigue, exhaustion, or energy drain. They are not at risk of death from massive damage. They have bonus hit points as constructs of their size.",
  },
  SourcePage="p.308",
  Bonuses={
    {
      Category="HP",
      Formula=Formula("10"),
      Conditions={
        function (character, item)
          return character.Size == "S"
        end,
      },
      Variables={
        "CURRENTMAX",
      },
    },
    {
      Category="HP",
      Formula=Formula("20"),
      Conditions={
        function (character, item)
          return character.Size == "M"
        end,
      },
      Variables={
        "CURRENTMAX",
      },
    },
    {
      Category="HP",
      Formula=Formula("30"),
      Conditions={
        function (character, item)
          return character.Size == "L"
        end,
      },
      Variables={
        "CURRENTMAX",
      },
    },
    {
      Category="HP",
      Formula=Formula("40"),
      Conditions={
        function (character, item)
          return character.Size == "H"
        end,
      },
      Variables={
        "CURRENTMAX",
      },
    },
    {
      Category="HP",
      Formula=Formula("60"),
      Conditions={
        function (character, item)
          return character.Size == "G"
        end,
      },
      Variables={
        "CURRENTMAX",
      },
    },
    {
      Category="HP",
      Formula=Formula("80"),
      Conditions={
        function (character, item)
          return character.Size == "C"
        end,
      },
      Variables={
        "CURRENTMAX",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Defensive",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Truespeech",
  Key="Inevitable ~ Truespeech",
  Category="Special Ability",
  Description={
    Format="An inevitable can speak with any creature that has a language, as if using a tongues spell (caster level 14th). This ability is always active.",
  },
  SourcePage="p.308",
  Types={
    "SpecialQuality",
    "Communicate",
    "Supernatural",
  },
})
DefineAbility({
  Name="Freedom of Movement",
  Key="Protean ~ Freedom of Movement",
  Category="Special Ability",
  Description={
    Format="A protean has continuous freedom of movement, as per the spell.",
  },
  SourcePage="p.308",
  Types={
    "Defensive",
    "Supernatural",
  },
})
DefineAbility({
  Name="Amorphous",
  Key="Protean ~ Amorphous Anatomy",
  Category="Special Ability",
  Description={
    Format="A protean's vital organs shift and change shape and position constantly.  This grants it a 50%% chance to ignore additional damage caused by critical hits and sneak attacks, and grants it immunity to polymorph effects (unless the protean is a willing target).  A protean automatically recovers from physical blindness or deafness after 1 round by growing new sensory organs to replace those that were compromised.",
  },
  SourcePage="p.308",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Polymorph Effects",
      },
    },
  },
  Types={
    "Defensive",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Change Shape",
  Key="Protean ~ Change Shape",
  Category="Special Ability",
  Description={
    Format="A protean's form is not fixed.  Once per day as a standard action, a protean may change shape into any Small, Medium, or Large animal, elemental, giant, humanoid, magical beast, monstrous humanoid, ooze, plant, or vermin.  A protean can resume its true form as a free action, and when it does so, it gainst the effects of a heal spell (CL %1).",
    Arguments={
      Formula("TL"),
    },
  },
  SourcePage="p.308",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Special Ability|Rake.COPY=Allosaurus ~ Rake",
  DisplayName="Rake",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(2 talons +%1, 1d8+%2)",
      Arguments={
        "RakeAttack",
        "RakeBonusDamage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BAB+STR-2"),
      Variables={
        "RakeAttack",
      },
    },
    {
      Category="VAR",
      Formula=Formula("STR"),
      Variables={
        "RakeBonusDamage",
      },
    },
  },
})
DefineAbility({
  Name="Capsize",
  Key="Hippopotamus ~ Capsize",
  Category="Special Ability",
  Description={
    Format="A hippopotamus can overturn a boat of its size or smaller by ramming it as a charge attack and making a CMB check.  The DC of this check is 25 or the result of the boat captain's Profession (sailor) check, whichever is higher.",
  },
  SourcePage="p.157",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Sweat",
  Key="Hippopotamus ~ Sweat",
  Category="Special Ability",
  Description={
    Format="A hippo's reddish sweat protects it from nonlethal damage from hit environments, and grants it a +2 racial bonus on saving throws against nonmagical disease.",
  },
  SourcePage="p.157",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="(+2 vs. nonmagical disease)",
    },
  },
  Types={
    "Defensive",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Hippopotamus Companion Natural Attack",
  Category="Special Ability",
  Visible=false,
  NaturalAttacks={
    {
      Name="Bite",
      Types={
        "Weapon",
        "Natural",
        "Weapon Group Natural",
        "Melee",
        "Finesseable",
        "Bludgeoning",
        "Piercing",
        "Slashing",
      },
      Count="*1",
      Damage=DiceFormula("1d8"),
    },
  },
})
DefineAbility({
  Name="Arsinoitherium Companion Natural Attack",
  Category="Special Ability",
  Visible=false,
  NaturalAttacks={
    {
      Name="Gore",
      Types={
        "Weapon",
        "Natural",
        "Weapon Group Natural",
        "Melee",
        "Finesseable",
        "Bludgeoning",
      },
      Count="*1",
      Damage=DiceFormula("1d8"),
    },
  },
})
DefineAbility({
  Name="Gylptodon Companion Natural Attack",
  Category="Special Ability",
  Visible=false,
  NaturalAttacks={
    {
      Name="Claw",
      Types={
        "Weapon",
        "Natural",
        "Weapon Group Natural",
        "Melee",
        "Finesseable",
        "Slashing",
      },
      Count="*2",
      Damage=DiceFormula("1d8"),
    },
  },
})
DefineAbility({
  Name="Poison",
  Key="Stingray ~ Poison",
  Category="Special Ability",
  Description={
    Format="Sting - injury; save Fort DC %1; frequency 1/round for 4 rounds; effect 1d2 Dex and 1 Con; cure 1 save.",
    Arguments={
      Formula("StingrayPoisonDC"),
    },
  },
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "StingrayPoisonDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "StingrayPoisonDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Disease",
  Key="Cacodaemon ~ Disease",
  Category="Special Ability",
  Description={
    Format="Cacodaemonia- Bite - injury; save Fort DC %1; onset 1 day; frequency 1/day; effect 1d2 Wis damage, cure 2 consecutive saves.  In addition to the normal effects of the disease, as long as a victim is infected, the cacodaemon can telepathically communicate with the creature over any distance (as long as they remain on the same plane).",
    Arguments={
      Formula("CacodaemonDiseaseDC"),
    },
  },
  SourcePage="p.64",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Disease",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Disease",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(bite)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "CacodaemonDiseaseDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Disease)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CacodaemonDiseaseDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Soul Lock",
  Key="Cacodaemon ~ Soul Lock",
  Category="Special Ability",
  Description={
    Format="Once per day as a full-round action, a cacodaemon can ingest the spirit of any sentient creature that has died within the last minute.  This causes a soul gem to grow inside of the cacodaemon's gut, which it can regurgitate as a standard action.  A soul gem is a fine-sized object with 1 hit point and hardness 2.  Destroying a soul gem frees the soul within, though it does not return the deceased creature to life.  Any attempt to resurrect a body whose soul is trapped in a soul gem requires a DC %1 caster check.  Failure results in the spell having no effect, while success shatters the victim's soul gem and returns the creature to life as normal.  If the soul gem rests in an unholy location, such as that created by the spell unhallow, the DC of this caster level check increases by +2.  Any evil outsider can, as a standard action, ingest a soul gem.  Doing so frees the soul within, but condemns it to one of the lower planes (though the soul can be returned to life as normal).  The outsider gains fast healing 2 for a number of rounds equal to its Hit Dice.",
    Arguments={
      Formula("CacodaemonSoulLockCasterLevelCheck"),
    },
  },
  SourcePage="p.64",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CHA"),
      Variables={
        "CacodaemonSoulLockCasterLevelCheck",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Special Ability|Change Shape.COPY=Cacodaemon ~ Change Shape",
  DisplayName="Change Shape",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(2 of the following forms&colon; lizard, octopus, Small scorpioon, venemous snake, polymorph)",
    },
  },
})
DefineAbility({
  Name="Poison",
  Key="Compsognathus ~ Poison",
  Category="Special Ability",
  Description={
    Format="Bite - injury; save Fort DC %1; frequency 1/round for 4 rounds; effect 1d2 Str; cure 1 save.",
    Arguments={
      Formula("CompsognathusPoisonDC"),
    },
  },
  SourcePage="p.90",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "CompsognathusPoisonDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CompsognathusPoisonDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Confusion",
  Key="Voidworm ~ Confusion",
  Category="Special Ability",
  Description={
    Format="A creature struck by a voidworm's tail slap must make a DC %1 Will save or be confused for 1 round.  This is a mind-affecting effect.",
    Arguments={
      Formula("VoidwormConfusionDC"),
    },
  },
  SourcePage="p.217",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Confusion",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(tail slap)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CHA"),
      Variables={
        "VoidwormConfusionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Confusion)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "VoidwormConfusionDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Change Shape",
  Key="Voidworm ~ Change Shape",
  Category="Special Ability",
  Description={
    Format="You have the ability to assume the appearance of a specific type of creature, but retain most of your own physical qualities. You cannot change shape to a form more than one size category smaller or larger than your original form. This ability functions as a polymorph spell, but you do not adjust your ability scores (although you gain any other abilities of the creature you mimic).",
  },
  SourcePage="p.217",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(2 forms, both of which must be Tiny animals; beast shape II)",
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Horrific Appearance",
  Key="Cythnigot ~ Horrific Appearance",
  Category="Special Ability",
  Description={
    Format="Creatures that succumb to a Cythnigot's horrific appearance become sickened for 1 round - a Cythnigot's horrific appearance only functions to a range of 10 feet.  Once a creature makes a saving throw against a particular Cythnigot's horrific appearance, that creature is immune to the horrific appearance of all Cythnigots for 24 hours.  A spellcaster that has a Cythnigot as a familiar is immune to the horrific appearance of all Cythnigots, and also gains a +4 bonus on saving throws made against any qlippoth's horrific appearance.",
  },
  SourcePage="p.221",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Horrific Appearance",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Horrific Appearance",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(10 feet, DC %1)",
      Arguments={
        "CythnigotHorrificAppearanceDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CHA"),
      Variables={
        "CythnigotHorrificAppearanceDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Horrific Appearance)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CythnigotHorrificAppearanceDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Spores",
  Key="Cythnigot ~ Spores",
  Category="Special Ability",
  Description={
    Format="Any creature bitten by a Cythnigot must make a DC %1 Fortitude save or become infested by the creature's otherworldly spores.  These spores cause twitching spikes and hideous pallid growths of hair-like fibers to erupt from the bite wound and to writhe and wrap around the target's limbs.  A creatures suffering from these spores is entangled, and can attempt a new DC %1 Fortitude save in later rounds as a standard action to rip the tendrils free and escape the entangled condition.  The effects of multiple Cythnigot bites on a creature do not stack.  Plant creatures take a -4 penalty on saves against this effect.  This is a disease effect.",
    Arguments={
      Formula("CythnigotSporesDC"),
    },
  },
  SourcePage="p.220",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Spores",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(bite)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "CythnigotSporesDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Spores)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CythnigotSporesDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Bite",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(bite)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Bite/Claw",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(bite,claw)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Bite/Tentacle",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(bite,tentacle)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Claw",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(claw)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Claw/Tentacle",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(claw,tentacle)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Slam",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(slam)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Tail Slap",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(tail slap)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Talon",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(talon)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Tentacle",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(tentacle)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Tentacles",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(tentacles)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Tongue",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(tongue)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Grab",
  Key="Grab ~ Vine",
  Category="Special Ability",
  Description={
    Format="If you hit with the indicated attack (usually a claw or bite attack), you deal normal damage and can attempt to start a grapple as a free action without provoking an attack of opportunity. You have the option to conduct the grapple normally, or simply use the part of your body you used in the grab to hold the opponent. If you choose to do the latter, you takes a -20 penalty on your CMB check to make and maintain the grapple, but do not gain the grappled condition itself. A successful hold does not deal any extra damage unless you also have the constrict special attack. If you do not constrict, each successful grapple check you make during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, you deal constriction damage as well. You receive a +4 bonus on combat maneuver checks made to start and maintain a grapple. Unless otherwise noted, grab can only be used on creatures of a size equal to or smaller than you.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(vine)",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Trip",
  Key="Trip ~ Claw",
  Category="Special Ability",
  Description={
    Format="You can attempt to trip your opponent as a free action without provoking an attack of opportunity if you hit with the specified attack. If the attempt fails, you are not tripped in return.",
  },
  SourcePage="p.305",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(claw)",
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Trip",
  Key="Trip ~ Tail Slap",
  Category="Special Ability",
  Description={
    Format="You can attempt to trip your opponent as a free action without provoking an attack of opportunity if you hit with the specified attack. If the attempt fails, you are not tripped in return.",
  },
  SourcePage="p.305",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(tail slap)",
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Ice Glide",
  Key="Ice Elemental ~ Ice Glide",
  Category="Special Ability",
  Description={
    Format="A burrowing ice elemental can pass through nonmagical ice and snow as easily as a fish swims through water.  Its burrowing leaves behind no tunnel or hole, nor does it create any ripple or other sign of its presence.  A control water spell cast on an area containing a burrowing ice elemental flings the elemental back 30 feet, stunning the creature for 1 round unless it succeeds on a DC 15 Fortitude save.",
  },
  SourcePage="p.114",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Icewalking",
  Key="Ice Elemental ~ Icewalking",
  Category="Special Ability",
  Description={
    Format="This ability works like the spider climb spell, but the surfaces the elemental climbs must be icy.  The elemental can move across icy surfaces without penalty and does not need to make Acrobatics checks to run or charge on ice.",
  },
  SourcePage="p.114",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Numbing Cold",
  Key="Ice Elemental ~ Numbing Cold",
  Category="Special Ability",
  Description={
    Format="When an ice elemental deals cold damage to a creature, that creature must succeed on a Fortitude save or be staggered for 1 round.",
  },
  SourcePage="p.114",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Numbing Cold",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "IceElementalNumbingColdDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "IceElementalNumbingColdDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Numbing Cold)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "IceElementalNumbingColdDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Snow Vision",
  Key="Ice Elemental ~ Snow Vision",
  Category="Special Ability",
  Description={
    Format="An ice elemental can see perfectly well in snowy conditions and does not take any penalties on Perception checks while in snow.",
  },
  Types={
    "Sense",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Cold",
  Key="Ice Elemental ~ Cold",
  Category="Special Ability",
  Description={
    Format="An ice elemental's slam does an additional %1d%2 cold damage.",
    Arguments={
      Formula("ColdDamageDice"),
      Formula("ColdDamageDieSize"),
    },
  },
  SourcePage="p.114",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(slam,%1d%2)",
      Arguments={
        "ColdDamageDice",
        "ColdDamageDieSize",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "ColdDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Burrow",
  Key="Ice Elemental ~ Burrow",
  Category="Special Ability",
  Description={
    Format="An ice elemental can burrow through ice and snow.",
  },
  SourcePage="p.114",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(ice and snow only) 20 ft.",
    },
  },
  Types={
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Spark Leap",
  Key="Lightning Elemental ~ Spark Leap",
  Category="Special Ability",
  Description={
    Format="A lightning elemental gains a +10 bonus on bull rush, disarm, overrun, and trip attacks when it charges a creature against whom its metal mastery ability applies.",
  },
  SourcePage="p.116",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Metal Mastery",
  Key="Lightning Elemental ~ Metal Mastery",
  Category="Special Ability",
  Description={
    Format="A lightning elemental gains a +3 bonus on attack rolls if its opponent is wearing metal armor, is wielding a metal weapon, or is made of metal (such as an iron golem).",
  },
  SourcePage="p.116",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Electricity",
  Key="Lightning Elemental ~ Electricity",
  Category="Special Ability",
  Description={
    Format="A lightning elemental's slam does an additional %1d%2 electricity damage.",
    Arguments={
      Formula("ElectricityDamageDice"),
      Formula("ElectricityDamageDieSize"),
    },
  },
  SourcePage="p.116",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(Slam,%1d%2)",
      Arguments={
        "ElectricityDamageDice",
        "ElectricityDamageDieSize",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "ElectricityDamageDice",
      },
    },
  },
  Types={
    "SpecialAttack",
  },
})
DefineAbility({
  Name="Earth Glide",
  Key="Magma Elemental ~ Earth Glide",
  Category="Special Ability",
  Description={
    Format="A burrowing magma elemental can pass through stone, dirt, lava, or almost any other sort of earth except metal as easily as a fish swims through water.  Its burrowing leaves behind no tunnel or hole, nor does it create any ripple, though the area it passes through feels warm for 1 round afterward and often retains a strangely smooth texture, as if the stone had been polished.  A move earth spell cast on an area containing a burrowing magma elemental flings the elemental back 30 feet, stunning the creature for 1 round unless it succeeds on a DC 15 Fortitude save.",
  },
  SourcePage="p.118",
  Types={
    "ModifyMovement",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Lava Puddle",
  Key="Magma Elemental ~ Lava Puddle",
  Category="Special Ability",
  Description={
    Format="Once per day as a full-round action, a magma elemental can vomit forth a puddle of lava (Pathfinder RPG Core Rulebook 444) that fills its space to a depth of 2-3 inches and counts as difficult terrain.  Any creature that moves through this puddle of lava takes 2d6 points of fire damage.  This damage continues for 1d3 rounds after the creature leaves the lava pool, although then it only inflicts 1d6 points of fire damage per round.  The lava puddle solidifies and is safe to touch after %1 rounds.  At the GM's discretion, this puddle of lava could start secondary fires.",
    Arguments={
      Formula("TL"),
    },
  },
  SourcePage="p.118",
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Earth Glide",
  Key="Mud Elemental ~ Earth Glide",
  Category="Special Ability",
  Description={
    Format="A burrowing mud elemental can pass through dirt, gravel, or other loose or porous solid matter as easily as a fish swims through water.  It cannot use this ability to pass through a solid barrier such as a stone or brick wall.  Its burrowing leaves behind no tunnel or hole, nor does it create any ripple or other sign of its presence.  A move earth spell cast on an area containing a burrowing mud elemental flings the elemental back 30 feet, stunning the creature for 1 round unless it succeeds on a DC 15 Fortitude save.",
  },
  SourcePage="p.120",
  Types={
    "ModifyMovement",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Entrap",
  Key="Mud Elemental ~ Entrap",
  Category="Special Ability",
  Description={
    Format="The mud from an elemntal's entrap ability can be washed away in 1d3 rounds of immersion in water.",
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1, 10 minutes, hardness %2, hp %3)",
      Arguments={
        "MudElementalEntrapDC",
        "MudElementalEntrapHardness",
        "MudElementalEntrapHP",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "MudElementalEntrapDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Variables={
        "MudElementalEntrapHardness",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Variables={
        "MudElementalEntrapHP",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Constant Vigilance",
  Key="Arbiter ~ Constant Vigilance",
  Category="Special Ability",
  Description={
    Format="An arbiter gains a +4 bonus to recognize and disbelieve illusions created by creatures with the chaotic subtype or possessing the chaotic descriptor.",
  },
  SourcePage="p.162",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="(+4 vs. chaotic illusions)",
    },
  },
  Types={
    "Defensive",
    "Supernatural",
  },
})
DefineAbility({
  Name="Electrical Burst",
  Key="Arbiter ~ Electrical Burst",
  Category="Special Ability",
  Description={
    Format="An arbiter can release electrical energy from its body in a 10-foot-radius burst that deals 3d6 electricity damage (DC %1 Reflex half).  Immediately following such a burst, the arbiter becomes stunned for 24 hours.",
    Arguments={
      Formula("ArbiterElectricalBurstDC"),
    },
  },
  SourcePage="p.162",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Electrical Burst",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "ArbiterElectricalBurstDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Electrical Burst)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "ArbiterElectricalBurstDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Locate Inevitable",
  Key="Arbiter ~ Locate Inevitable",
  Category="Special Ability",
  Description={
    Format="An arbiter can always sense the direction of the nearest non-arbiter inevitable on the plane, the better to help it report back to its superiors.  It cannot sense the range to this inevitable.",
  },
  SourcePage="p.162",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Cat's Luck",
  Key="Silvanshee ~ Cat's Luck",
  Category="Special Ability",
  Description={
    Format="A silvanshee adds +%1 as a luck bonus on all its saving throws.  Oce per day as a standard action, it can also grant this bonus to one ally within 30 feet for 10 minutes.",
    Arguments={
      Formula("CHA"),
    },
  },
  SourcePage="p.21",
  TemporaryBonus={
    Bonus={
      Category="SAVE",
      Formula=Formula("CHA+Global_LuckBonus"),
      Type={
        Name="Luck",
      },
      Variables={
        "ALL",
      },
    },
    Target="ANYPC",
  },
  Bonuses={
    {
      Category="SAVE",
      Formula=Formula("CHA+Global_LuckBonus"),
      Type={
        Name="Luck",
      },
      Variables={
        "ALL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Heroic Strength",
  Key="Silvanshee ~ Heroic Strength",
  Category="Special Ability",
  Description={
    Format="Once per day, a silvanshee can grant itself a +8 enhancement bonus to Strength for one minute.",
  },
  SourcePage="p.21",
  TemporaryBonus={
    Bonus={
      Category="STAT",
      Formula=Formula("8"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "STR",
      },
    },
    Target="PC",
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Spectral Mist",
  Key="Silvanshee ~ Spectral Mist",
  Category="Special Ability",
  Description={
    Format="A silvanshee can assume an eerie, mist-like form roughly the size and shape of a cat.  This ability has the same effect as a gaseous form spell, except the silvanshee retains its own DR and supernatural abilities and can move at its normal speed.  It can remain in mist form up to 5 minutes per day.  This duration does not have to be consecutive, but it must be used in 1-minute increments.",
  },
  SourcePage="p.21",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Starlight Blast",
  Key="Lyrakien ~ Starlight Blast",
  Category="Special Ability",
  Description={
    Format="As a standard action once every 1d4 rounds, a lyrakien can tap into the divine power of Elysium, unleashing a blast of holy starlight in a 5-foot burst.  All creatures in this area take 1d4 points of holy damage, plus 1 point for each step their alignment deviates from chaotic good.  For example, a chaotic neutral or neutral good creature would take 1d4+1 points of damage, a neutral creature would take 1d4+2 points of damage, and a lawful evil creature would take 1d4+4 points of damage.  A DC %1 Reflex save negates this damage.  Chaotic good creatures are unaffected by this ability.",
    Arguments={
      Formula("LyrakienStarlightBlastDC"),
    },
  },
  SourcePage="p.38",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Starlight Blast",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "LyrakienStarlightBlastDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Starlight Blast)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "LyrakienStarlightBlastDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Traveler's Friend",
  Key="Lyrakien ~ Traveler's Friend",
  Category="Special Ability",
  Description={
    Format="The performances and company of a lyrakien ease the burden of travel.  Once per day, a creature may spend a minute listening to a lyrakien's performance - doing so removes the effects of exhaustion and fatigue from the listener.",
  },
  SourcePage="p.38",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Lesser Protective Aura",
  Key="Cassisian ~ Lesser Protective Aura",
  Category="Special Ability",
  Description={
    Format="A cassisian has a lesser form of the protective aura possessed by more powerful angels.  This protective aura grants the cassisian a +2 deflection bonus to its AC against evil foes, and a +2 resistance bonus on all saving throws made against evil effects or spells cast by evil creatures.  This aura extends to a radius of 5 feet, but can only benefit one additional creature other than the cassisian at any one time.  A cassisian's protective aura is fragile, and as soon as an evil creature successfully strikes the cassisian, or as soon as the cassisian fails a saving throw against an evil source, its protective aura fades away and is no longer applicable.  The cassisian can reactivate its protective aura by spending 1 minute concentrating upon the task.",
  },
  SourcePage="p.26",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+2 resistance vs. evil",
    },
    {
      Name="ModifyAC",
      FormatString="+2 deflection vs. evil",
    },
  },
  Types={
    "Aura",
    "ModifyAC",
    "Supernatural",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Cassisian ~ Breath Weapon",
  Category="Special Ability",
  SourcePage="p.26",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(15-ft. line, 1d6 cold or 1d6 fire, Reflex DC %1 half, usable every 1d4 rounds)",
      Arguments={
        "CassisianBreathWeaponDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+TL/2+CON"),
      Variables={
        "CassisianBreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CassisianBreathWeaponDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Special Ability|Change Shape.COPY=Change Shape",
  Key="Cassisian ~ Change Shape",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(2 of the following forms&colon; Small human-like angel, dove, dog, or Tiny fish, polymorph)",
    },
  },
})
DefineAbility({
  Name="Perfect Memory",
  Key="Cassisian ~ Perfect Memory",
  Category="Special Ability",
  Description={
    Format="Though they are not particularly intelligent, cassisians have perfect memories and remember everything they see or hear.  They can faultlessly recite conversations they heard hundreds of years before.  They also have the power to erase portions of their own memories, which they do (usually under orders from superior angels) to protect sensitive information.",
  },
  SourcePage="p.26",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Electricity",
  Key="Paracletus ~ Electricity",
  Category="Special Ability",
  SourcePage="p.11",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(slam,1d6)",
    },
  },
  Types={
    "SpecialAttack",
  },
})
DefineAbility({
  Name="Emotion Aura",
  Key="Aeon ~ Emotion Aura",
  Category="Internal",
  SourcePage="p.11",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Emotive Duality",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+HD/2+CHA"),
      Variables={
        "EmotionAuraDC",
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Aura of Courage/Fear Aura",
  Key="Emotion Aura ~ Courage Fear",
  Category="Special Ability",
  Description={
    Format="This paracletus exists as the embodiment of the emotive duality of courage and fear. Three times per day, a paracletus can create an aura of either courage (Bless as per spell) or fear (Bane as per spell). Creatures in the area must make a DC %1 Will save to resist the aura. A creature that makes its save against the aura is unaffected by that aeon's aura for the next 24 hours. The paracletus can choose one creature in the area to ignore its effects. The effect of the aura lasts for 10 minutes, and ends if a creature moves more than 30 feet from the aeon. The aura is a mind-affecting compulsion effect.",
    Arguments={
      Formula("EmotionAuraDC"),
    },
  },
  DisplayName="Aura of Courage/Fear Aura",
  SourcePage="p.11",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1,30 ft.)",
      Arguments={
        "EmotionAuraDC",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Spellike",
    "Aura",
    "EmotiveDuality",
  },
})
DefineAbility({
  Name="Aura of Empathy/Apathy",
  Key="Emotion Aura ~ Empathy Apathy",
  Category="Special Ability",
  Description={
    Format="This paracletus exists as the embodiment of the emotive duality of empathy and apathy. Three times per day, a paracletus can create an aura of either empathy or apathy that gives a +2 bonus (empathy) or a -2 penalty (apathy) on Bluff, Diplomacy and Intimidate skill checks. Creatures in the area must make a DC %1 Will save to resist the aura. A creature that makes its save against the aura is unaffected by that aeon's aura for the next 24 hours. The paracletus can choose one creature in the area to ignore its effects. The effect of the aura lasts for 10 minutes, and ends if a creature moves more than 30 feet from the aeon. The aura is a mind-affecting compulsion effect.",
    Arguments={
      Formula("EmotionAuraDC"),
    },
  },
  DisplayName="Aura of Empathy/Apathy",
  SourcePage="p.11",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1,30 ft.)",
      Arguments={
        "EmotionAuraDC",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Spellike",
    "Aura",
    "EmotiveDuality",
  },
})
DefineAbility({
  Name="Aura of Hope/Despair",
  Key="Emotion Aura ~ Hope Despair",
  Category="Special Ability",
  Description={
    Format="This paracletus exists as the embodiment of the emotive duality of hope and despair. Three times per day, a paracletus can create an aura of either hope or despair that gives a +2 morale bonus (hope) or a -2 penalty (despair) on Will saves. Creatures in the area must make a DC %1 Will save to resist the aura. A creature that makes its save against the aura is unaffected by that aeon's aura for the next 24 hours. The paracletus can choose one creature in the area to ignore its effects. The effect of the aura lasts for 10 minutes, and ends if a creature moves more than 30 feet from the aeon. The aura is a mind-affecting compulsion effect.",
    Arguments={
      Formula("EmotionAuraDC"),
    },
  },
  DisplayName="Aura of Hope/Despair",
  SourcePage="p.11",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1,30 ft.)",
      Arguments={
        "EmotionAuraDC",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Spellike",
    "Aura",
    "EmotiveDuality",
  },
})
DefineAbility({
  Name="Bonus vs Illusions",
  Key="Brownie ~ Bonus vs Illusions",
  Category="Special Ability",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+2 vs. illusions",
    },
  },
  Types={
    "SaveBonus",
  },
})
DefineAbility({
  Name="Poison",
  Key="Greensting Scorpion ~ Poison",
  Category="Special Ability",
  Description={
    Format="Sting-injury; save Fort DC %1; frequency 1/round for 6 rounds; effect sickened for 1 round; cure 1 save.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Poison",
  Key="Greensting Scorpion Companion ~ Poison",
  Category="Special Ability",
  Description={
    Format="Sting-injury; save Fort DC %1; frequency 1/round for 6 rounds; effect sickened for 1 round; cure 1 save.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.242",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Racial",
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Poison",
  Key="Giant Spider Companion ~ Poison",
  Category="Special Ability",
  Description={
    Format="Bite-injury; save Fort DC %1; frequency 1/round for 4 rounds; effect 1d2 Str damage; cure 1 save.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.258",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(Fort DC %1;1/round for 4 rounds;1d2 Str;1 save)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Poison",
  Key="Giant Centipede Companion ~ Poison",
  Category="Special Ability",
  Description={
    Format="Injury; Save Fort DC %1; Frequency 1/round for 6 rounds; Effect 1d3 Dex damage; Cure 1 save.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.43",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Water Dependency",
  Key="Crab Companion ~ Water Dependency",
  Category="Special Ability",
  Description={
    Format="Giant crabs can survive out of the water for 1 hour per point of Constitution. Beyond this limit, a giant crab runs the risk of suffocation, as if it were drowning.",
  },
  SourcePage="p.50",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Ink Cloud",
  Key="Octopus Companion ~ Ink Cloud",
  Category="Special Ability",
  Description={
    Format="An octopus can emit a 10ft radius sphere of ink once per minute as a free action. The ink provides total concealment in water, and persists for 1 minute.",
  },
  SourcePage="p.219",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Jet",
  Key="Octopus Companion ~ Jet",
  Category="Special Ability",
  Description={
    Format="An octopus can jet backward once per round as a full-round action, at a speed of 200 ft. It must move in a straight line while jetting, and does not provoke attacks of opportunity when it does so.",
  },
  SourcePage="p.219",
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
  Movement={
    Jet=200,
  },
})
DefineAbility({
  Name="Poison",
  Key="Octopus Companion ~ Poison",
  Category="Special Ability",
  Description={
    Format="Bite-injury; save Fort DC 13; frequency 1/round for 6 rounds; effect 1 Str; cure 1 save.",
  },
  SourcePage="p.219",
  Types={
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Companion Favored Terrain",
  Category="Special Ability",
  Description={
    Format="You gain a your master's favored terrain bonuses.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Detect Chaos",
  Key="Detect Chaos ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Detect Chaos, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.266",
  SpellLikeAbilities={
    {
      Name="Detect Chaos",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="11+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Evil",
  Key="Detect Evil ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Detect Evil, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.266",
  SpellLikeAbilities={
    {
      Name="Detect Evil",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="11+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Good",
  Key="Detect Good ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Detect Good, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.266",
  SpellLikeAbilities={
    {
      Name="Detect Good",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="11+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Law",
  Key="Detect Law ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Detect Law, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.266",
  SpellLikeAbilities={
    {
      Name="Detect Law",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="11+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Magic",
  Key="Detect Magic ~ Constant",
  Category="Special Ability",
  Description={
    Format="You detect magical auras, as per the spell Detect Magic, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.266",
  SpellLikeAbilities={
    {
      Name="Detect Magic",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="10+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Poison",
  Key="Detect Poison ~ Constant",
  Category="Special Ability",
  Description={
    Format="You Detect Poison, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.268",
  SpellLikeAbilities={
    {
      Name="Detect Poison",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="10+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Snares and Pits",
  Key="Detect Snares and Pits ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Detect Snares and Pits, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.268",
  SpellLikeAbilities={
    {
      Name="Detect Snares and Pits",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="11+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Detect Thoughts",
  Key="Detect Thoughts ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Detect Thoughts, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.268",
  SpellLikeAbilities={
    {
      Name="Detect Thoughts",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="12+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Discern Lies",
  Key="Discern Lies ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Discern Lies, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.270",
  SpellLikeAbilities={
    {
      Name="Discern Lies",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="14+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Communicate",
  },
})
DefineAbility({
  Name="Fly",
  Key="Fly ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Fly, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.284",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Flight Maneuverability",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "Maneuverability",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Fly",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="13+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
  Movement={
    Fly=60,
  },
})
DefineAbility({
  Name="Holy Aura",
  Key="Holy Aura ~ Constant",
  Category="Special Ability",
  Description={
    Format="You have a Holy Aura, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.297",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "18+CHA",
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("4"),
      Type={
        Name="Deflection",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("4"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ALL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Holy Aura",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="18+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Aura",
  },
})
DefineAbility({
  Name="See Invisibility",
  Key="See Invisibility ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can See Invisibility, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.339",
  SpellLikeAbilities={
    {
      Name="See Invisibility",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="12+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Speak with Plants",
  Key="Speak with Plants ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can communicate with normal plants and plant creatures, and can ask questions of and receive answers from them, as per the spell Speak with Plants, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.346",
  SpellLikeAbilities={
    {
      Name="Speak with Plants",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="13+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Communicate",
  },
})
DefineAbility({
  Name="True Seeing",
  Key="True Seeing ~ Constant",
  Category="Special Ability",
  Description={
    Format="You see all things as they actually are, as per the spell True Seeing, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.363",
  SpellLikeAbilities={
    {
      Name="True Seeing",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="15+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Tongues",
  Key="Tongues ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can speak and understand the language of any intelligent creature, whether it is a racial tongue or a regional dialect, as per the spell Tongues, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.360",
  SpellLikeAbilities={
    {
      Name="Tongues",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="13+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Communicate",
  },
})
DefineAbility({
  Name="Unholy Aura",
  Key="Unholy Aura ~ Constant",
  Category="Special Ability",
  Description={
    Format="You have an Unholy Aura, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.364",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "18+CHA",
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("4"),
      Type={
        Name="Deflection",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("4"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ALL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Unholy Aura",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="18+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Aura",
  },
})
DefineAbility({
  Name="Water Walk",
  Key="Water Walk ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Water Walk, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated a as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.368",
  SpellLikeAbilities={
    {
      Name="Water Walk",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="13+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "ModifyMovement",
  },
})
SetSource({
  SourceLong="Bestiary 2",
  SourceShort="B2",
  SourceWeb="http://paizo.com/store/byCompany/p/paizoPublishingLLC/pathfinder/pathfinderRPG/v5748btpy8ddb",
  SourceDate="2010-12",
})
DefineAbility({
  Name="Air Walk",
  Key="Air Walk ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can Air Walk, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Air Walk",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Arcane Sight",
  Key="Arcane Sight ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Arcane Sight, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SourcePage="p.288",
  SpellLikeAbilities={
    {
      Name="Arcane Sight",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Blink",
  Key="Blink ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Blink, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Blink",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Blur",
  Key="Blur ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Blur, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Blur",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Cloak of Chaos",
  Key="Cloak of Chaos ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Cloak of Chaos, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("4"),
      Type={
        Name="Deflection",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("4"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ALL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Cloak of Chaos",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="18+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Deathwatch",
  Key="Deathwatch ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Deathwatch, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Deathwatch",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Sense",
  },
})
DefineAbility({
  Name="Displacement",
  Key="Displacement ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Displacement, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Displacement",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "Defensive",
    "SpellLike",
  },
})
DefineAbility({
  Name="Entropic Shield",
  Key="Entropic Shield ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Entropic Shield, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Entropic Shield",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Fire Shield",
  Key="Fire Shield ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Fire Shield, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Fire Shield",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Fire Shield (warm)",
  Key="Fire Shield (warm) ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use the warm version of Fire Shield, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Fire Shield (warm)",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "Defensive",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Floating Disk",
  Key="Floating Disk ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Floating Disk, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Floating Disk",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Foresight",
  Key="Foresight ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Foresight, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Never Surprised or Flat-Footed",
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("2"),
      Type={
        Name="Insight",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("2"),
      Type={
        Name="Insight",
      },
      Variables={
        "Reflex",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Foresight",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Freedom of Movement",
  Key="Freedom of Movement ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Freedom of Movement, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Freedom of Movement",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
    "Defensive",
  },
})
DefineAbility({
  Name="Hide from Undead",
  Key="Hide from Undead ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Hide from Undead, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Hide from Undead",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      DC="11+CHA",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Know Direction",
  Key="Know Direction ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Know Direction, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Know Direction",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Mage Armor",
  Key="Mage Armor ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Mage Armor, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("4"),
      Type={
        Name="Armor",
      },
      Variables={
        "AC",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Mage Armor",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Magic Circle against Evil",
  Key="Magic Circle against Evil ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Magic Circle against Evil, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Aspects={
    {
      Name="ModifyAC",
      FormatString="(+2 deflection vs. evil)",
    },
  },
  SpellLikeAbilities={
    {
      Name="Magic Circle against Evil",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "Aura",
    "ModifyAC",
    "SpellLike",
  },
})
DefineAbility({
  Name="Magic Fang",
  Key="Magic Fang ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Magic Fang, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("1"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "TOHIT.Natural",
      },
    },
    {
      Category="COMBAT",
      Formula=Formula("1"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "DAMAGE.Natural",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Magic Fang",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Mind Blank",
  Key="Mind Blank ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Mind Blank, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+8 resistance vs. mind-affecting",
    },
  },
  SpellLikeAbilities={
    {
      Name="Mind Blank",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SaveBonus",
    "SpellLike",
  },
})
DefineAbility({
  Name="Nondetection",
  Key="Nondetection ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Nondetection, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Nondetection",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Pass without Trace",
  Key="Pass without Trace ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Pass without Trace, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Pass without Trace",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Resist Energy (one at a time)",
  Key="Resist Energy (one at a time) ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Resist Energy, as per the spell, as a constant ability; only one energy type at a time. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Resist Energy",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Shield of Law",
  Key="Shield of Law ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Shield of Law, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "18+CHA",
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("4"),
      Type={
        Name="Deflection",
      },
      Variables={
        "AC",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("4"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ALL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Shield of Law",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "Aura",
    "SpellLike",
  },
})
DefineAbility({
  Name="Shillelagh",
  Key="Shillelagh ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Shillelagh, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Shillelagh",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Speak with Animals",
  Key="Speak with Animals ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Speak with Animals, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Speak with Animals",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "Communicate",
    "SpellLike",
  },
})
DefineAbility({
  Name="Spell Turning",
  Key="Spell Turning ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Spell Turning, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Spell Turning",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Spider Climb",
  Key="Spider Climb ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Spider Climb, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Spider Climb",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Unseen Servant",
  Key="Unseen Servant ~ Constant",
  Category="Special Ability",
  Description={
    Format="You can use Unseen Servant, as per the spell, as a constant ability. Constant spell-like abilities function at all times but can be dispelled. Constant spell-like abilities can be reactivated as a swift action.",
    Conditions={
      function (character, item)
        return (IsRuleEnabled("DisplayFullAbility"))
      end,
    },
  },
  SpellLikeAbilities={
    {
      Name="Unseen Servant",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Constant",
      CasterLevel="SLA_CL",
    },
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Giant Creature (Proper Rules)",
  SortKey="Giant Creature_1a",
  Category="Special Ability",
  Description={
    Format="The publisher intended people to use the size adjustment rules, but the other options are to speed up play. Not necessary as PCGen will calculate the new size for you.",
  },
  Bonuses={
    {
      Category="SIZEMOD",
      Formula=Formula("1"),
      Variables={
        "NUMBER",
      },
    },
  },
  Types={
    "GiantCreatureSelection",
  },
})
DefineAbility({
  Name="Giant Creature (Rebuild Option)",
  SortKey="Giant Creature_1b",
  Category="Special Ability",
  Description={
    Format="Rebuild Rules: Used for on-the-fly gaming. Size increase by one category; AC increase natural armor by +3; Attacks increase dice rolled by 1 step; Ability Scores +4 size bonus to Str and Con, -2 Dex.",
  },
  Bonuses={
    {
      Category="SIZEMOD",
      Formula=Formula("1"),
      Variables={
        "NUMBER",
      },
    },
    {
      Category="STAT",
      Formula=Formula("4"),
      Type={
        Name="Size",
      },
      Variables={
        "STR",
        "CON",
      },
    },
    {
      Category="STAT",
      Formula=Formula("-2"),
      Type={
        Name="Size",
      },
      Variables={
        "DEX",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
        Stack=true,
      },
      Variables={
        "AC_Natural_Armor",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "BypassSizeMods",
      },
    },
  },
  Types={
    "GiantCreatureSelection",
  },
})
DefineAbility({
  Name="Giant Creature (Quick Rules)",
  SortKey="Giant Creature_1c",
  Category="Special Ability",
  Description={
    Format="Quick Rules: +2 to all rolls based on Str or Con, +2 hp/HD, -1 penalty on all rolls based on Dex.",
  },
  Types={
    "GiantCreatureSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Setting Language ~ Default",
  Category="Internal",
  Types={
    "RaceLanguageSelection",
  },
})
SetSource({
  SourceLong="Bestiary 3",
  SourceShort="B3",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Asura",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Asura") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Behemoth",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Behemoth") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Clockwork",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Clockwork") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Demodand",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Demodand") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Div",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Div") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Kami",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Kami") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Kyton",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Kyton") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Leshy",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Leshy") end))
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Race Subtype ~ Rakshasa",
      },
      Conditions={
        function (character, item)
          return (any(character.Race.RaceSubTypes, function (type) stringMatch(type, "Rakshasa") end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Asura Traits",
  Key="Race Subtype ~ Asura",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Asura",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Asura ~ Elusive Aura",
        "Asura ~ Save Bonus",
        "Immunity to curses",
        "Immunity to Disease",
        "Immunity to Poison",
        "Telepathy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ElectricityResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Behemoth Traits",
  Key="Race Subtype ~ Behemoth",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Behemoth",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Behemoth ~ Ruinous",
        "Behemoth ~ Unstoppable",
        "Behemoth ~ Vulnerable to Miracles and Wishes",
        "Immunity to Ability Damage",
        "Immunity to aging",
        "Immunity to bleed",
        "Immunity to Disease",
        "Immunity to Energy Drain",
        "Immunity to fire",
        "Immunity to Mind-Affecting Effects",
        "Immunity to negative levels",
        "Immunity to Paralysis",
        "Immunity to permanent wounds",
        "Immunity to petrification",
        "Immunity to Poison",
        "Immunity to Polymorph",
      },
    },
  },
})
DefineAbility({
  Name="Clockwork Traits",
  Key="Race Subtype ~ Clockwork",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Clockwork",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Clockwork ~ Difficult to Create",
        "Clockwork ~ Swift Reactions",
        "Clockwork ~ Winding",
        "Vulnerability to Electricity",
      },
    },
  },
})
DefineAbility({
  Name="Demodand Traits",
  Key="Race Subtype ~ Demodand",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Demodand",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Demodand ~ Faith-Stealing Strike",
        "Demodand ~ Heretical Soul",
        "Immunity to acid",
        "Immunity to Poison",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "FireResistanceBonus",
        "ColdResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Div Traits",
  Key="Race Subtype ~ Div",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Div",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Div ~ See in Darkness",
        "Immunity to fire",
        "Immunity to Poison",
        "Telepathy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ElectricityResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Kami Traits",
  Key="Race Subtype ~ Kami",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Kami",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to bleed",
        "Immunity to Mind-Affecting Effects",
        "Immunity to petrification",
        "Immunity to Polymorph Effects",
        "Kami ~ Fast Healing",
        "Kami ~ Merge with Ward",
        "Kami ~ Ward",
        "Telepathy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ElectricityResistanceBonus",
        "FireResistanceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Kyton Traits",
  Key="Race Subtype ~ Kyton",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Kyton",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to cold",
        "Kyton ~ Regeneration",
        "Kyton ~ Unnerving Gaze",
      },
    },
  },
})
DefineAbility({
  Name="Leshy Traits",
  Key="Race Subtype ~ Leshy",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Leshy",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to electricity",
        "Immunity to sonic",
        "Leshy ~ Change Shape",
        "Leshy ~ Plantspeech",
        "Leshy ~ Spell-Like Abilities",
        "Leshy ~ Verdant Burst",
      },
    },
  },
})
DefineAbility({
  Name="Rakshasa Traits",
  Key="Race Subtype ~ Rakshasa",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Traits Output ~ Div",
      },
      Conditions={
        function (character, item)
          return (IsRuleEnabled("DISPLAYTYPETRAITS"))
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Rakshasa ~ Change Shape",
        "Rakshasa ~ Detect Thoughts",
      },
    },
  },
})
DefineAbility({
  Name="Asura Traits",
  Key="Traits Output ~ Asura",
  Category="Special Ability",
  Description={
    Format="&nl; Telepathy.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Behemoth Traits",
  Key="Traits Output ~ Behemoth",
  Category="Special Ability",
  Description={
    Format="&nl; Regeneration (Ex) No form of attack can suppress a behemoth's regeneration-it regenerates even if disintegrated or slain by a death effect. If a behemoth fails a save against an effect that would kill it instantly, it rises from death 3 rounds later with 1 hit point if no further damage is dealt to its remains. It can be banished or otherwise transported away as a means to save a region, but the only way to truly kill a behemoth is to use miracle or wish to negate its regeneration (see below).",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Clockwork Traits",
  Key="Traits Output ~ Clockwork",
  Category="Special Ability",
  Description={
    Format="&nl; Difficult to Create (Ex) The time and gp cost required to create a clockwork is 150%% of normal. Construction requirements in individual clockwork monster entries are already increased.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Demodand Traits",
  Key="Traits Output ~ Demodand",
  Category="Special Ability",
  Description={
    Format="&nl; Heretical Soul (Ex) All demodands gain a +4 bonus on saving throws against divine spells. In addition, any attempts to scry on a demodand using divine magic automatically fail. The caster can see the scryed area normally, but the demodand simply does not appear.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Div Traits",
  Key="Traits Output ~ Div",
  Category="Special Ability",
  Description={
    Format="&nl; Telepathy.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Kami Traits",
  Key="Traits Output ~ Kami",
  Category="Special Ability",
  Description={
    Format="&nl; Ward (Su) A kami has a specific ward-a creature with a 2 or lower Intelligence (usually an animal or vermin), a plant (not a plant creature), an object, or a location. The type of ward is listed in parentheses in the kami's stat block. Several of a kami's abilities function only when it is either merged with its ward or within 120 feet of it. If a kami's ward is portable and travels with the kami to another plane, the kami does not gain the extraplanar subtype on that other plane as long as its ward remains within 120 feet. If a ward is destroyed while a kami is merged with it, the kami dies (no save). If a ward is destroyed while a kami is not merged with it, the kami loses its merge with ward ability and its fast healing, and becomes permanently sickened.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Kyton Traits",
  Key="Traits Output ~ Kyton",
  Category="Special Ability",
  Description={
    Format="&nl; Unnerving Gaze (Su) All kytons have a gaze attack that manipulates the perceptions of those who look upon them. An unnerving gaze has a range of 30 feet, and can be negated by a Will save-the exact effects caused by a particular kyton's unnerving gaze depend on the type of kyton. All kytons are immune to the unnerving gazes of other kytons. Unnerving gaze is always a mind-affecting fear effect. The save DC is Charisma-based.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Leshy Traits",
  Key="Traits Output ~ Leshy",
  Category="Special Ability",
  Description={
    Format="&nl; Verdant Burst (Su) When slain, a leshy explodes in a burst of fertile energies. All plant creatures within 30 feet of a slain leshy heal 1d8 points of damage plus 1 point per HD of the slain leshy, and plant life of the same type as the leshy itself quickly infests the area. If the terrain can support this type of plant, the undergrowth is dense enough to make the region into difficult terrain for 24 hours, after which the plant life diminishes to a normal level; otherwise, the plant life has no significant effect on movement and withers and dies within an hour.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Rakshasa Traits",
  Key="Traits Output ~ Rakshasa",
  Category="Special Ability",
  Description={
    Format="&nl; Detect Thoughts (Su) A rakshasa can detect thoughts as per the spell of the same name. This effect functions at CL 18th. A rakshasa can suppress or resume this ability as a free action. When a rakshasa uses this ability, it always functions as if it had spent 3 rounds concentrating and thus gains the maximum amount of information possible. The Will save DC to resist this effect is equal to 10 + 1/2 the rakshasa's HD + the rakshasa's Charisma modifier.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Elusive Aura",
  Key="Asura ~ Elusive Aura",
  Category="Special Ability",
  Description={
    Format="Asuras exist within reality but apart from it. All but the least of asuras exude an aura that affects all creatures within the area as if by a nondetection spell. The size of the aura is proportional to the asura's power. The caster level check to attempt divination on creatures within the aura is 15 + the spell-like ability caster level of the asura creating the aura.",
  },
  Types={
    "Supernatural",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Save Bonus",
  Key="Asura ~ Save Bonus",
  Category="Special Ability",
  Description={
    Format="+2 racial bonus on saving throws against enchantment spells.",
  },
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+2 racial bonus on saving throws against enchantment spells.",
    },
  },
  Types={
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Ruinous",
  Key="Behemoth ~ Ruinous",
  Category="Special Ability",
  Description={
    Format="A behemoth's natural attacks penetrate damage reduction as if they were epic and magic, and ignore up to 20 points of hardness on objects struck. As a swift action, whenever it strikes a creature or object with a spell effect in place, it can attempt to dispel one randomly determined spell effect on that creature as if with a greater dispel magic (CL 20th).",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Unstoppable",
  Key="Behemoth ~ Unstoppable",
  Category="Special Ability",
  Description={
    Format="If a behemoth starts its turn suffering from any or all of the following conditions, it recovers from them at the end of its turn: blind, confused, dazed, deafened, dazzled, exhausted, fatigued, nauseated, sickened, slowed, staggered, and stunned.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Vulnerable to Miracles and Wishes",
  Key="Behemoth ~ Vulnerable to Miracles and Wishes",
  Category="Special Ability",
  Description={
    Format="A spell effect created by a miracle or wish spell is particularly effective against a behemoth. A spellcaster gains a +6 bonus on its caster level check to penetrate a behemoth's SR with a miracle or wish spell, and the behemoth suffers a -6 penalty on saves against these spells. A miracle or a wish spell can negate a behemoth's regeneration, but only for 1d4 rounds per casting.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Winding",
  Key="Clockwork ~ Winding",
  Category="Special Ability",
  Description={
    Format="Clockwork constructs must be wound with special keys in order to function. As a general rule, a fully wound clockwork can remain active for 1 day per Hit Die, but shorter or longer durations are possible.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Swift Reactions",
  Key="Clockwork ~ Swift Reactions",
  Category="Special Ability",
  Description={
    Format="Clockwork constructs generally react much more swiftly than other constructs. They gain Improved Initiative and Lightning Reflexes as bonus feats, and gain a +2 dodge bonus to AC.",
  },
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Initiative",
      },
    },
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Lightning Reflexes",
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("2"),
      Type={
        Name="Dodge",
      },
      Variables={
        "AC",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Difficult to Create",
  Key="Clockwork ~ Difficult to Create",
  Category="Special Ability",
  Description={
    Format="The time and gp cost required to create a clockwork is 150%% of normal. Construction requirements in individual clockwork monster entries are already increased.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Faith-Stealing Strike",
  Key="Demodand ~ Faith-Stealing Strike",
  Category="Special Ability",
  Description={
    Format="When a demodand's natural attack or melee weapon damages a creature capable of casting divine spells, that creature must make a Will saving throw or be unable to cast any divine spells for 1 round. Once a creature makes this save, it is immune to further faith-stealing strikes from that particular demodand for 24 hours. The save DC is Charisma-based.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Heretical Soul",
  Key="Demodand ~ Heretical Soul",
  Category="Special Ability",
  Description={
    Format="All demodands gain a +4 bonus on saving throws against divine spells. In addition, any attempts to scry on a demodand using divine magic automatically fail. The caster can see the scryed area normally, but the demodand simply does not appear.",
  },
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+4 bonus on saving throws against divine spells",
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="See in Darkness",
  Key="Div ~ See in Darkness",
  Category="Special Ability",
  Description={
    Format="Some divs can see perfectly in darkness of any kind, even that created by a deeper darkness spell.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Fast Healing",
  Key="Kami ~ Fast Healing",
  Category="Special Ability",
  Description={
    Format="As long as a kami is within 120 feet of its ward, it gains fast healing. The amount of fast healing it gains depends on the type of kami.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Merge with Ward",
  Key="Kami ~ Merge with Ward",
  Category="Special Ability",
  Description={
    Format="As a standard action, a kami can merge its body and mind with its ward. When merged, the kami can observe the surrounding region with its senses as if it were using its own body, as well as via any senses its ward might have. It has no control over its ward, nor can it communicate or otherwise take any action other than to emerge from its ward as a standard action. A kami must be adjacent to its ward to merge with or emerge from it. If its ward is a creature, plant, or object, the kami can emerge mounted on the creature provided the kami's body is at least one size category smaller than the creature. If its ward is a location, the kami may emerge at any point within that location.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Ward",
  Key="Kami ~ Ward",
  Category="Special Ability",
  Description={
    Format="A kami has a specific ward-a creature with a 2 or lower Intelligence (usually an animal or vermin), a plant (not a plant creature), an object, or a location. The type of ward is listed in parentheses in the kami's stat block. Several of a kami's abilities function only when it is either merged with its ward or within 120 feet of it. If a kami's ward is portable and travels with the kami to another plane, the kami does not gain the extraplanar subtype on that other plane as long as its ward remains within 120 feet. If a ward is destroyed while a kami is merged with it, the kami dies (no save). If a ward is destroyed while a kami is not merged with it, the kami loses its merge with ward ability and its fast healing, and becomes permanently sickened.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Regeneration",
  Key="Kyton ~ Regeneration",
  Category="Special Ability",
  Description={
    Format="The extent of a kyton's regeneration varies according to type, and can be neutralized by good weapons, good spells, and silver weapons.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Unnerving Gaze",
  Key="Kyton ~ Unnerving Gaze",
  Category="Special Ability",
  Description={
    Format="All kytons have a gaze attack that manipulates the perceptions of those who look upon them. An unnerving gaze has a range of 30 feet, and can be negated by a Will save-the exact effects caused by a particular kyton's unnerving gaze depend on the type of kyton. All kytons are immune to the unnerving gazes of other kytons. Unnerving gaze is always a mind-affecting fear effect. The save DC is Charisma-based.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Spell-Like Abilities",
  Key="Leshy ~ Spell-Like Abilities",
  Category="Special Ability",
  Description={
    Format="All leshys have pass without trace as a constant spell-like ability (CL equal to twice the leshy's HD).",
  },
  Types={
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Change Shape",
  Key="Leshy ~ Change Shape",
  Category="Special Ability",
  Description={
    Format="All leshys can transform into plants, with results similar to the tree shape spell. Unlike that spell, this ability only allows transformation into Small plants of the same type of growth the leshy is related to. In this form, the leshy appears as a particularly healthy specimen of that particular plant. A leshy can assume plant form or revert to its true form as a swift action.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Plantspeech",
  Key="Leshy ~ Plantspeech",
  Category="Special Ability",
  Description={
    Format="All leshys can speak with plants as if subject to a continual speak with plants spell, but only with species they are related to.",
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Verdant Burst",
  Key="Leshy ~ Verdant Burst",
  Category="Special Ability",
  Description={
    Format="When slain, a leshy explodes in a burst of fertile energies. All plant creatures within 30 feet of a slain leshy heal 1d8 points of damage plus 1 point per HD of the slain leshy, and plant life of the same type as the leshy itself quickly infests the area. If the terrain can support this type of plant, the undergrowth is dense enough to make the region into difficult terrain for 24 hours, after which the plant life diminishes to a normal level; otherwise, the plant life has no significant effect on movement and withers and dies within an hour.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Change Shape",
  Key="Rakshasa ~ Change Shape",
  Category="Special Ability",
  Description={
    Format="All rakshasas have the ability to change shape into any humanoid, as if using alter self.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Detect Thoughts",
  Key="Rakshasa ~ Detect Thoughts",
  Category="Special Ability",
  Description={
    Format="A rakshasa can detect thoughts as per the spell of the same name. This effect functions at CL 18th. A rakshasa can suppress or resume this ability as a free action. When a rakshasa uses this ability, it always functions as if it had spent 3 rounds concentrating and thus gains the maximum amount of information possible. The Will save DC to resist this effect is equal to 10 + 1/2 the rakshasa's HD + the rakshasa's Charisma modifier.",
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
SetSource({
  SourceLong="Universal Rules",
  SourceShort="UR",
})
DefineAbility({
  Name="Capsize",
  Category="Special Ability",
  Types={
    "Extraordinary",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Crush",
  Category="Special Ability",
  Types={
    "Extraordinary",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Freedom of Movement",
  Category="Special Ability",
  Types={
    "Extraordinary",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Immunity to Nausea",
  Category="Special Ability",
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to Negative Energy",
  Category="Special Ability",
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Immunity to vision-based attacks",
  Category="Special Ability",
  Types={
    "Extraordinary",
    "Immunity",
  },
})
DefineAbility({
  Name="Assign RaceType ~ Outsider",
  Category="Internal",
  Templates={
    "Assign RaceType ~ Outsider",
  },
})
DefineAbility({
  Name="Assign RaceType ~ Fey",
  Category="Internal",
  Templates={
    "Assign RaceType ~ Fey",
  },
})
DefineAbility({
  Name="Assign RaceSubType ~ Extraplanar",
  Category="Internal",
  Templates={
    "Assign RaceSubType ~ Extraplanar",
  },
})
SetSource({
  SourceLong="Bestiary",
  SourceShort="B1",
  SourceWeb="http://paizo.com/store/downloads/pathfinder/pathfinderRPG/v5748btpy8auu",
  SourceDate="2009-10",
})
DefineAbility({
  Name="Breath Weapon",
  Key="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Description={
    Format="Some creatures can exhale a cone, line, or cloud of energy or other magical effects. A breath weapon attack usually deals damage and is often based on some type of energy. Breath weapons allow a Reflex save for half damage (DC 10 + 1/2 breathing creature's racial HD + breathing creature's Con modifier; the exact DC is given in the creature's descriptive text). A creature is immune to its own breath weapon unless otherwise noted. Some breath weapons allow a Fortitude save or a Will save instead of a Reflex save. Each breath weapon also includes notes on how often it can be used, even if this number is limited in times per day.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_BreathWeapon_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Breath Weapon",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "BreathWeaponDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Breath Weapon)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "BreathWeaponDC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "Special Attack",
    "Special Attack",
    "Supernatural",
    "BreathWeapon",
  },
})
DefineAbility({
  Name="Burn",
  Key="Universal Monster Rule ~ Burn",
  Category="Special Ability",
  Description={
    Format="A creature with the burn special attack deals fire damage in addition to damage dealt on a successful hit in melee. Those affected by the burn ability must also succeed on a Reflex save or catch fire, taking the listed damage for an additional 1d4 rounds at the start of its turn (DC 10 + 1/2 burning creature's racial HD + burning creature's Con modifier). A burning creature can attempt a new save as a full-round action. Dropping and rolling on the ground grants a +4 bonus on this save. Creatures that hit a burning creature with natural weapons or unarmed attacks take fire damage as though hit by the burning creature and must make a Reflex save to avoid catching on fire (see Pathfinder RPG Core Rulebook, Environmental Rules: Heat Dangers).",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Burn_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.298",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Burn",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2, DC %3)",
      Arguments={
        "UMR_Burn_DamageDice",
        "UMR_Burn_DamageDieSize",
        "UMR_Burn_DC",
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Slam",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Burn_ApplySlam"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "UMR_Burn_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Burn)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "UMR_Burn_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "UMR_Burn_DamageDice",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Special Attack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Change Shape",
  Key="Universal Monster Rule ~ Change Shape",
  Category="Special Ability",
  Description={
    Format="A creature with this special quality has the ability to assume the appearance of a specific creature or type of creature (usually a humanoid), but retains most of its own physical qualities. A creature cannot change shape to a form more than one size category smaller or larger than its original form. This ability functions as a polymorph spell, the type of which is listed in the creature's description, but the creature does not adjust its ability scores (although it gains any other abilities of the creature it mimics). Unless otherwise stated, it can remain in an alternate form indefinitely. Some creatures, such as lycanthropes, can transform into unique forms with special modifiers and abilities. These creatures do adjust their ability scores, as noted in their description.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_ChangeShape_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.298",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Disease",
  Key="Universal Monster Rule ~ Disease (Extraordinary)",
  Category="Special Ability",
  Description={
    Format="A creature with this ability causes disease in those it contacts. The effects of the disease, including its save, frequency, and cure, are included in the creature's description. The saving throw to negate the disease is usually a Fort save (DC 10 + 1/2 infecting creature's racial HD + the creature's Con modifier; the exact DC is given in the creature's descriptive text). Disease can be removed through remove disease and similar effects.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Disease_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.299",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Disease",
      },
    },
  },
  Aspects={
    {
      Name="NaturalAttackBonus",
      FormatString="Bite",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Disease_ApplyBite"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "UMR_Disease_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Disease)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "UMR_Disease_DC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "Special Ability",
    "SpecialAttack",
    "Special Attack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Disease",
  Key="Universal Monster Rule ~ Disease (Supernatural)",
  Category="Special Ability",
  Description={
    Format="A creature with this ability causes disease in those it contacts. The effects of the disease, including its save, frequency, and cure, are included in the creature's description. The saving throw to negate the disease is usually a Fort save (DC 10 + 1/2 infecting creature's racial HD + the creature's Con modifier; the exact DC is given in the creature's descriptive text). Disease can be removed through remove disease and similar effects.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Disease_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.299",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Disease",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+CON"),
      Type={
        Name="Base",
      },
      Variables={
        "UMR_Disease_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Disease)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "UMR_Disease_DC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "Special Ability",
    "SpecialAttack",
    "Special Attack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Fast Healing",
  Key="Universal Monster Rule ~ Fast Healing",
  Category="Special Ability",
  Description={
    Format="A creature with the fast healing special quality regains hit points at an exceptional rate, usually 1 or more hit points per round, as given in the creature's entry. Except where noted here, fast healing is just like natural healing. Fast healing does not restore hit points lost from starvation, thirst, or suffocation, nor does it allow a creature to regrow lost body parts. Unless otherwise stated, it does not allow lost body parts to be reattached. Fast healing continues to function (even at negative hit points) until a creature dies, at which point the effects of fast healing end immediately.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_FastHealing_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.300",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "UMR_FastHealing_Rate",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Extraordinary",
    "ModifyHP",
  },
})
DefineAbility({
  Name="Grab",
  Key="Universal Monster Rule ~ Grab",
  Category="Special Ability",
  Description={
    Format="If a creature with this special attack hits with the indicated attack (usually a claw or bite attack), it deals normal damage and attempts to start a grapple as a free action without provoking an attack of opportunity. The creature has the option to conduct the grapple normally, or simply use the part of its body it used in the grab to hold the opponent. If it chooses to do the latter, it takes a -20 penalty on its CMB check to make and maintain the grapple, but does not gain the grappled condition itself. A successful hold does not deal any extra damage unless the creature also has the constrict special attack. If the creature does not constrict, each successful grapple check it makes during successive rounds automatically deals the damage indicated for the attack that established the hold. Otherwise, it deals constriction damage as well (the amount is given in the creature's descriptive text).&nl;Creatures with the grab special attack receive a +4 bonus on combat maneuver checks made to start and maintain a grapple.&nl;Unless otherwise noted, grab can only be used against targets of a size equal to or smaller than the creature with this ability. If the creature can use grab on creatures of other sizes, it is noted in the creature's Special Attacks line.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Grab_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.301",
  Aspects={
    {
      Name="NaturalAttackBonus",
      FormatString="Bite",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Grab_ApplyBite"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "CMB_Grapple",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Light Blindness",
  Key="Universal Monster Rule ~ Light Blindness",
  Category="Special Ability",
  Description={
    Format="Creatures with light blindness are blinded for 1 round if exposed to bright light, such as sunlight or the daylight spell. Such creatures are dazzled as long as they remain in areas of bright light.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_LightBlindness_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.301",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
  },
})
DefineAbility({
  Name="Light Sensitivity",
  Key="Universal Monster Rule ~ Light Sensitivity",
  Category="Special Ability",
  Description={
    Format="Creatures with light sensitivity are dazzled in areas of bright sunlight or within the radius of a daylight spell.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_LightSensitivity_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.301",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Extraordinary",
    "Weakness",
  },
})
DefineAbility({
  Name="Paralysis",
  Key="Universal Monster Rule ~ Paralysis (Extraordinary)",
  Category="Special Ability",
  Description={
    Format="This special attack renders the victim immobile. Paralyzed creatures cannot move, speak, or take any physical actions. The creature is rooted to the spot, frozen and helpless. Paralysis works on the body, and a character can usually resist it with a Fortitude saving throw (DC %1). Unlike hold person and similar effects, a paralysis effect does not allow a new save each round. A winged creature flying in the air at the time that it is paralyzed cannot flap its wings and falls. A swimmer can't swim and may drown. The duration of the paralysis varies and is included in the creature's description.",
    Arguments={
      Formula("UMR_Paralysis_DC"),
    },
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Paralysis_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Paralysis",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(1 round, DC %1)",
      Arguments={
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] == 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds, DC %2)",
      Arguments={
        "UMR_Paralysis_DurationBonus",
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] > 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 rounds, DC %3)",
      Arguments={
        "UMR_Paralysis_DurationDice",
        "UMR_Paralysis_DurationDieSize",
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] == 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3 rounds, DC %4)",
      Arguments={
        "UMR_Paralysis_DurationDice",
        "UMR_Paralysis_DurationDieSize",
        "UMR_Paralysis_DurationBonus",
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] >= 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Variables={
        "UMR_Paralysis_DC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Special Attack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Paralysis",
  Key="Universal Monster Rule ~ Paralysis (Supernatural)",
  Category="Special Ability",
  Description={
    Format="This special attack renders the victim immobile. Paralyzed creatures cannot move, speak, or take any physical actions. The creature is rooted to the spot, frozen and helpless. Paralysis works on the body, and a character can usually resist it with a Fortitude saving throw (DC %1). Unlike hold person and similar effects, a paralysis effect does not allow a new save each round. A winged creature flying in the air at the time that it is paralyzed cannot flap its wings and falls. A swimmer can't swim and may drown. The duration of the paralysis varies and is included in the creature's description.",
    Arguments={
      Formula("UMR_Paralysis_DC"),
    },
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Paralysis_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Paralysis",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(1 round, DC %1)",
      Arguments={
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] == 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds, DC %2)",
      Arguments={
        "UMR_Paralysis_DurationBonus",
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] > 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1d%2 rounds, DC %3)",
      Arguments={
        "UMR_Paralysis_DurationDice",
        "UMR_Paralysis_DurationDieSize",
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] == 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1d%2+%3 rounds, DC %4)",
      Arguments={
        "UMR_Paralysis_DurationDice",
        "UMR_Paralysis_DurationDieSize",
        "UMR_Paralysis_DurationBonus",
        "UMR_Paralysis_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Paralysis_DurationBonus"] >= 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Variables={
        "UMR_Paralysis_DC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Poison",
  Key="Universal Monster Rule ~ Poison (Extraordinary)",
  Category="Special Ability",
  Description={
    Format="A creature with this ability can poison those it attacks. The effects of the poison, including its save, frequency, and cure, are included in the creature's description. The saving throw to resist a poison is usually a Fort save (DC 10 + 1/2 poisoning creature's racial HD + creature's Con modifier; the exact DC is given in the creature's descriptive text). Poisons can be removed through neutralize poison and similar effects.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Poison_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "UMR_Poison_DC",
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Bite",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Poison_ApplyBite"] == 1)
        end,
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Claw",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Poison_ApplyClaw"] == 1)
        end,
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Sting",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Poison_ApplySting"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("PoisonSaveDC"),
      Variables={
        "UMR_Poison_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "Special Ability",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Poison",
  Key="Universal Monster Rule ~ Poison (Supernatural)",
  Category="Special Ability",
  Description={
    Format="A creature with this ability can poison those it attacks. The effects of the poison, including its save, frequency, and cure, are included in the creature's description. The saving throw to resist a poison is usually a Fort save (DC 10 + 1/2 poisoning creature's racial HD + creature's Con modifier; the exact DC is given in the creature's descriptive text). Poisons can be removed through neutralize poison and similar effects.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Poison_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.302",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "UMR_Poison_DC",
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Bite",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Poison_ApplyBite"] == 1)
        end,
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Claw",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Poison_ApplyClaw"] == 1)
        end,
      },
    },
    {
      Name="NaturalAttackBonus",
      FormatString="Sting",
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Poison_ApplySting"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("PoisonSaveDC"),
      Variables={
        "UMR_Poison_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "Special Ability",
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Stench",
  Key="Universal Monster Rule ~ Stench",
  Category="Special Ability",
  Description={
    Format="A creature with the stench special ability secretes an oily chemical that nearly every other creature finds offensive. All living creatures (except those with the stench special ability) within %1 feet must succeed on a Fortitude save (DC %2) or be sickened. The duration of the sickened condition is given in the creature's descriptive text. Creatures that successfully save cannot be affected by the same creature's stench for 24 hours. A delay poison or neutralize poison spell removes the effect from the sickened creature. Creatures with immunity to poison are unaffected, and creatures resistant to poison receive their normal bonus on their saving throws.",
    Arguments={
      Formula("UMR_Stench_Range"),
      Formula("UMR_Stench_DC"),
    },
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Stench_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.304",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Stench",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2 rounds)",
      Arguments={
        "UMR_Stench_DC",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] == 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3 rounds)",
      Arguments={
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] == 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3+%4 rounds)",
      Arguments={
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] == 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2, %3 rounds)",
      Arguments={
        "UMR_Stench_Range",
        "UMR_Stench_DC",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] ~= 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2, %3d%4 rounds)",
      Arguments={
        "UMR_Stench_Range",
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] ~= 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2, %3d%4+%5 rounds)",
      Arguments={
        "UMR_Stench_Range",
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] ~= 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2 minutes)",
      Arguments={
        "UMR_Stench_DC",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] == 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] <= 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3 minutes)",
      Arguments={
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] == 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] <= 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %1, %2d%3+%4 minutes)",
      Arguments={
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] == 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] <= 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2, %3 minutes)",
      Arguments={
        "UMR_Stench_Range",
        "UMR_Stench_DC",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] ~= 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] <= 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2, %3d%4 minutes)",
      Arguments={
        "UMR_Stench_Range",
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] ~= 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] <= 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 ft., DC %2, %3d%4+%5 minutes)",
      Arguments={
        "UMR_Stench_Range",
        "UMR_Stench_DC",
        "UMR_Stench_DurationDice",
        "UMR_Stench_DurationDieSize",
        "UMR_Stench_DurationBonus",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Stench_Range"] ~= 30)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDice"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationDieSize"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationBonus"] >= 1)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeRounds"] <= 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Stench_DurationTypeMinutes"] >= 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("30"),
      Variables={
        "UMR_Stench_Range",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(HD/2)+CON"),
      Variables={
        "UMR_Stench_DC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
    "Aura",
  },
})
DefineAbility({
  Name="Telepathy",
  Key="Universal Monster Rule ~ Telepathy",
  Category="Special Ability",
  Description={
    Format="The creature can mentally communicate with any other creature within a certain range (specified in the creature's entry, usually 100 feet) that has a language. It is possible to address multiple creatures at once telepathically, although maintaining a telepathic conversation with more than one creature at a time is just as difficult as simultaneously speaking and listening to multiple people at the same time.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Telepathy_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.305",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1 ft.",
      Arguments={
        "UMR_Telepathy_Range",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("100"),
      Variables={
        "UMR_Telepathy_Range",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Supernatural",
    "Communicate",
  },
})
DefineAbility({
  Name="Trip",
  Key="Universal Monster Rule ~ Trip",
  Category="Special Ability",
  Description={
    Format="A creature with the trip special attack can attempt to trip its opponent as a free action without provoking an attack of opportunity if it hits with the specified attack. If the attempt fails, the creature is not tripped in return.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Trip_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.305",
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Whirlwind",
  Key="Universal Monster Rule ~ Whirlwind",
  Category="Special Ability",
  Description={
    Format="Some creatures can transform themselves into whirlwinds and remain in that form for up to 1 round for every 2 HD they have. If the creature has a fly speed, it can continue to fly at that same speed while in whirlwind form, otherwise it gains a fly speed equal to its base land speed (average maneuverability) while in whirlwind form.&nl;The whirlwind is always 5 feet wide at its base, but its height and width at the top vary from creature to creature (minimum 10 feet high). A whirlwind's width at its peak is always equal to half of its height. The creature controls the exact height, but it must be at least 10 feet high.&nl;The whirlwind form does not provoke attacks of opportunity, even if the creature enters the space another creature occupies. Another creature might be caught in the whirlwind if it touches or enters the whirlwind, or if the whirlwind moves into or through a creature's space. A creature in whirlwind form cannot make its normal attacks and does not threaten the area around it.&nl;Creatures one or more size categories smaller than the whirlwind might take damage when caught in the whirlwind (generally damage equal to the monster's slam attack for a creature of its size) and may be lifted into the air. An affected creature must succeed on a Reflex save (DC 10 + half monster's HD + the monster's Strength modifier) when it comes into contact with the whirlwind or take damage as if it were hit by the whirlwind creature's slam attack. It must also succeed on a second Reflex save or be picked up bodily and held suspended in the powerful winds, automatically taking the indicated damage each round. A creature that can fly is allowed a Reflex save each round to escape the whirlwind. The creature still takes damage but can leave if the save is successful.&nl;Creatures trapped in the whirlwind cannot move except to go where the whirlwind carries them or to escape the whirlwind. Trapped creatures can otherwise act normally, but must succeed on a concentration check (DC 15 + spell level) to cast a spell. Creatures caught in the whirlwind take a -4 penalty to Dexterity and a -2 penalty on attack rolls. The whirlwind can have only as many creatures trapped inside at one time as will fit inside the whirlwind's volume. The whirlwind can eject any carried creatures whenever it wishes as a free action, depositing them in its space.&nl;If the whirlwind's base touches the ground, it creates a swirling cloud of debris. This cloud is centered on the creature and has a diameter equal to half the whirlwind's height. The cloud obscures all vision, including darkvision, beyond 5 feet. Creatures 5 feet away have concealment, while those farther away have total concealment. Those caught in the cloud of debris must succeed on a concentration check (DC 15 + spell level) to cast a spell.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Whirlwind_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.307",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Whirlwind",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(at will, 10-%1 ft. high, %2d%3+%4 damage, DC %5)",
      Arguments={
        "UMR_Whirlwind_Height",
        "UMR_Whirlwind_DamageDice",
        "UMR_Whirlwind_DamageDieSize",
        "UMR_Whirlwind_DamageBonus",
        "UMR_Whirlwind_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Whirlwind_Times"] == 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1/day, 10-%2 ft. high, %3d%4+%5 damage, DC %6)",
      Arguments={
        "UMR_Whirlwind_Times",
        "UMR_Whirlwind_Height",
        "UMR_Whirlwind_DamageDice",
        "UMR_Whirlwind_DamageDieSize",
        "UMR_Whirlwind_DamageBonus",
        "UMR_Whirlwind_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Whirlwind_Times"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(DC %5)",
      Arguments={
        "UMR_Whirlwind_DC",
      },
      Conditions={
        function (character, item)
          return (character.Variables["UMR_Whirlwind_Times"] == 0)
        end,
        function (character, item)
          return (character.Variables["UMR_Whirlwind_DamageDice"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(HD,CompanionHD)/2"),
      Variables={
        "UMR_Whirlwind_Duration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(max(HD,CompanionHD)/2)+STR"),
      Variables={
        "UMR_Whirlwind_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Whirlwind)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "UMR_Whirlwind_DC",
      },
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 acid damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponAcid"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 cold damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponCold"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 fire damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponFire"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 electricity damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponElectricity"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 acid damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponAcid"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 cold damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponCold"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 fire damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponFire"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. cone, %2d%3 electricity damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponCone",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BrBreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponElectricity"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponCone"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 acid damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponAcid"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 cold damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponCold"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 fire damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponFire"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 electricity damage, Reflex DC %4 for half, usable every %5d%6 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeDice",
        "BreathWeaponRechargeDieType",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponElectricity"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] == 0)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 acid damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponAcid"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 cold damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponCold"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 fire damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BreathWeaponDC",
        "BreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponFire"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Universal Monster Rule ~ Breath Weapon",
  Category="Special Ability",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1-ft. line, %2d%3 electricity damage, Reflex DC %4 for half, usable every %5 rounds)",
      Arguments={
        "BreathWeaponLine",
        "BreathWeaponDice",
        "BreathWeaponDamageDie",
        "BrBreathWeaponRechargeRounds",
      },
      Conditions={
        function (character, item)
          return (character.Variables["bBreathWeaponElectricity"] == 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponRechargeRounds"] >= 1)
        end,
        function (character, item)
          return (character.Variables["BreathWeaponLine"] >= 1)
        end,
      },
    },
  },
})
SetSource({
  SourceLong="Bestiary 2",
  SourceShort="B2",
  SourceWeb="http://paizo.com/store/byCompany/p/paizoPublishingLLC/pathfinder/pathfinderRPG/v5748btpy8ddb",
  SourceDate="2010-12",
})
DefineAbility({
  Name="Attach",
  Key="Universal Monster Rule ~ Attach",
  Category="Special Ability",
  Description={
    Format="The creature automatically latches onto its target when it successfully makes the listed attack. The creature is considered grappling, but the target is not. The target can attack or grapple the creature as normal, or break the attach with a successful grapple or Escape Artist check. Most creatures with this ability have a racial bonus to maintain a grapple (listed in its CMB entry).",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Attach_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.294",
  Types={
    "Universal Monster Rule",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Earth Glide",
  Key="Universal Monster Rule ~ Earth Glide",
  Category="Special Ability",
  Description={
    Format="When the creature burrows, it can pass through stone, dirt, or almost any other sort of earth except metal as easily as a fish swims through water. If protected against fire damage, it can even glide through lava. Its burrowing leaves behind no tunnel or hole, nor does it create any ripple or other sign of its presence. A move earth spell cast on an area containing the burrowing creature flings it back 30 feet, stunning it for 1 round unless it succeeds on a DC 15 Fortitude save.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_EarthGlide_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.296",
  Aspects={
    {
      Name="Speed",
      FormatString="Earth Glide",
    },
  },
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="See in Darkness",
  Key="Universal Monster Rule ~ See in Darkness",
  Category="Special Ability",
  Description={
    Format="The creature can see perfectly in darkness of any kind, including that created by deeper darkness.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_SeeInDarkness_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.301",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Supernatural",
    "Sense",
    "Vision",
  },
  Visions={
    {
      Conditions={
        function (character, item)
          return (character.Variables["UMR_SeeInDarkness_Range"] == 0)
        end,
      },
      Kind={
        "See in Darkness",
      },
    },
    {
      Conditions={
        function (character, item)
          return (character.Variables["UMR_SeeInDarkness_Range"] >= 0)
        end,
      },
      Kind={
        "See in Darkness (UMR_SeeInDarkness_Range)",
      },
    },
  },
})
SetSource({
  SourceLong="Bestiary 4",
  SourceShort="B4",
  SourceWeb="http://paizo.com/products/btpy91ds?Pathfinder-Roleplaying-Game-Bestiary-4",
  SourceDate="2013-10",
})
DefineAbility({
  Name="Darkvision",
  Key="Universal Monster Rule ~ Darkvision (Extraordinary)",
  Category="Special Ability",
  Description={
    Format="A creature with darkvision can see in total darkness, to a range of %1 feet. Within this range, the creature can see as clearly as a sighted creature could see in an area of bright light. Darkvision is black and white only but is otherwise like normal sight.",
    Arguments={
      Formula("UMR_DarkvisionEx_Range"),
    },
    Conditions={
      function (character, item)
        return (character.Variables["UMR_DarkvisionEx_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.292",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Extraordinary",
    "Sense",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Darkvision (UMR_DarkvisionEx_Range)",
      },
    },
  },
})
DefineAbility({
  Name="Darkvision",
  Key="Universal Monster Rule ~ Darkvision (Supernatural)",
  Category="Special Ability",
  Description={
    Format="A creature with darkvision can see in total darkness, to a range of %1 feet. Within this range, the creature can see as clearly as a sighted creature could see in an area of bright light. Darkvision is black and white only but is otherwise like normal sight.",
    Arguments={
      Formula("UMR_DarkvisionSu_Range"),
    },
    Conditions={
      function (character, item)
        return (character.Variables["UMR_DarkvisionSu_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.292",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Supernatural",
    "Sense",
    "Vision",
  },
  Visions={
    {
      Kind={
        "Darkvision (UMR_DarkvisionSu_Range)",
      },
    },
  },
})
SetSource({
  SourceLong="Bestiary 6",
  SourceShort="B6",
  SourceWeb="https://paizo.com/products/btpy9r1y",
  SourceDate="2017-05",
})
DefineAbility({
  Name="Ferocity",
  Key="Universal Monster Rule ~ Ferocity",
  Category="Special Ability",
  Description={
    Format="The creature remains conscious and can continue fighting even if its hit point total is below 0. The creature is still staggered and loses 1 hit point each round. A creature with ferocity still dies when its hit point total reaches a negative amount equal to its Constitution score.",
    Conditions={
      function (character, item)
        return (character.Variables["UMR_Ferocity_SpecificDesc"] == 0)
      end,
    },
  },
  SourcePage="p.293",
  Types={
    "Universal Monster Rule",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
