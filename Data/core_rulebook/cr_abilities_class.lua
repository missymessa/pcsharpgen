-- Converted From LST file data\pathfinder\paizo\roleplaying_game\core_rulebook\cr_abilities_class.lst
-- From repository https://github.com/pcgen/pcgen at commit 11ceb52482855f2e5f0f6c108c3dc665b12af237
SetSource({
  SourceLong="Core Rulebook",
  SourceShort="CR",
  SourceWeb="http://paizo.com/store/downloads/pathfinder/pathfinderRPG/v5748btpy88yj",
  SourceDate="2009-08",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.PcLevel >= 1
        end,
      },
      Variables={
        "Favored Class",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.IsAlignment("LE") or character.IsAlignment("NE") or character.IsAlignment("CE") or character.Diety.Alignment == "LE" or character.Diety.Alignment == "NE" or character.Diety.Alignment == "CE" and (character.Variables["BypassProhibitSpellAlignment_Restriction"] == 0)
        end,
      },
      Variables={
        "ProhibitSpell_Alignment_Good",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.IsAlignment("LG") or character.IsAlignment("NG") or character.IsAlignment("CG") or character.Diety.Alignment == "LG" or character.Diety.Alignment == "NG" or character.Diety.Alignment == "CG" and (character.Variables["BypassProhibitSpellAlignment_Restriction"] == 0)
        end,
      },
      Variables={
        "ProhibitSpell_Alignment_Evil",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.IsAlignment("CG") or character.IsAlignment("CN") or character.IsAlignment("CE") or character.Diety.Alignment == "CG" or character.Diety.Alignment == "CN" or character.Diety.Alignment == "CE" and (character.Variables["BypassProhibitSpellAlignment_Restriction"] == 0)
        end,
      },
      Variables={
        "ProhibitSpell_Alignment_Lawful",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.IsAlignment("LG") or character.IsAlignment("LN") or character.IsAlignment("LE") or character.Diety.Alignment == "LG" or character.Diety.Alignment == "LN" or character.Diety.Alignment == "LE" and (character.Variables["BypassProhibitSpellAlignment_Restriction"] == 0)
        end,
      },
      Variables={
        "ProhibitSpell_Alignment_Chaotic",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BypassClassAlignment_All_Class"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Barbarian",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BypassClassAlignment_All_Class"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Druid",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BypassClassAlignment_All_Class"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Monk",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Bypass",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("MonkAlignment") then return true end
            return false
          end)
        end,
      },
      Variables={
        "BypassClassAlignment_Monk",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BypassClassAlignment_All_Class"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Paladin",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BypassClassAlignment_All_Class"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Arcane_Trickster",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BypassClassAlignment_All_Class"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Assassin",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Damage Reduction ~ All",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ClassFeatureDR_ALL"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Damage Reduction ~ Silver",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ClassFeatureDR_Silver"] >= 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Damage Reduction ~ All",
  Category="Internal",
  DamageReduction={
    Value="ClassFeatureDR_ALL/-",
  },
})
DefineAbility({
  Name="Damage Reduction ~ Silver",
  Category="Internal",
  DamageReduction={
    Value="ClassFeatureDR_Silver/-",
  },
})
DefineAbility({
  Name="Barbarian",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BarbarianLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Bard",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BardLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Cleric",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("ClericLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Druid",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("DruidLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Fighter",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("FighterLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Monk",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("MonkLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Paladin",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("PaladinLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Ranger",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("RangerLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Rogue",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("RogueLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Sorcerer",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("SorcererLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Wizard",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("WizardLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Adept",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("AdeptLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Aristocrat",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("AristocratLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Commoner",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("CommonerLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Expert",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("ExpertLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Warrior",
  Category="Special Ability",
  AllowMultiple=false,
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("WarriorLVL"),
      Variables={
        "Favored Class Bonus",
      },
    },
  },
  Types={
    "FavoredClass",
  },
})
DefineAbility({
  Name="Tracker ~ Favored Class Bonus",
  Category="Internal",
})
DefineAbility({
  Name="Bonus Hit Point",
  Key="Favored Class Bonus ~ Hit Point",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="HP",
      Formula=Formula("1"),
      Variables={
        "CURRENTMAX",
      },
    },
  },
  Types={
    "FavoredClassBonus",
  },
})
DefineAbility({
  Name="Bonus Skill Rank",
  Key="Favored Class Bonus ~ Skill Rank",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSkill(function (character, skill)
      return ((not (character.Ranks(skill) >= character.MaxSkillRank) and (((skill.IsType("Base"))))))
    end),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="SKILLRANK",
      Formula=Formula("1"),
      Variables={
        "LIST",
      },
    },
  },
  Types={
    "FavoredClassBonus",
  },
})
DefineAbility({
  Name="Barbarian",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Barbarian",
      },
    },
    {
      Category="Class",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Standard Class",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "CLASS" then return false end
            if ability.IsAnyType("AltBarbarianChoice") then return true end
            return false
          end))
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Barbarian_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Bard",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Bard",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BardLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Bard_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Cleric Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Cleric",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Cleric",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ClericLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Cleric_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Druid",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Druid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DruidLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Druid_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Fighter",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Fighter",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FighterLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Fighter_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Monk",
  Category="Class",
  Abilities={
    {
      Category="Class",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Standard Class",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "CLASS" then return false end
            if ability.IsAnyType("AltMonkChoice") then return true end
            return false
          end))
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Monk_CFP_Level",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "MonkFeatQualify",
      },
    },
  },
})
DefineAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Paladin",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Paladin",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Paladin_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Ranger",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Ranger",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Ranger_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Rogue",
  Category="Class",
  Abilities={
    {
      Category="Rogue Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Rogue",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Rogue",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_ClassSkills"] == 0)
        end,
      },
    },
    {
      Category="Class",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Standard Class",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "CLASS" then return false end
            if ability.IsAnyType("AltRogueChoice") then return true end
            return false
          end))
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Rogue_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer",
  Category="Class",
  Abilities={
    {
      Category="Sorcerer Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Sorcerer",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer ~ Class Skills",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("SorcererLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Wizard",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WizardLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Wizard_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Arcane Archer",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneArcherLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "ArcaneArcher_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Arcane Trickster",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneTricksterLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "ArcaneTrickster_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Assassin",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AssassinLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Assassin_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Disciple",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DragonDiscipleLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "DragonDisciple_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Duelist",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DuelistLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Duelist_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Eldritch Knight",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("EldritchKnightLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "EldritchKnight_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Loremaster",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("LoremasterLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Loremaster_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Mystic Theurge",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("MysticTheurgeLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "MysticTheurge_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("PathfinderChroniclerLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "PathfinderChronicler_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Shadowdancer",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ShadowdancerLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Shadowdancer_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Adept",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AdeptLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Adept_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Aristocrat",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AristocratLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Aristocrat_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Commoner",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CommonerLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Commoner_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Expert",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ExpertLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Expert_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Warrior",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WarriorLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Warrior_CFP_Level",
      },
    },
  },
})
DefineAbility({
  Name="Standard Barbarian",
  Key="Empty Selection ~ Standard Barbarian",
  Category="Class",
  Types={
    "Barbarian Class Selection",
  },
})
DefineAbility({
  Name="Standard Monk",
  Key="Empty Selection ~ Standard Monk",
  Category="Class",
  Types={
    "Monk Class Selection",
  },
})
DefineAbility({
  Name="Standard Rogue",
  Key="Empty Selection ~ Standard Rogue",
  Category="Class",
  Types={
    "Rogue Class Selection",
  },
})
DefineAbility({
  Name="Standard Barbarian",
  Key="Barbarian ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Barbarian",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_ClassSkills"] == 0)
        end,
      },
    },
    {
      Category="Class",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Standard Class Full",
      },
      Conditions={
        function (character, item, sources)
          return not (((character.GetLevelOfClass("Ex-Barbarian") >= 1)) >= 1) or (character.Variables["Class_BarbarianExClass"] == 0)
        end,
      },
    },
    {
      Category="Class",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Standard Ex-Class",
      },
      Conditions={
        function (character, item, sources)
          return ((character.GetLevelOfClass("Ex-Barbarian") >= 1)) >= 1 or (character.Variables["Class_BarbarianExClass"] == 1)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Standard Monk",
  Key="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Archetype",
      Nature="AUTOMATIC",
      Names={
        "Archetype Monk",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Class Skills ~ Monk",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_ClassSkills"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("classlevel(\"Monk\",\"APPLIEDAS=NONEPIC\")*3/4"),
      Type={
        Name="Base",
        Replace=true,
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UseAlternateBABProgression"] == 0)
        end,
      },
      Variables={
        "BASEAB",
      },
    },
    {
      Category="SAVE",
      Formula=Formula("classlevel(\"Monk\",\"APPLIEDAS=NONEPIC\")/2+2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["UseAlternateSaveProgression"] == 0)
        end,
      },
      Variables={
        "BASE.Fortitude",
        "BASE.Reflex",
        "BASE.Will",
      },
    },
    {
      Category="VAR",
      Formula=Formula("classlevel(\"Monk\",\"APPLIEDAS=NONEPIC\")"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["UseFractionalBAB"] == 1)
        end,
      },
      Variables={
        "ClassBABModerate",
      },
    },
    {
      Category="VAR",
      Formula=Formula("classlevel(\"Monk\",\"APPLIEDAS=NONEPIC\")"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["UseFractionalSave"] == 1)
        end,
      },
      Variables={
        "ClassSaveGood_Fortitude",
      },
    },
    {
      Category="VAR",
      Formula=Formula("classlevel(\"Monk\",\"APPLIEDAS=NONEPIC\")"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["UseFractionalSave"] == 1)
        end,
      },
      Variables={
        "ClassSaveGood_Reflex",
      },
    },
    {
      Category="VAR",
      Formula=Formula("classlevel(\"Monk\",\"APPLIEDAS=NONEPIC\")"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["UseFractionalSave"] == 1)
        end,
      },
      Variables={
        "ClassSaveGood_Will",
      },
    },
  },
  Templates={
    "Monk HD d8",
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Standard Rogue",
  Key="Rogue ~ Standard Class",
  Category="Class",
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
})
DefineAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Proficiencies"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
        "Weapon Prof ~ Simple",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Weapon_Proficiencies"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Types={
        "ArmorProfMedium",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Armor_Proficiencies"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Uncanny Dodge Tracker",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Rage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Rage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Fast Movement",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_FastMovement"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Rage Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePowers"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Trap Sense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Damage Reduction",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Greater Rage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_GreaterRage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 11)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Indomitable Will",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_IndomitableWill"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 14)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Tireless Rage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TirelessRage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 17)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Class Full",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Mighty Rage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_MightyRage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 20)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Proficiencies"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
        "Weapon Prof ~ Simple",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Weapon_Proficiencies"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Types={
        "ArmorProfMedium",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_Armor_Proficiencies"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Fast Movement",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_FastMovement"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Trap Sense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Damage Reduction",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Standard Ex-Class",
  Category="Class",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Indomitable Will",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_IndomitableWill"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CFP_Level"] >= 14)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Unarmed Strike",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_UnarmedStrike"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Flurry of Blows",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_FlurryOfBlows"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Monk Bonus Feat",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ AC Bonus",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_ACBonus"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Stunning Fist",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_StunningFist"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Evasion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_Evasion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Fast Movement",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_FastMovement"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Maneuver Training",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_ManeuverTraining"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Still Mind",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_StillMind"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Ki Pool",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_KiPool"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Slow Fall",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ High Jump",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_HighJump"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Purity of Body",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_PurityOfBody"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Wholeness of Body",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_WholenessOfBody"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Improved Evasion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_ImprovedEvasion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Diamond Body",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_DiamondBody"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 11)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Abundant Step",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_AbundantStep"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 12)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Diamond Soul",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_DiamondSoul"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 13)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Quivering Palm",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_QuiveringPalm"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 15)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Tongue of the Sun and Moon",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_TongueOfTheSunAndMoon"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 17)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Timeless Body",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_TimelessBody"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 17)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Empty Body",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_EmptyBody"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 19)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Monk Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Perfect Self",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_PerfectSelf"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CFP_Level"] >= 20)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Sneak Attack",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_SneakAttack"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Trapfinding",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_Trapfinding"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Evasion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_Evasion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Rogue Talents",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalents"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Trap Sense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_TrapSense"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Uncanny Dodge Tracker",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_UncannyDodge"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Standard Class",
  Category="Class",
  Abilities={
    {
      Category="Rogue Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Master Strike",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Rogue_CF_MasterStrike"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CFP_Level"] >= 20)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Bardic Knowledge",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_BardicKnowledge"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Bardic Countersong",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_CounterSong"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Bardic Performance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_BardicPerformance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Armored Casting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_ArmoredCasting"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Cantrips",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_Cantrips"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Versatile Performance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_VersatilePerformance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Well-Versed",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_WellVersed"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Lore Master",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_LoreMaster"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Bard",
  Category="Class",
  Abilities={
    {
      Category="Bard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Jack of All Trades",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_JackOfAllTrades"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Cleric Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Aura",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Cleric Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Channel Energy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CF_ChannelEnergy"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Cleric_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Cleric Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Orisons",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CF_Orisons"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Cleric_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Cleric Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Spontaneous Casting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CF_SpontaneousCasting"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Cleric_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Cleric",
  Category="Class",
  Abilities={
    {
      Category="Cleric Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Cleric ~ Domains",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Cleric_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Orisons",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Spontaneous Casting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_SpontaneousCasting"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Nature Sense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_NatureSense"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Wild Empathy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_WildEmpathy"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Nature Bond",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_NatureBond"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Woodland Stride",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_WoodlandStride"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Trackless Step",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_TracklessStep"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Wild Shape",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_WildShape"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Resist Nature's Lure",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_ResistNaturesLure"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Venom Immunity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_VenomImmunity"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ A Thousand Faces",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_AThousandFaces"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 13)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Druid",
  Category="Class",
  Abilities={
    {
      Category="Druid Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Druid ~ Timeless Body",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Druid_CF_TimelessBody"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Druid_CFP_Level"] >= 15)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Weapon and Armor Proficiency ~ Fighter",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterWeaponProficiencies", "FighterArmorProficiencies", "FighterHeavyArmorProficiency", "FighterMediumArmorProficiency", "FighterLightArmorProficiency", "FighterShieldProficiency", "FighterTowerShieldProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
        "Weapon Prof ~ Simple",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterWeaponProficiencies") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Heavy",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterArmorProficiencies", "FighterHeavyArmorProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Medium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterArmorProficiencies", "FighterMediumArmorProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterArmorProficiencies", "FighterLightArmorProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterArmorProficiencies", "FighterShieldProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof ~ Tower",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("FighterArmorProficiencies", "FighterTowerShieldProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fighter Level Advanced Feat Tracker",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Weapon Specialization Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Disruptive Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Greater Shield Focus Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Greater Weapon Focus Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Spellbreaker Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Greater Weapon Specialization Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Penetrating Strike Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Critical Mastery Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Greater Penetrating Strike Qualify",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FighterLVL"),
      Type={
        Name="Class",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 2)
        end,
      },
      Variables={
        "BraveryLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FighterLVL"),
      Type={
        Name="Class",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 3)
        end,
      },
      Variables={
        "ArmorTrainingLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FighterLVL"),
      Type={
        Name="Class",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 5)
        end,
      },
      Variables={
        "FighterWeaponTrainingLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FighterLVL"),
      Type={
        Name="Class",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
      Variables={
        "FighterWeaponQualifyLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Fighter ~ Bonus Feats",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeats"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Fighter ~ Bravery",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_Bravery"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Fighter ~ Armor Training",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ArmorTraining"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Fighter ~ Weapon Training",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_WeaponTraining"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Abilities={
    {
      Category="Fighter Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Fighter ~ Armor Mastery",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ArmorMastery"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 19)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Fighter",
  Category="Class",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterWeaponMastery"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_WeaponMastery"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CFP_Level"] >= 20)
        end,
      },
      Variables={
        "Weapon Mastery",
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Weapon and Armor Proficiency ~ Paladin",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("PaladinWeaponProficiencies", "PaladinArmorProficiency", "PaladinArmorProficiencyHeavy", "PaladinArmorProficiencyLight", "PaladinArmorProficiencyMedium", "PaladinArmorProficiency", "PaladinShieldProf", "PaladinShieldProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
        "Weapon Prof ~ Simple",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("PaladinWeaponProficiencies") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Heavy",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("PaladinArmorProficiency", "PaladinArmorProficiencyHeavy") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("PaladinArmorProficiency", "PaladinArmorProficiencyLight") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Medium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("PaladinArmorProficiency", "PaladinArmorProficiencyMedium") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("PaladinArmorProficiency", "PaladinShieldProf", "PaladinShieldProficiency") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Aura of Good",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_AuraOfGood"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Detect Evil",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_DetectEvil"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Smite Evil",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_SmiteEvil"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Divine Grace",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_DivineGrace"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Lay on Hands",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_LayOnHands"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Aura of Courage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_AuraOfCourage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Divine Health",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_DivineHealth"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Mercy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Channel Positive Energy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_ChannelPositiveEnergy"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Divine Bond",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_DivineBond"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Aura of Resolve",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_AuraOfResolve"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Aura of Justice",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_AuraOfJustice"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 11)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Aura of Faith",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_AuraOfFaith"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 14)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Aura of Righteousness",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_AuraOfRighteousness"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 17)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Paladin",
  Category="Class",
  Abilities={
    {
      Category="Paladin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Paladin ~ Holy Champion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_HolyChampion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CFP_Level"] >= 20)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Favored Enemy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Favored Terrain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredTerrain"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Track",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Track"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Wild Empathy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_WildEmpathy"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Combat Style Feat",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_CombatStyleFeat"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Hunter's Bond",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_HuntersBond"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Woodland Stride",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_WoodlandStride"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Swift Tracker",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_SwiftTracker"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Evasion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Evasion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Quarry",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Quarry"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 11)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Camouflage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Camouflage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 12)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Improved Evasion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Evasion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 16)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Hide in Plain Sight",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_HideInPlainSight"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 17)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Improved Quarry",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Quarry"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 19)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="Ranger Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Master Hunter",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_MasterHunter"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 20)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Ranger",
  Category="Class",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Endurance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Ranger_CF_Endurance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Sorcerer",
  Category="Class",
  Abilities={
    {
      Category="Sorcerer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_WeaponProficiencies"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Sorcerer",
  Category="Class",
  Abilities={
    {
      Category="Sorcerer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer ~ Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_Spells"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Sorcerer",
  Category="Class",
  Abilities={
    {
      Category="Sorcerer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer ~ Standard Bloodline",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_Bloodline"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Sorcerer",
  Category="Class",
  Abilities={
    {
      Category="Sorcerer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer ~ Cantrips",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_Cantrips"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Sorcerer",
  Category="Class",
  Abilities={
    {
      Category="Sorcerer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer ~ Eschew Materials",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_EschewMaterials"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Class Skills",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ClassSkills"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_WeaponProficiencies"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_Spells"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Bonus Languages",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BonusLanguages"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Arcane Bond",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ArcaneBond"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Arcane School",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ArcaneSchool"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Cantrips",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_Cantrips"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Scribe Scroll",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ScribeScroll"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Bonus Feats",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BonusFeats"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Wizard",
  Category="Class",
  Abilities={
    {
      Category="Wizard Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Wizard ~ Spellbooks",
      },
      Conditions={
        function (character, item, sources)
          return character.PcLevel <= 0 and ((character.GetLevelOfClass("Wizard") >= 1)) >= 1 or not (((character.CountSpellCastingClasses(0, "Base"))) >= 1) and ((character.GetLevelOfClass("Wizard") >= 1)) >= 1 or (character.Variables["Wizard_CF_SpellBook"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "All Martial Weapon Proficiencies",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Martial Weapon Proficiency Output",
        "Simple Weapon Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Armor Proficiency (Light)",
        "Armor Proficiency (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Shield Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Archer ~ Enhance Arrow",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Archer ~ Imbue Arrow",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Archer ~ Seeker Arrow",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Archer ~ Phase Arrow",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 6)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Archer ~ Hail of Arrows",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Archer",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Archer ~ Arrow of Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneArcher_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Trickster",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Trickster ~ Ranged Legerdemain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTrickster_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Trickster",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Trickster ~ Sneak Attack",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTrickster_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Trickster",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Trickster ~ Impromptu Sneak Attack",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTrickster_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Trickster",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Trickster ~ Tricky Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTrickster_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Trickster",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Trickster ~ Invisible Thief",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTrickster_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Arcane Trickster",
  Category="Class",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Trickster ~ Surprise Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTrickster_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Death Attack",
        "Assassin ~ Poison Use",
        "Assassin ~ Sneak Attack",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Save against Poisons",
        "Assassin ~ Uncanny Dodge",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Hidden Weapons",
        "Assassin ~ True Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Quiet Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 6)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Hide in Plain Sight",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Swift Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Assassin",
  Category="Class",
  Abilities={
    {
      Category="Assassin Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Assassin ~ Angel of Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Assassin_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Spells per Day",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Blood of Dragons",
        "Dragon Disciple ~ Natural Armor Increase",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Ability Boost",
        "Dragon Disciple ~ Dragon Bite",
        "Dragon Disciple ~ Bloodline Feat",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Breath Weapon",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Blindsense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Dragon Form",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Dragon Disciple",
  Category="Class",
  Abilities={
    {
      Category="Dragon Disciple Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Dragon Disciple ~ Wings",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDisciple_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Canny Defense",
        "Duelist ~ Precise Strike",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Improved Reaction",
        "Duelist ~ Parry",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Enhanced Mobility",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Combat Reflexes",
        "Duelist ~ Grace",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Riposte",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Acrobatic Charge",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 6)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Elaborate Defense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Deflect Arrows",
        "Duelist ~ No Retreat",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 9)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Duelist",
  Category="Class",
  Abilities={
    {
      Category="Duelist Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Duelist ~ Crippling Critical",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Duelist_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Eldritch Knight",
  Category="Class",
  Abilities={
    {
      Category="Eldritch Knight Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Eldritch Knight ~ Bonus Feat",
        "Eldritch Knight ~ Diverse Training",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EldritchKnight_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Eldritch Knight",
  Category="Class",
  Abilities={
    {
      Category="Eldritch Knight Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Eldritch Knight ~ Spell Critical",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EldritchKnight_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Loremaster",
  Category="Class",
  Abilities={
    {
      Category="Loremaster Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Loremaster ~ Secret Lore",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Loremaster_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Loremaster",
  Category="Class",
  Abilities={
    {
      Category="Loremaster Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Loremaster ~ Lore",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Loremaster_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Loremaster",
  Category="Class",
  Abilities={
    {
      Category="Loremaster Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Loremaster ~ Greater Lore",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Loremaster_CFP_Level"] >= 6)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Loremaster",
  Category="Class",
  Abilities={
    {
      Category="Loremaster Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Loremaster ~ True Lore",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Loremaster_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Mystic Theurge",
  Category="Class",
  Abilities={
    {
      Category="Mystic Theurge Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Mystic Theurge ~ Combined Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MysticTheurge_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Mystic Theurge",
  Category="Class",
  Abilities={
    {
      Category="Mystic Theurge Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Mystic Theurge ~ Spell Synthesis",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MysticTheurge_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Bardic Knowledge",
        "Pathfinder Chronicler ~ Deep Pockets",
        "Pathfinder Chronicler ~ Master Scribe",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Live to Tell the Tale",
        "Pathfinder Chronicler ~ Pathfinding",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Bardic Performance",
        "Pathfinder Chronicler ~ Improved Aid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Epic Tales",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Whispering Campaign",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Inspire Action",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 6)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Call down the Legends",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Greater Epic Tales",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Pathfinder Chronicler",
  Category="Class",
  Abilities={
    {
      Category="Pathfinder Chronicler Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Pathfinder Chronicler ~ Lay of the Exalted Dead",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChronicler_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Hide in Plain Sight",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Darkvision",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Evasion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Uncanny Dodge",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 2)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Rogue Talents",
        "Shadowdancer ~ Shadow Illusion",
        "Shadowdancer ~ Summon Shadow",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 3)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Shadow Call",
        "Shadowdancer ~ Shadow Jump",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 4)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Defensive Roll",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 5)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Slippery Mind",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 7)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Shadow Power",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 8)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Shadowdancer",
  Category="Class",
  Abilities={
    {
      Category="Shadowdancer Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Shadowdancer ~ Improved Evasion",
        "Shadowdancer ~ Shadow Master",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Shadowdancer_CFP_Level"] >= 10)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Bypass Paladin Alignment",
  Category="Internal",
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Bypass",
      },
      Variables={
        "BypassClassAlignment_Paladin",
      },
    },
  },
})
DefineAbility({
  Name="Rage",
  Category="Special Ability",
  Description={
    Format="You are using an alternative raging method.",
    Conditions={
      function (character, item, sources)
        return character.HasAnyAbility(function (ability)
          if ability.Category ~= "Special Ability" then return false end
          if ability.IsAnyType("RageSelectionAlt") then return true end
          return false
        end)
      end,
    },
  },
  SourcePage="p.32",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Standard Rage",
      },
    },
  },
  Aspects={
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "RageDuration",
      },
    },
    {
      Name="MasterAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Rage",
    "AttackOption",
  },
})
DefineAbility({
  Name="Standard Rage",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Raging",
      },
    },
    Target="PC",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "RageStrBonus",
        "RageConBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Variables={
        "RageACPenalty",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "RageSaveBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2+var(\"STAT.2.MOD.NOTEMP\")+(2*RageLVL)"),
      Variables={
        "RageDuration",
      },
    },
  },
  Types={
    "RageSelection",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Barbarian ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="A barbarian is proficient with all simple and martial weapons, light armor, medium armor, and shields (except tower shields).",
  },
  Visible=true,
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Fast Movement",
  Key="Barbarian ~ Fast Movement",
  Category="Special Ability",
  Description={
    Format="Your land speed is faster than the norm for your race by +10 feet. This benefit applies only when you are wearing no armor, light armor, or medium armor, and not carrying a heavy load.",
  },
  SourcePage="p.31",
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ENCUMBERANCE"] < 2) and (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
      Variables={
        "TYPE=Walk",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
    "Fast Movement",
  },
})
DefineAbility({
  Name="Rage",
  Key="Barbarian ~ Rage",
  Category="Special Ability",
  Description={
    Format="You can call upon inner reserves of strength and ferocity, granting you additional combat prowess. You can rage for %1 rounds per day. You can enter rage as a free action. The total number of rounds of rage per day is renewed after resting for 8 hours, although these hours do not need to be consecutive. While in rage, you gain a +%2 morale bonus to your Strength and a +%3 morale bonus to Constitution, as well as a +%4 morale bonus on Will saves. In addition, you take a -2 penalty to Armor Class. The increase to Constitution grants you %5 hit points, but these disappear when the rage ends and are not lost first like temporary hit points. While in rage, you cannot use any Charisma-, Dexterity-, or Intelligence-based skills (except Acrobatics, Fly, Intimidate, and Ride) or any ability that requires patience or concentration. You can end your rage as a free action and are fatigued after rage for a number of rounds equal to 2 times the number of rounds spent in the rage. You cannot enter a new rage while fatigued or exhausted but can otherwise enter rage multiple times during a single encounter or combat. If you fall unconscious, your rage immediately ends, placing you in peril of death.",
    Arguments={
      Formula("RageDuration"),
      Formula("RageStrBonus"),
      Formula("RageConBonus"),
      Formula("RageSaveBonus"),
      Formula("(RageConBonus/2)*TL"),
    },
  },
  SourcePage="p.32",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Rage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Variables={
        "RageLVL",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "Rage",
  },
})
DefineAbility({
  Name="Rage Powers",
  Key="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("RagePowersLVL/2"),
      Variables={
        "Rage Power",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RagePowersLVL"),
      Variables={
        "RagePowersPrereqLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Variables={
        "RagePowersLVL",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "Internal",
    "ClassFeatures",
    "Rage Powers",
  },
})
DefineAbility({
  Name="Trap Sense",
  Key="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Trap Sense",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BarbarianTrapSenseLVL/3"),
      Variables={
        "TrapSenseBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Variables={
        "BarbarianTrapSenseLVL",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "Internal",
    "ClassFeatures",
    "Trap Sense",
  },
})
DefineAbility({
  Name="Damage Reduction",
  Key="Barbarian ~ Damage Reduction",
  Category="Special Ability",
  DamageReduction={
    Value="BarbarianDR/-",
  },
  Description={
    Format="You gain damage reduction. Subtract %1 from the damage you take each time you are dealt damage from a weapon or natural attack. Damage reduction can reduce damage to 0 but not below 0.",
    Arguments={
      Formula("BarbarianDR"),
    },
  },
  SourcePage="p.34",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BarbarianDR"),
      Variables={
        "ClassFeatureDR_ALL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(BarbarianDRLVL-4)/3"),
      Variables={
        "BarbarianDR",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Variables={
        "BarbarianDRLVL",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Greater Rage",
  Key="Barbarian ~ Greater Rage",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "RageStrBonus",
        "RageConBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "RageSaveBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "Internal",
    "ClassFeatures",
    "Rage",
    "Greater Rage",
  },
})
DefineAbility({
  Name="Tireless Rage",
  Key="Barbarian ~ Tireless Rage",
  Category="Special Ability",
  Description={
    Format="You no longer become fatigued at the end of your rage.",
  },
  SourcePage="p.34",
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Rage",
    "Tireless Rage",
  },
})
DefineAbility({
  Name="Mighty Rage",
  Key="Barbarian ~ Mighty Rage",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "RageStrBonus",
        "RageConBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "RageSaveBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "Internal",
    "ClassFeatures",
    "Rage",
    "Mighty Rage",
  },
})
DefineAbility({
  Name="Indomitable Will",
  Key="Barbarian ~ Indomitable Will",
  Category="Special Ability",
  Description={
    Format="While in rage, you gain a +4 bonus on Will saves to resist enchantment spells. This bonus stacks with all other modifiers, including the morale bonus on Will saves you also recieve during your rage.",
  },
  SourcePage="p.34",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="When raging gain +4 bonus to Will saves vs. Enchantment spells.",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Rage",
    "Indomitable Will",
  },
})
DefineAbility({
  Name="Uncanny Dodge",
  Key="Barbarian ~ Uncanny Dodge",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Type={
        Name="EachClass",
        Replace=true,
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "Uncanny Dodge",
  },
})
DefineAbility({
  Name="Improved Uncanny Dodge",
  Key="Barbarian ~ Improved Uncanny Dodge",
  Category="Special Ability",
  Types={
    "BarbarianClassFeatures",
    "Uncanny Dodge",
    "Improved Uncanny Dodge",
  },
})
DefineAbility({
  Name="Barbarian ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Types={
    "BarbarianClassFeatures",
  },
})
ModifyAbility({
  Name="Barbarian ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BarbarianLVL"),
      Type={
        Name="EachClass",
        Replace=true,
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_UncannyDodge"] == 0)
        end,
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_UncannyDodge"] == 0)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_ImprovedUncannyDodge"] == 0)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianTrapSenseLVL/3"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense1"] == 1)
        end,
      },
      Variables={
        "TrapSenseBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianTrapSenseLVL/3"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense2"] == 1)
        end,
      },
      Variables={
        "TrapSenseBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianTrapSenseLVL/3"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense3"] == 1)
        end,
      },
      Variables={
        "TrapSenseBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianTrapSenseLVL/3"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense4"] == 1)
        end,
      },
      Variables={
        "TrapSenseBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianTrapSenseLVL/3"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense5"] == 1)
        end,
      },
      Variables={
        "TrapSenseBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Trap Sense",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianTrapSenseLVL/3"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_TrapSense6"] == 1)
        end,
      },
      Variables={
        "TrapSenseBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Damage Reduction",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["(BarbarianDRLVL-4)/3"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction1"] == 1)
        end,
      },
      Variables={
        "BarbarianDR",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Damage Reduction",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["(BarbarianDRLVL-4)/3"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction2"] == 1)
        end,
      },
      Variables={
        "BarbarianDR",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Damage Reduction",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["(BarbarianDRLVL-4)/3"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction3"] == 1)
        end,
      },
      Variables={
        "BarbarianDR",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Damage Reduction",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["(BarbarianDRLVL-4)/3"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction4"] == 1)
        end,
      },
      Variables={
        "BarbarianDR",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Damage Reduction",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["(BarbarianDRLVL-4)/3"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_DamageReduction5"] == 1)
        end,
      },
      Variables={
        "BarbarianDR",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower2"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower4"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower6"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 8)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower8"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower10"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 12)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower12"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 14)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower14"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 16)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower16"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 18)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower18"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
ModifyAbility({
  Name="Barbarian ~ Rage Powers",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RagePowersLVL"] >= 20)
        end,
        function (character, item, sources)
          return (character.Variables["Barbarian_CF_RagePower20"] == 1)
        end,
      },
      Variables={
        "Rage Power",
      },
    },
  },
})
DefineAbility({
  Name="Animal Fury",
  Key="Rage Power ~ Animal Fury",
  Category="Special Ability",
  Description={
    Format="While raging, you gain a bite attack, If uses as a part of a full-attack action, the bite is made at your full base attack bonus-5. If the bite hits, it deals 1d%1+%2 points of damage. You can make a bite attack as part of the action to maintain or break free from a grapple. This attack is resolved before the grapple check is made. If the bite attack hits, any grapple checks you make against the target this round are at a +2 bonus.",
    Arguments={
      Formula("if(SIZE==4,4,3)"),
      Formula("floor(STR/2)"),
    },
  },
  SourcePage="p.32",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("-5"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Variables={
        "TOHIT",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Clear Mind",
  Key="Rage Power ~ Clear Mind",
  Category="Special Ability",
  Description={
    Format="You may reroll a failed Will save. This power is used as an immediate action after the first save is attempted, but before the results are revealed by the GM. You must take the second result, even if it is worse. This power can only be used once per rage.",
  },
  SourcePage="p.32",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 8)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Fearless Rage",
  Key="Rage Power ~ Fearless Rage",
  Category="Special Ability",
  Description={
    Format="While raging, you are immune to the shaken and frightened conditions.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 12)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Increased Damage Reduction",
  Key="Rage Power ~ Increased Damage Reduction",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Description={
    Format="Your damage reduction increases by %1/--. This increase is always active while you are raging.",
    Arguments={
      Formula("IncreasedDRCount"),
    },
  },
  SourcePage="p.33",
  Stackable=true,
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "IncreasedDRCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Variables={
        "BarbarianDR",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 8)
    end,
    function (character, item, sources)
      return (character.Variables["IncreasedDRCount"] < 3)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Guarded Stance",
  Key="Rage Power ~ Guarded Stance",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 dodge bonus to your Armor Class against melee attacks for %2 rounds. Activating this ability is a move action that does not provoke attacks of opportunity.",
    Arguments={
      Formula("GuardedStanceACBonus"),
      Formula("GuardedStanceDuration"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1+RagePowersLVL/6"),
      Variables={
        "GuardedStanceACBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(1,CON)"),
      Variables={
        "GuardedStanceDuration",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Internal Fortitude",
  Key="Rage Power ~ Internal Fortitude",
  Category="Special Ability",
  Description={
    Format="While raging, you are immune to the sickened and nauseated conditions.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 8)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Intimidating Glare",
  Key="Rage Power ~ Intimidating Glare",
  Category="Special Ability",
  Description={
    Format="You can make an Intimidate check against one adjacent foe as a move action. If you successfully demoralize your opponent, the foe is shaken for 1d4 rounds + 1 round for every 5 points by which your check exceeds the DC.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Knockback",
  Key="Rage Power ~ Knockback",
  Category="Special Ability",
  Description={
    Format="Once per round, you can make a bull rush attempt against one target in place of a melee attack. If successful, the target takes %1 points of damage and is moved back as normal. You do not need to move with the target if successful. This does not provoke an attack of opportunity.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Low-Light Vision",
  Key="Rage Power ~ Low-Light Vision",
  Category="Special Ability",
  Description={
    Format="Your senses sharpen and you gain low-light vision while raging.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
  Visions={
    {
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Kind={
        "Low-Light Vision",
      },
    },
  },
})
DefineAbility({
  Name="Mighty Swing",
  Key="Rage Power ~ Mighty Swing",
  Category="Special Ability",
  Description={
    Format="You automatically confirm a critical hit. This power is used as an immediate action once a critical threat has been determined. This power can only be used once per rage.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 12)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Moment of Clarity",
  Key="Rage Power ~ Moment of Clarity",
  Category="Special Ability",
  Description={
    Format="You do not gain any benefits or take any of the penalties from rage for 1 round. This includes the penalty to Armor Class and the restriction on what actions can be performed. This round still counts against your total number of rounds of rage per day. This power can only be used once per rage. Activating this power is a swift action.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Night Vision",
  Key="Rage Power ~ Night Vision",
  Category="Special Ability",
  Description={
    Format="Your senses grow incredibly sharp while raging and you gain darkvision 60 feet.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Rage Power ~ Low-Light Vision" then return true end
        return false
      end) or (character.HasVision("Low-Light Vision"))
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
  Visions={
    {
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Kind={
        "Darkvision (60')",
      },
    },
  },
})
DefineAbility({
  Name="No Escape",
  Key="Rage Power ~ No Escape",
  Category="Special Ability",
  Description={
    Format="You can move up to normal your speed as an immediate action, but you can only use this ability when an adjacent foe uses a withdraw action to move away from you. You must end your movement adjacent to the enemy that used the withdraw action. You provoke attacks of opportunity as normal during this movement. This power can only be used once per rage.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Powerful Blow",
  Key="Rage Power ~ Powerful Blow",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on a single damage roll. This power is used as a swift action before the roll to hit is made. This power can only be used once per rage.",
    Arguments={
      Formula("PowerfulBlowDamageBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1+RagePowersLVL/4"),
      Variables={
        "PowerfulBlowDamageBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Quick Reflexes",
  Key="Rage Power ~ Quick Reflexes",
  Category="Special Ability",
  Description={
    Format="While raging, you can make one additional attack of opportunity per round.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Raging Climber",
  Key="Rage Power ~ Raging Climber",
  Category="Special Ability",
  Description={
    Format="While raging you add a +%1 enhancement bonus to all Climb skill checks.",
    Arguments={
      Formula("RagingClimberBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("RagingClimberBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Variables={
        "Climb",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RagePowersLVL"),
      Variables={
        "RagingClimberBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Raging Leaper",
  Key="Rage Power ~ Raging Leaper",
  Category="Special Ability",
  Description={
    Format="While raging you add a +%1 enhancement bonus to all Acrobatics skill checks made to jump. When making a jump in this way, you are always considered to have a running start.",
    Arguments={
      Formula("RagingLeaperBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="SITUATION",
      Formula=Formula("RagingLeaperBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Variables={
        "Acrobatics=When Jumping",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RagePowersLVL"),
      Variables={
        "RagingLeaperBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Raging Swimmer",
  Key="Rage Power ~ Raging Swimmer",
  Category="Special Ability",
  Description={
    Format="While raging you add a +%1 enhancement bonus to all Swim skill checks.",
    Arguments={
      Formula("RagingSwimmerBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("RagingSwimmerBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Variables={
        "Swim",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RagePowersLVL"),
      Variables={
        "RagingSwimmerBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Renewed Vigor",
  Key="Rage Power ~ Renewed Vigor",
  Category="Special Ability",
  Description={
    Format="As a standard action, you heal %1d8+%2 points of damage. This power is can only be used once per day and only while raging.",
    Arguments={
      Formula("RenewedVigorDice"),
      Formula("RenewedVigorBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(5,max(1,RagePowersLVL/4))"),
      Variables={
        "RenewedVigorDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CON"),
      Variables={
        "RenewedVigorBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 4)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Rolling Dodge",
  Key="Rage Power ~ Rolling Dodge",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 dodge bonus to your Armor Class against ranged attacks for %2 round against ranged attacks. Activating this ability is a move action that does not provoke attacks of opportunity.",
    Arguments={
      Formula("RollingDodgeACBonus"),
      Formula("RollingDodgeDuration"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1+RagePowersLVL/6"),
      Variables={
        "RollingDodgeACBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(1,CON)"),
      Variables={
        "RollingDodgeDuration",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Roused Anger",
  Key="Rage Power ~ Roused Anger",
  Category="Special Ability",
  Description={
    Format="You may enter rage even if fatigued. While raging after using this ability, you rae immune to the fatigued condition. Once this rage ends, you are exhausted for 10 minutes per round spent raging.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Scent",
  Key="Rage Power ~ Scent",
  Category="Special Ability",
  Description={
    Format="You gain the scent ability while raging and can use this ability to locate unseen foes.",
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Strength Surge",
  Key="Rage Power ~ Strength Surge",
  Category="Special Ability",
  Description={
    Format="You add +%1 on one Strength check or combat maneuver check, or to your Combat Maneuver Defense when an opponent attempts a maneuver against you. This power is used as an immediate action. This power can only be used once per rage.",
    Arguments={
      Formula("StrengthSurgeBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RagePowersLVL"),
      Variables={
        "StrengthSurgeBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Superstition",
  Key="Rage Power ~ Superstition",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 morale bonus on saving throws made to resist spells, supernatural abilities, and spell-like abilities. While raging, you cannot be a willing target of any spell and must make saving throws to resist all spells, even those cast by allies.",
    Arguments={
      Formula("SuperstitionSaveBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2+RagePowersLVL/4"),
      Variables={
        "SuperstitionSaveBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Surprise Accuracy",
  Key="Rage Power ~ Surprise Accuracy",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 morale bonus one attack roll. This power is used as a swift action before the roll to hit is made. This power can only be used once per rage.",
    Arguments={
      Formula("SurpriseAccuracyAttackBonus"),
    },
  },
  SourcePage="p.33",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1+RagePowersLVL/4"),
      Variables={
        "SurpriseAccuracyAttackBonus",
      },
    },
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Swift Foot",
  Key="Rage Power ~ Swift Foot",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Description={
    Format="You gain a +%1-foot enhancement bonus to your speed. This increase is always active while you are raging.",
    Arguments={
      Formula("5*SwiftFootCount"),
    },
  },
  SourcePage="p.34",
  Stackable=true,
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("5"),
      Type={
        Name="Enhancement",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Raging"] == 1)
        end,
      },
      Variables={
        "TYPE=Walk",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SwiftFootCount",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["SwiftFootCount"] < 3)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Terrifying Howl",
  Key="Rage Power ~ Terrifying Howl",
  Category="Special Ability",
  Description={
    Format="You unleash a terrifying howl as a standard action. All shaken enemies within 30 feet must make a Will save (DC %1) or be panicked for 1d4+1 rounds. Once an enemy has made a save versus Terrifying Howl (successful or not), it is immune to this power for 24 hours.",
    Arguments={
      Formula("TerrifyingHowlDC"),
    },
  },
  SourcePage="p.34",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(RagePowersLVL/2)+STR"),
      Variables={
        "TerrifyingHowlDC",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Rage Power ~ Intimidating Glare" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 8)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Unexpected Strike",
  Key="Rage Power ~ Unexpected Strike",
  Category="Special Ability",
  Description={
    Format="You can make an attack of opportunity against a foe that moves into any square threatened by you, regardless of whether that movement would normally provoke an attack of opportunity. This power can only be used once per rage.",
  },
  SourcePage="p.34",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Rage",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RagePowersPrereqLVL"] >= 8)
    end,
  },
  Types={
    "BarbarianClassFeatures",
    "ClassFeatures",
    "RagePower",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Armored Casting",
  Key="Bard ~ Armored Casting",
  Category="Special Ability",
  Description={
    Format="You can cast bard spells while wearing light armor and use a shield without incurring the normal arcane spell failure chance.",
  },
  SourcePage="p.35",
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Bardic Knowledge",
  Key="Bard ~ Bardic Knowledge",
  Category="Special Ability",
  Description={
    Format="You add +%1 to all Knowledge checks and may make all Knowledge skill checks untrained.",
    Arguments={
      Formula("BardicKnowledgeSkillBonus"),
    },
  },
  SourcePage="p.35",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("BardicKnowledgeSkillBonus"),
      Variables={
        "TYPE=Knowledge",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(1,BardicKnowledgeLVL/2)"),
      Variables={
        "BardicKnowledgeSkillBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BardLVL"),
      Variables={
        "BardicKnowledgeLVL",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Bardic Knowledge",
  },
})
DefineAbility({
  Name="Bardic Countersong",
  Key="Bard ~ Bardic Countersong",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Countersong",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BardCountersong") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 1)
        end,
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Bardic Performance",
  Key="Bard ~ Bardic Performance",
  Category="Special Ability",
  Description={
    Format="You are trained to use the Perform skill to create magical effects on those around you, including yourself if desired.",
  },
  SourcePage="p.35",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Distraction",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_BardDistraction"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Fascinate",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_Fascinate"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Inspire Courage",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCourage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Inspire Competence",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 3)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Suggestion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_Suggestion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Dirge of Doom",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_DirgeOfDoom"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 8)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Inspire Greatness",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireGreatness"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 9)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Soothing Performance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_SoothingPerformance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 12)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Frightening Tune",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_FrighteningTune"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 14)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Inspire Heroics",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireHeroics"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 15)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Mass Suggestion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_MassSuggestion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 18)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bardic Performance ~ Deadly Performance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Bard_CF_DeadlyPerformance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BardicPerformanceLVL"] >= 20)
        end,
      },
    },
  },
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BardicPerformanceDuration",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per days",
    },
    {
      Name="MasterAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2+CHA+(2*BardicPerformanceLVL)"),
      Variables={
        "BardicPerformanceDuration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BardLVL"),
      Variables={
        "BardicPerformanceLVL",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Cantrips",
  Key="Bard ~ Cantrips",
  Category="Special Ability",
  Description={
    Format="You have learned a number of cantrips, or 0-level spells. These spells are cast like any other spells, but they do not consume any slots and may be used again.",
  },
  SourcePage="p.38",
  Types={
    "BardClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Versatile Performance",
  Key="Bard ~ Versatile Performance",
  Category="Special Ability",
  SourcePage="p.38",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("(VersatilePerformanceLVL+2)/4"),
      Variables={
        "Versatile Performance",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BardLVL"),
      Variables={
        "VersatilePerformanceLVL",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Well-Versed",
  Key="Bard ~ Well-Versed",
  Category="Special Ability",
  Description={
    Format="You have becomes resistant to the Bardic Performance of others, and to sonic effects in general. You gain a +4 bonus on saving throws made against Bardic Performance, sonic, and language-dependent effects.",
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+4 vs. Bardic Performance, sonic, and language-dependent effects",
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Lore Master",
  Key="Bard ~ Lore Master",
  Category="Special Ability",
  Description={
    Format="You have become a master of lore and can take 10 on any Knowledge skill check that you have ranks in. You can choose not to take 10 and can instead roll normally. In addition, %1 times per day, you can take 20 on any Knowledge skill check as a standard action.",
    Arguments={
      Formula("LoreMasterTimes"),
    },
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min((LoreMasterLVL+1)/6,3)"),
      Variables={
        "LoreMasterTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BardLVL"),
      Variables={
        "LoreMasterLVL",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Jack of All Trades",
  Key="Bard ~ Jack of All Trades",
  Category="Special Ability",
  Description={
    Format="You can use any skill, even if the skill normally requires you to be trained. You considers all skills to be class skills. You can take 10 on any skill check, even if it is not normally allowed.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["JackOfAllTradesLVL"] >= 19)
      end,
    },
  },
  SourcePage="p.38",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Jack of All Trades ~ Class Skills",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["JackOfAllTradesLVL"] >= 16)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BardLVL"),
      Variables={
        "JackOfAllTradesLVL",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Jack of All Trades ~ Class Skills",
  Category="Special Ability",
  Visible=false,
  ClassSkills={
    "ALL",
  },
  Types={
    "BardClassFeatures",
    "Internal",
  },
})
ModifyAbility({
  Name="Bard ~ Bardic Performance",
  Category="Special Ability",
  Description={
    Format="You are trained to use the Perform skill to create magical effects on those around you, including yourself if desired. You can use this ability for %1 rounds per day. Each round, you can produce any one of the types of bardic performance that you have mastered. Starting a bardic performance is a standard action, but it can be maintained each round as a free action. Changing a bardic performance from one effect to another requires the bard to stop the previous performance and start a new one as a standard action. A bardic performance cannot be disrupted, but it ends immediately if you are killed, paralyzed, stunned, knocked unconscious, or otherwise prevented from taking a free action to maintain it each round. You cannot have more than one bardic performance in effect at one time.",
    Arguments={
      Formula("BardicPerformanceDuration"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["BardicPerformanceLVL"] < 7)
      end,
    },
  },
})
ModifyAbility({
  Name="Bard ~ Bardic Performance",
  Category="Special Ability",
  Description={
    Format="You are trained to use the Perform skill to create magical effects on those around you, including yourself if desired. You can use this ability for %1 rounds per day. Each round, you can produce any one of the types of bardic performance that you have mastered. Starting a bardic performance is a move action, but it can be maintained each round as a free action. Changing a bardic performance from one effect to another requires the bard to stop the previous performance and start a new one as a move action. A bardic performance cannot be disrupted, but it ends immediately if you are killed, paralyzed, stunned, knocked unconscious, or otherwise prevented from taking a free action to maintain it each round. You cannot have more than one bardic performance in effect at one time.",
    Arguments={
      Formula("BardicPerformanceDuration"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["BardicPerformanceLVL"] >= 7)
      end,
      function (character, item, sources)
        return (character.Variables["BardicPerformanceLVL"] < 13)
      end,
    },
  },
})
ModifyAbility({
  Name="Bard ~ Bardic Performance",
  Category="Special Ability",
  Description={
    Format="You are trained to use the Perform skill to create magical effects on those around you, including yourself if desired. You can use this ability for %1 rounds per day. Each round, you can produce any one of the types of bardic performance that you have mastered. Starting a bardic performance is a swift action, but it can be maintained each round as a free action. Changing a bardic performance from one effect to another requires the bard to stop the previous performance and start a new one as a swift action. A bardic performance cannot be disrupted, but it ends immediately if you are killed, paralyzed, stunned, knocked unconscious, or otherwise prevented from taking a free action to maintain it each round. You cannot have more than one bardic performance in effect at one time.",
    Arguments={
      Formula("BardicPerformanceDuration"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["BardicPerformanceLVL"] >= 13)
      end,
    },
  },
})
DefineAbility({
  Name="Countersong",
  Key="Bardic Performance ~ Countersong",
  Category="Special Ability",
  Description={
    Format="You can counter magic effects that depend on sound (but not spells that have verbal components). Each round of the countersong you make a Perform (keyboard, percussion, wind, string, or sing) skill check. Any creature within 30 feet (including yourself) that is affected by a sonic or language-dependent magical attack may use your Perform check result in place of its saving throw if, after the saving throw is rolled, the Perform check result proves to be higher. If a creature within range of the countersong is already under the effect of a noninstantaneous sonic or language-dependent magical attack, it gains another saving throw against the effect each round it hears the countersong, but it must use your Perform skill check result for the save. Countersong does not work on effects that don't allow saves. Countersong relies on audible components.",
  },
  SourcePage="p.36",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Distraction",
  Key="Bardic Performance ~ Distraction",
  Category="Special Ability",
  Description={
    Format="You can use your performance to counter magic effects that depend on sight. Each round of the distraction, make a Perform (act, comedy, dance, or oratory) skill check. Any creature within 30 feet (including yourself) that is affected by an illusion (pattern) or illusion (figment) magical attack may use your Perform check result in place of its saving throw if, after the saving throw is rolled, the Perform skill check proves to be higher. If a creature within range of the distraction is already under the effect of a noninstantaneous illusion (pattern) or illusion (figment) magical attack, it gains another saving throw against the effect each round it sees the distraction, but it must use your Perform skill check result for the save. Distraction does not work on effects that don't allow saves. Distraction relies on visual components.",
  },
  SourcePage="p.36",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Fascinate",
  Key="Bardic Performance ~ Fascinate",
  Category="Special Ability",
  Description={
    Format="You can use your performance to cause up to %1 creatures to become fascinated with you. Each creature to be fascinated must be within 90 feet, able to see and hear you, and capable of paying attention to you. You must also be able to see the creatures affected. The distraction of a nearby combat or other dangers prevents this ability from working. Each creature within range receives a Will save (DC %2) to negate the effect. If a creature's saving throw succeeds, you cannot attempt to fascinate that creature again for 24 hours. If its saving throw fails, the creature sits quietly and observes your performance for as long as you continue to maintain it. While fascinated, a target takes a -4 penalty on all skill checks made as reactions, such as Perception checks. Any potential threat to the target allows the target to make a new saving throw against the effect. Any obvious threat, such as someone drawing a weapon, casting a spell, or aiming a weapon at the target, automatically breaks the effect. Fascinate is an enchantment (compulsion), mind-affecting ability. Fascinate relies on audible and visual components in order to function.",
    Arguments={
      Formula("FascinateCreatures"),
      Formula("FascinateDC"),
    },
  },
  SourcePage="p.37",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(BardicPerformanceLVL+2)/3"),
      Variables={
        "FascinateCreatures",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(BardicPerformanceLVL/2)+CHA"),
      Variables={
        "FascinateDC",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Inspire Courage",
  Key="Bardic Performance ~ Inspire Courage",
  Category="Special Ability",
  Description={
    Format="You can use your performance to inspire courage in your allies (including yourself), bolstering them against fear and improving their combat abilities. To be affected, an ally must be able to perceive your performance. An affected ally receives a +%1 morale bonus on saving throws against charm and fear effects and a +%1 competence bonus on attack and weapon damage rolls. Inspire courage is a mind-affecting ability. Inspire courage can use audible or visual components. The bard must choose which component to use when starting his performance.",
    Arguments={
      Formula("InspireCourageBonus"),
    },
  },
  SourcePage="p.37",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("InspireCourageCount"),
      Variables={
        "InspireCourageBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min((BardicPerformanceLVL+7)/6,4)"),
      Variables={
        "InspireCourageCount",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Inspire Competence",
  Key="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Description={
    Format="You can use your performance to help an ally succeed at a task. That ally must be within 30 feet and be able to hear you. The ally gets a +%1 competence bonus on skill checks with a particular skill as long as she continues to hear your performance. Certain uses of this ability are infeasible, such as Stealth, and may be disallowed at the GM's discretion. A bard can't inspire competence in himself. Inspire competence relies on audible components.",
    Arguments={
      Formula("InspireCompetenceBonus"),
    },
  },
  SourcePage="p.37",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("InspireCompetenceCount"),
      Variables={
        "InspireCompetenceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(BardicPerformanceLVL+5)/4"),
      Variables={
        "InspireCompetenceCount",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Suggestion",
  Key="Bardic Performance ~ Suggestion",
  Category="Special Ability",
  Description={
    Format="You use your performance to make a Suggestion (as per the spell) to a creature you have already fascinated. Using this ability does not disrupt the Fascinate effect, but it does require a standard action to activate (in addition to the free action to continue the Fascinate effect). You can use this ability more than once against an individual creature during an individual performance. Making a Suggestion does not count against your daily use of Bardic Performance. A Will saving throw (DC %1) negates the effect. This ability affects only a single creature. Suggestion is an enchantment (compulsion), mind affecting, language-dependent ability and relies on audible components.",
    Arguments={
      Formula("SuggestionDC"),
    },
  },
  SourcePage="p.37",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(BardicPerformanceLVL/2)+CHA"),
      Variables={
        "SuggestionDC",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Dirge of Doom",
  Key="Bardic Performance ~ Dirge of Doom",
  Category="Special Ability",
  Description={
    Format="You can use your performance to foster a sense of growing dread in your enemies, causing them to become shaken. To be affected, an enemy must be within 30 feet and able to see and hear your performance. The effect persists for as long as the enemy is within 30 feet and you continue your performance. This performance cannot cause a creature to become frightened or panicked, even if the targets are already shaken from another effect. Dirge of Doom is a mind-affecting fear effect, and it relies on audible and visual components.",
  },
  SourcePage="p.37",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Inspire Greatness",
  Key="Bardic Performance ~ Inspire Greatness",
  Category="Special Ability",
  Description={
    Format="You can use your performance to inspire greatness in yourself or up to %1 willing allies within 30 feet, granting extra fighting capability. To inspire greatness, all of the targets must be able to see and hear you. A creature inspired with greatness gains 2 bonus Hit Dice (d10s), the commensurate number of temporary hit points (apply the target's Constitution modifier, if any, to these bonus Hit Dice), a +2 competence bonus on attack rolls, and a +1 competence bonus on Fortitude saves. The bonus Hit Dice count as regular Hit Dice for determining the effect of spells that are Hit Dice dependent. Inspire Greatness is a mind-affecting ability and it relies on audible and visual components.",
    Arguments={
      Formula("InspireGreatnessAllies"),
    },
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min((BardicPerformanceLVL-6)/3,4)"),
      Variables={
        "InspireGreatnessAllies",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Soothing Performance",
  Key="Bardic Performance ~ Soothing Performance",
  Category="Special Ability",
  Description={
    Format="You can use your performance to create an effect equivalent to a Mass Cure Serious Wounds (caster level %1). In addition, this performance removes the fatigued, sickened, and shaken conditions from all those affected. Using this ability requires 4 rounds of continuous performance, and the targets must be able to see and hear you throughout the performance. Soothing performance affects all targets that remain within 30 feet throughout the performance. Soothing performance relies on audible and visual components.",
    Arguments={
      Formula("SoothingPerformanceLVL"),
    },
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BardicPerformanceLVL"),
      Variables={
        "SoothingPerformanceLVL",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Frightening Tune",
  Key="Bardic Performance ~ Frightening Tune",
  Category="Special Ability",
  Description={
    Format="You can use your performance to cause fear in your enemies. To be affected, an enemy must be able to hear you perform and be within 30 feet. Each enemy within range receives a Will save (DC %1) to negate the effect. If the save succeeds, the creature is immune to this ability for 24 hours. If the save fails, the target becomes frightened and flees for as long as the target can hear your performance. Frightening Tune relies on audible components.",
    Arguments={
      Formula("FrighteningTuneDC"),
    },
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(BardicPerformanceLVL/2)+CHA"),
      Variables={
        "FrighteningTuneDC",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Inspire Heroics",
  Key="Bardic Performance ~ Inspire Heroics",
  Category="Special Ability",
  Description={
    Format="You can inspire tremendous heroism in yourself or up to %1 allies within 30 feet. To inspire heroics, all of the targets must be able to see and hear you. Inspired creatures gain a +4 morale bonus on saving throws and a +4 dodge bonus to AC. This effect lasts for as long as the targets are able to witness your performance. Inspire heroics is a mind-affecting ability that relies on audible and visual components.",
    Arguments={
      Formula("InspireHeroicsAllies"),
    },
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(BardicPerformanceLVL-12)/3"),
      Variables={
        "InspireHeroicsAllies",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Mass Suggestion",
  Key="Bardic Performance ~ Mass Suggestion",
  Category="Special Ability",
  Description={
    Format="You use your performance to make a Suggestion (as per the spell) to any number of creatures you have already fascinated. Using this ability does not disrupt the Fascinate effect, but it does require a standard action to activate (in addition to the free action to continue the Fascinate effect). You can use this ability more than once against an individual creature during an individual performance. Making a Mass Suggestion does not count against your daily use of Bardic Performance. A Will saving throw (DC %1) negates the effect. Mass Suggestion is an enchantment (compulsion), mind affecting, language-dependent ability that relies on audible components.",
    Arguments={
      Formula("MassSuggestionDC"),
    },
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(BardicPerformanceLVL/2)+CHA"),
      Variables={
        "MassSuggestionDC",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "BardicPerformance",
    "Bardic Performance",
  },
})
DefineAbility({
  Name="Deadly Performance",
  Key="Bardic Performance ~ Deadly Performance",
  Category="Special Ability",
  Description={
    Format="You can use your performance to cause one enemy to die from joy or sorrow. To be affected, the target must be able to see and hear you perform for 1 full round and be within 30 feet. The target receives a Will save (DC %1) to negate the effect. If a creature's saving throw succeeds, the target is staggered for 1d4 rounds, and you cannot use Deadly Performance on that creature again for 24 hours. If a creature's saving throw fails, it dies. Deadly Performance is a mind-affecting death effect that relies on audible and visual components.",
    Arguments={
      Formula("DeadlyPerformanceDC"),
    },
  },
  SourcePage="p.38",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Bardic Performance",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(BardicPerformanceLVL/2)+CHA"),
      Variables={
        "DeadlyPerformanceDC",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "BardicPerformance",
    "Bardic Performance",
  },
})
ModifyAbility({
  Name="Bard ~ Versatile Performance",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BardVersatilePerformanceLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_VersatilePerformance2"] == 1)
        end,
      },
      Variables={
        "Versatile Performance",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Courage",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCourageCount"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCourage1"] == 1)
        end,
      },
      Variables={
        "InspireCourageBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Courage",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCourageCount"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCourage2"] == 1)
        end,
      },
      Variables={
        "InspireCourageBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Courage",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCourageCount"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCourage3"] == 1)
        end,
      },
      Variables={
        "InspireCourageBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Courage",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCourageCount"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCourage4"] == 1)
        end,
      },
      Variables={
        "InspireCourageBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCompetenceCount"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence1"] == 1)
        end,
      },
      Variables={
        "InspireCompetenceBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCompetenceCount"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence2"] == 1)
        end,
      },
      Variables={
        "InspireCompetenceBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCompetenceCount"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence3"] == 1)
        end,
      },
      Variables={
        "InspireCompetenceBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCompetenceCount"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence4"] == 1)
        end,
      },
      Variables={
        "InspireCompetenceBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCompetenceCount"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence5"] == 1)
        end,
      },
      Variables={
        "InspireCompetenceBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Bardic Performance ~ Inspire Competence",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["InspireCompetenceCount"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Bard_CF_InspireCompetence6"] == 1)
        end,
      },
      Variables={
        "InspireCompetenceBonus",
      },
    },
  },
})
DefineAbility({
  Name="Versatile Performance (Act)",
  Key="Versatile Performance ~ Act",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Act) skill in place of your bonus in the Bluff or Disguise skills. When substituting in this way, you use your total Perform (Act) skill bonus, including class skill bonus, in place of your Bluff or Disguise skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Act).MISC\")"),
      Variables={
        "Bluff (Perform (Act))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Act).MISC\")"),
      Variables={
        "Disguise (Perform (Act))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Act)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Act" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Bluff (Perform (Act))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Act)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Act" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Disguise (Perform (Act))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Comedy)",
  Key="Versatile Performance ~ Comedy",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Comedy) skill in place of your bonus in the Bluff or Intimidate skills. When substituting in this way, you use your total Perform (Comedy) skill bonus, including class skill bonus, in place of your Bluff or Intimidate skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Comedy).MISC\")"),
      Variables={
        "Bluff (Perform (Comedy))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Comedy).MISC\")"),
      Variables={
        "Intimidate (Perform (Comedy))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Comedy)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Comedy" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Bluff (Perform (Comedy))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Comedy)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Comedy" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Intimidate (Perform (Comedy))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Dance)",
  Key="Versatile Performance ~ Dance",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Dance) skill in place of your bonus in the Acrobatics or Fly skills. When substituting in this way, you use your total Perform (Dance) skill bonus, including class skill bonus, in place of your Acrobatics or Fly skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Dance).MISC\")"),
      Variables={
        "Acrobatics (Perform (Dance))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Dance).MISC\")"),
      Variables={
        "Fly (Perform (Dance))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Dance)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Dance" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Acrobatics (Perform (Dance))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Dance)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Dance" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Fly (Perform (Dance))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Keyboard Instruments)",
  Key="Versatile Performance ~ Keyboard Instruments",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Keyboard Instruments) skill in place of your bonus in the Diplomacy or Intimidate skills. When substituting in this way, you use your total Perform (Keyboard Instruments) skill bonus, including class skill bonus, in place of your Diplomacy or Intimidate skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Keyboard Instruments).MISC\")"),
      Variables={
        "Diplomacy (Perform (Keyboard Instruments))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Keyboard Instruments).MISC\")"),
      Variables={
        "Intimidate (Perform (Keyboard Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Keyboard Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Keyboard Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Diplomacy (Perform (Keyboard Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Keyboard Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Keyboard Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Intimidate (Perform (Keyboard Instruments))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Oratory)",
  Key="Versatile Performance ~ Oratory",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Oratory) skill in place of your bonus in the Diplomacy or Sense Motive skills. When substituting in this way, you use your total Perform (Oratory) skill bonus, including class skill bonus, in place of your Diplomacy or Sense Motive skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Oratory).MISC\")"),
      Variables={
        "Diplomacy (Perform (Oratory))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Oratory).MISC\")"),
      Variables={
        "Sense Motive (Perform (Oratory))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Oratory)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Oratory" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Diplomacy (Perform (Oratory))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Oratory)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Oratory" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Sense Motive (Perform (Oratory))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Percussion Instruments)",
  Key="Versatile Performance ~ Percussion Instruments",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Percussion Instruments) skill in place of your bonus in the Handle Animal or Intimidate skills. When substituting in this way, you use your total Perform (Percussion Instruments) skill bonus, including class skill bonus, in place of your Handle Animal or Intimidate skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Percussion Instruments).MISC\")"),
      Variables={
        "Handle Animal (Perform (Percussion Instruments))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Percussion Instruments).MISC\")"),
      Variables={
        "Intimidate (Perform (Percussion Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Percussion Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Percussion Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Handle Animal (Perform (Percussion Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Percussion Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Percussion Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Intimidate (Perform (Percussion Instruments))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Sing)",
  Key="Versatile Performance ~ Sing",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Sing) skill in place of your bonus in the Bluff or Sense Motive skills. When substituting in this way, you use your total Perform (Sing) skill bonus, including class skill bonus, in place of your Bluff or Disguise skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Sing).MISC\")"),
      Variables={
        "Bluff (Perform (Sing))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Sing).MISC\")"),
      Variables={
        "Sense Motive (Perform (Sing))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Sing)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Sing" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Bluff (Perform (Sing))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Sing)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Sing" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Sense Motive (Perform (Sing))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (String Instruments)",
  Key="Versatile Performance ~ String Instruments",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (String Instruments) skill in place of your bonus in the Bluff or Diplomacy skills. When substituting in this way, you use your total Perform (String Instruments) skill bonus, including class skill bonus, in place of your Bluff or Diplomacy skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (String Instruments).MISC\")"),
      Variables={
        "Bluff (Perform (String Instruments))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (String Instruments).MISC\")"),
      Variables={
        "Diplomacy (Perform (String Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (String Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ String Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Bluff (Perform (String Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (String Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ String Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Diplomacy (Perform (String Instruments))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Versatile Performance (Wind Instruments)",
  Key="Versatile Performance ~ Wind Instruments",
  Category="Special Ability",
  Description={
    Format="You can use your bonus in the Perform (Wind Instruments) skill in place of your bonus in the Diplomacy or Handle Animal skills. When substituting in this way, you use your total Perform (Wind Instruments) skill bonus, including class skill bonus, in place of your Diplomacy or Handle Animal skill bonus, whether or not you have ranks in that skill or if it is a class skill.",
  },
  SourcePage="p.38",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Wind Instruments).MISC\")"),
      Variables={
        "Diplomacy (Perform (Wind Instruments))",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("var(\"SKILL.Perform (Wind Instruments).MISC\")"),
      Variables={
        "Handle Animal (Perform (Wind Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Wind Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Wind Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Diplomacy (Perform (Wind Instruments))",
      },
    },
    {
      Category="SKILLRANK",
      Formula=Formula("skillinfo(\"TOTALRANK\", \"Perform (Wind Instruments)\")"),
      Type={
        Name="SkillGranted",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Versatile Performance ~ Wind Instruments" then return true end
            return false
          end)
        end,
      },
      Variables={
        "Handle Animal (Perform (Wind Instruments))",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "VersatilePerformance",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Cleric ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Weapon and Armor Proficiencies are altered from the base cleric.",
    Conditions={
      function (character, item, sources)
        return character.HasAnyAbility(function (ability)
          if ability.Category ~= "Archetype" then return false end
          if ability.IsAnyType("ClericArmorProficiency.TYPE.ClericWeaponProficiency") then return true end
          return false
        end)
      end,
    },
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Types={
        "ArmorProfMedium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("ClericArmorProficiency") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Simple",
        "Weapon Proficiencies ~ Cleric",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("ClericWeaponProficiency") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Types={
        "ArmorProfMedium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("ClericArmorProficiency") then return true end
            return false
          end))
        end,
      },
    },
  },
  AutomaticProficiencies={
    {
      DeityWeapons=true,
      Kind="Weapon",
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("ClericWeaponProficiency") then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Aura",
  Key="Cleric ~ Aura",
  Category="Special Ability",
  Description={
    Format="A cleric of a chaotic, evil, good, or lawful deity has a particularly powerful aura corresponding to the deity's alignment (see the detect evil spell for details).",
  },
  SourcePage="p.",
  Abilities={
    {
      Category="Cleric Class Feature",
      Nature="VIRTUAL",
      Names={
        "Aura of Chaos",
      },
      Conditions={
        function (character, item, sources)
          return character.Diety.Alignment == "CG" or character.Diety.Alignment == "CN" or character.Diety.Alignment == "CE"
        end,
      },
    },
    {
      Category="Cleric Class Feature",
      Nature="VIRTUAL",
      Names={
        "Aura of Evil",
      },
      Conditions={
        function (character, item, sources)
          return character.Diety.Alignment == "LE" or character.Diety.Alignment == "NE" or character.Diety.Alignment == "CE"
        end,
      },
    },
    {
      Category="Cleric Class Feature",
      Nature="VIRTUAL",
      Names={
        "Aura of Good",
      },
      Conditions={
        function (character, item, sources)
          return character.Diety.Alignment == "LG" or character.Diety.Alignment == "NG" or character.Diety.Alignment == "CG"
        end,
      },
    },
    {
      Category="Cleric Class Feature",
      Nature="VIRTUAL",
      Names={
        "Aura of Law",
      },
      Conditions={
        function (character, item, sources)
          return character.Diety.Alignment == "LG" or character.Diety.Alignment == "LN" or character.Diety.Alignment == "LE"
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ClericLVL"),
      Variables={
        "AlignmentAuraLVL",
      },
    },
  },
  Types={
    "Extraordinary",
    "ClassFeatures",
    "ClericClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Domains",
  Key="Cleric ~ Domains",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domains",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Internal",
    "ClassFeatures",
    "Domains",
  },
})
DefineAbility({
  Name="Orisons",
  Key="Cleric ~ Orisons",
  Category="Special Ability",
  Description={
    Format="You can prepare a number of orisons, or 0-level spells. These spells are cast like any other spells, but they are not expended when used and may be used again.",
  },
  SourcePage="p.41",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Spontaneous Casting",
  Key="Cleric ~ Spontaneous Casting",
  Category="Special Ability",
  Description={
    Format="You can channel stored spell energy into inflict spells that you did not prepare ahead of time. You can \"lose\" any prepared spell that is not an orison or domain spell in order to cast any inflict spell of the same spell level or lower (an inflict spell is any spell with \"Inflict\" in its name).",
    Conditions={
      function (character, item, sources)
        return character.HasAnyAbility(function (ability)
          if ability.Category ~= "Special Ability" then return false end
          if ability.Name == "Cleric ~ Channel Negative Energy" then return true end
          return false
        end)
      end,
    },
  },
  SourcePage="p.41",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Domains",
  Key="Domains",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+WIS"),
      Variables={
        "DomainPowerTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Variables={
        "DomainAbilityTriggerLVL",
      },
    },
  },
  Types={
    "Internal",
    "CF_Domain",
  },
})
DefineAbility({
  Name="Channel Energy",
  Key="Cleric ~ Channel Energy",
  Category="Special Ability",
  SourcePage="p.22",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+CHA"),
      Variables={
        "ClericChannelEnergyTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ClericLVL"),
      Variables={
        "ClericChannelEnergyLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Pool_Cleric_Channeling",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Channel Positive Energy",
  Key="Cleric ~ Channel Positive Energy",
  Category="Special Ability",
  Description={
    Format="You can unleash a wave of positive energy. You must choose to deal %1d%2 points of positive energy damage to undead creatures or to heal living creatures of %1d%2 points of damage. Creatures that take damage from channeled energy receive a DC %3 Will save to halve the damage. You can use this ability %4 times per day.",
    Arguments={
      Formula("ClericChannelPositiveEnergyDice"),
      Formula("ClericChannelPositiveEnergyDieSize"),
      Formula("ClericChannelPositiveEnergyDC"),
      Formula("ClericChannelEnergyTimes"),
    },
  },
  SourcePage="p.40",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Channel Positive Energy",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2, DC %3, %4/day)",
      Arguments={
        "ClericChannelPositiveEnergyDice",
        "ClericChannelPositiveEnergyDieSize",
        "ClericChannelPositiveEnergyDC",
        "ClericChannelEnergyTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ClericChannelEnergyTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
    {
      Name="MasterAbility",
      FormatString="Channel Energy",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "ClericChannelPositiveEnergyDieSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(ClericChannelPositiveEnergyLVL+1)/2"),
      Variables={
        "ClericChannelPositiveEnergyDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(ClericChannelPositiveEnergyLVL/2)+CHA"),
      Variables={
        "ClericChannelPositiveEnergyDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ClericChannelEnergyLVL"),
      Variables={
        "ClericChannelPositiveEnergyLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.IsAlignment("LG") or character.IsAlignment("NG") or character.IsAlignment("CG") or character.IsAlignment("LN") or character.IsAlignment("TN") or character.IsAlignment("CN")
    end,
    function (character, item, sources)
      return character.Diety.Alignment == "LG" or character.Diety.Alignment == "NG" or character.Diety.Alignment == "CG" or character.Diety.Alignment == "LN" or character.Diety.Alignment == "TN" or character.Diety.Alignment == "CN" or (character.Diety.Name == "None")
    end,
  },
  Types={
    "ClericClassFeatures",
    "Supernatural",
    "SpecialAttack",
    "ChannelEnergySelection",
    "ChannelEnergy",
    "Channel Energy",
    "Channel Energy Positive",
    "Channel Positive Energy",
  },
})
DefineAbility({
  Name="Channel Negative Energy",
  Key="Cleric ~ Channel Negative Energy",
  Category="Special Ability",
  Description={
    Format="You can unleash a wave of negative energy. You must choose to deal %1d%2 points of negative energy damage to living creatures or to heal undead creatures of %1d%2 points of damage. Creatures that take damage from channeled energy receive a DC %3 Will save to halve the damage. You can use this ability %4 times per day.",
    Arguments={
      Formula("ClericChannelNegativeEnergyDice"),
      Formula("ClericChannelNegativeEnergyDieSize"),
      Formula("ClericChannelNegativeEnergyDC"),
      Formula("ClericChannelEnergyTimes"),
    },
  },
  SourcePage="p.40",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Channel Negative Energy",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1d%2, DC %3, %4/day)",
      Arguments={
        "ClericChannelNegativeEnergyDice",
        "ClericChannelNegativeEnergyDieSize",
        "ClericChannelNegativeEnergyDC",
        "ClericChannelEnergyTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ClericChannelEnergyTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
    {
      Name="MasterAbility",
      FormatString="Channel Energy",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "ClericChannelNegativeEnergyDieSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(ClericChannelNegativeEnergyLVL+1)/2"),
      Variables={
        "ClericChannelNegativeEnergyDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(ClericChannelNegativeEnergyLVL/2)+CHA"),
      Variables={
        "ClericChannelNegativeEnergyDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ClericChannelEnergyLVL"),
      Variables={
        "ClericChannelNegativeEnergyLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.IsAlignment("LN") or character.IsAlignment("TN") or character.IsAlignment("CN") or character.IsAlignment("LE") or character.IsAlignment("NE") or character.IsAlignment("CE")
    end,
    function (character, item, sources)
      return character.Diety.Alignment == "LN" or character.Diety.Alignment == "TN" or character.Diety.Alignment == "CN" or character.Diety.Alignment == "LE" or character.Diety.Alignment == "NE" or character.Diety.Alignment == "CE" or (character.Diety.Name == "None")
    end,
  },
  Types={
    "ClericClassFeatures",
    "Supernatural",
    "SpecialAttack",
    "ChannelEnergySelection",
    "ChannelEnergy",
    "Channel Energy",
    "Channel Energy Negative",
    "Channel Negative Energy",
  },
})
DefineAbility({
  Name="Air",
  Key="Core Domain ~ Air Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Lightning Arc",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Air)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainAirAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Electricity Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Air",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Animal",
  Key="Core Domain ~ Animal Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Speak with Animals",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Animal)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainAnimalAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Animal Companion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAnimalAbilityTriggerLVL"] >= 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Animal",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Artifice",
  Key="Core Domain ~ Artifice Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Artificer's Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Artifice)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainArtificeAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dancing Weapons",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainArtificeAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Artifice",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Chaos",
  Key="Core Domain ~ Chaos Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Chaos",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Chaos)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainChaosAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Chaos Blade",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainChaosAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Chaos",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Charm",
  Key="Core Domain ~ Charm Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dazing Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Charm)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainCharmAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Charming Smile",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainCharmAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Charm",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Community",
  Key="Core Domain ~ Community Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Calming Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Community)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainCommunityAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Unity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainCommunityAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Community",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Darkness",
  Key="Core Domain ~ Darkness Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Darkness",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Darkness)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainDarknessAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Eyes of Darkness",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainDarknessAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Darkness",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Death",
  Key="Core Domain ~ Death Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Bleeding Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Death)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainDeathAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Death's Embrace",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainDeathAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Death",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Destruction",
  Key="Core Domain ~ Destruction Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Destructive Smite",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Destruction)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainDestructionAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Destructive Aura",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainDestructionAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Destruction",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Earth",
  Key="Core Domain ~ Earth Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Acid Dart",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Earth)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainEarthAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Acid Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Earth",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Evil",
  Key="Core Domain ~ Evil Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Evil",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Evil)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainEvilAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Scythe of Evil",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEvilAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Evil",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Fire",
  Key="Core Domain ~ Fire Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Fire Bolt",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Fire)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainFireAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Fire Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Fire",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Glory",
  Key="Core Domain ~ Glory Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Glory",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Glory)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainGloryAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Divine Presence",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainGloryAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Glory",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Good",
  Key="Core Domain ~ Good Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Good",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Good)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainGoodAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Holy Lance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainGoodAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Good",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Healing",
  Key="Core Domain ~ Healing Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Rebuke Death",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Healing)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainHealingAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Healer's Blessing",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainHealingAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Healing",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Knowledge",
  Key="Core Domain ~ Knowledge Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Lore Keeper",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Knowledge)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainKnowledgeAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Remote Viewing",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainKnowledgeAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Knowledge",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Law",
  Key="Core Domain ~ Law Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Law",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Law)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainLawAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Staff of Order",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainLawAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Law",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Liberation",
  Key="Core Domain ~ Liberation Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Liberation",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Liberation)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainLiberationAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Freedom's Call",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainLiberationAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Liberation",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Luck",
  Key="Core Domain ~ Luck Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Bit of Luck",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Luck)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainLuckAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Good Fortune",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainLuckAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Luck",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Madness",
  Key="Core Domain ~ Madness Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Vision of Madness",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Madness)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainMadnessAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Aura of Madness",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainMadnessAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Madness",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Magic",
  Key="Core Domain ~ Magic Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Hand of the Acolyte",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Magic)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainMagicAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dispelling Touch",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainMagicAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Magic",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Nobility",
  Key="Core Domain ~ Nobility Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Inspiring Word",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Nobility)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainNobilityAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Leadership",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainNobilityAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Nobility",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Plant",
  Key="Core Domain ~ Plant Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Wooden Fist",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Plant)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainPlantAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Bramble Armor",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainPlantAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Plant",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Protection",
  Key="Core Domain ~ Protection Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Resistant Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Protection)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainProtectionAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Aura of Protection",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainProtectionAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Protection",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Repose",
  Key="Core Domain ~ Repose Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Gentle Rest",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Repose)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainReposeAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Ward Against Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainReposeAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Repose",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Rune",
  Key="Core Domain ~ Rune Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Blast Rune",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Rune)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainRuneAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Spell Rune",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainRuneAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Rune",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Strength",
  Key="Core Domain ~ Strength Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Strength Surge",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Strength)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainStrengthAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Might of the Gods",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainStrengthAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Strength",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Sun",
  Key="Core Domain ~ Sun Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Sun's Blessing",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Sun)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainSunAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Nimbus of Light",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainSunAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Sun",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Travel",
  Key="Core Domain ~ Travel Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Agile Feet",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Travel)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainTravelAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dimensional Hop",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainTravelAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Travel",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Trickery",
  Key="Core Domain ~ Trickery Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Copycat",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Trickery)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainTrickeryAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Master's Illusion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainTrickeryAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Trickery",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="War",
  Key="Core Domain ~ War Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Battle Rage",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (War)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainWarAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Weapon Master",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWarAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ War",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Water",
  Key="Core Domain ~ Water Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Icicle",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Water)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainWaterAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Cold Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterAbilityTriggerLVL"] >= 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Water",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Weather",
  Key="Core Domain ~ Weather Domain",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Storm Burst",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Weather)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainWeatherAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Lightning Lord",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWeatherAbilityTriggerLVL"] >= 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Domain Base ~ Weather",
      },
    },
  },
  Types={
    "Internal",
    "DomainAbility",
  },
})
DefineAbility({
  Name="Air",
  Key="Domain Base ~ Air",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "AirDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAirLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAirAbilityTriggerLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainAirLVL/2)+CHA"),
      Variables={
        "DomainAirDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAirTimes",
      },
    },
  },
})
DefineAbility({
  Name="Animal",
  Key="Domain Base ~ Animal",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "AnimalDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAnimalLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainAnimalLVL/2)+CHA"),
      Variables={
        "DomainAnimalDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAnimalTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAnimalAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Artifice",
  Key="Domain Base ~ Artifice",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "ArtificeDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainArtificeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainArtificeLVL/2)+CHA"),
      Variables={
        "DomainArtificeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainArtificeTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainArtificeAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Chaos",
  Key="Domain Base ~ Chaos",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "ChaosDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainChaosLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainChaosLVL/2)+CHA"),
      Variables={
        "DomainChaosDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainChaosTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainChaosAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Charm",
  Key="Domain Base ~ Charm",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "CharmDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCharmLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainCharmLVL/2)+CHA"),
      Variables={
        "DomainCharmDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCharmTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCharmAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Community",
  Key="Domain Base ~ Community",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "CommunityDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCommunityLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainCommunityLVL/2)+CHA"),
      Variables={
        "DomainCommunityDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCommunityTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCommunityAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Darkness",
  Key="Domain Base ~ Darkness",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "DarknessDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDarknessLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainDarknessLVL/2)+CHA"),
      Variables={
        "DomainDarknessDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDarknessTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDarknessAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Death",
  Key="Domain Base ~ Death",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "DeathDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDeathLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainDeathLVL/2)+CHA"),
      Variables={
        "DomainDeathDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDeathTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDeathAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Destruction",
  Key="Domain Base ~ Destruction",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "DestructionDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDestructionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainDestructionLVL/2)+CHA"),
      Variables={
        "DomainDestructionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDestructionTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDestructionAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Earth",
  Key="Domain Base ~ Earth",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "EarthDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEarthLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainEarthLVL/2)+CHA"),
      Variables={
        "DomainEarthDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEarthTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEarthAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Evil",
  Key="Domain Base ~ Evil",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "EvilDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEvilLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainEvilLVL/2)+CHA"),
      Variables={
        "DomainEvilDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEvilTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEvilAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Fire",
  Key="Domain Base ~ Fire",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "FireDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainFireLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainFireLVL/2)+CHA"),
      Variables={
        "DomainFireDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainFireTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainFireAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Glory",
  Key="Domain Base ~ Glory",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "GloryDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGloryLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "ChannelPositiveEnergyDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainGloryLVL/2)+CHA"),
      Variables={
        "DomainGloryDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGloryTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGloryAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Good",
  Key="Domain Base ~ Good",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "GoodDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGoodLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainGoodLVL/2)+CHA"),
      Variables={
        "DomainGoodDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGoodTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGoodAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Healing",
  Key="Domain Base ~ Healing",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "HealingDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainHealingLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainHealingLVL/2)+CHA"),
      Variables={
        "DomainHealingDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainHealingTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainHealingAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Knowledge",
  Key="Domain Base ~ Knowledge",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "KnowledgeDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainKnowledgeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainKnowledgeLVL/2)+CHA"),
      Variables={
        "DomainKnowledgeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainKnowledgeTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainKnowledgeAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Law",
  Key="Domain Base ~ Law",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "LawDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLawLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainLawLVL/2)+CHA"),
      Variables={
        "DomainLawDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLawTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLawAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Liberation",
  Key="Domain Base ~ Liberation",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "LiberationDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLiberationLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainLiberationLVL/2)+CHA"),
      Variables={
        "DomainLiberationDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLiberationTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLiberationAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Luck",
  Key="Domain Base ~ Luck",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "LuckDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLuckLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainLuckLVL/2)+CHA"),
      Variables={
        "DomainLuckDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLuckTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLuckAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Madness",
  Key="Domain Base ~ Madness",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "MadnessDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMadnessLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainMadnessLVL/2)+CHA"),
      Variables={
        "DomainMadnessDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMadnessTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMadnessAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Magic",
  Key="Domain Base ~ Magic",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "MagicDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMagicLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainMagicLVL/2)+CHA"),
      Variables={
        "DomainMagicDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMagicTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMagicAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Nobility",
  Key="Domain Base ~ Nobility",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "NobilityDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainNobilityLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainNobilityLVL/2)+CHA"),
      Variables={
        "DomainNobilityDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainNobilityTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainNobilityAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Plant",
  Key="Domain Base ~ Plant",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "PlantDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainPlantLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainPlantLVL/2)+CHA"),
      Variables={
        "DomainPlantDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainPlantTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainPlantAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Protection",
  Key="Domain Base ~ Protection",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "ProtectionDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(DomainProtectionLVL/5)+1"),
      Variables={
        "DomainProtectionSaveBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainProtectionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainProtectionLVL/2)+CHA"),
      Variables={
        "DomainProtectionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainProtectionTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainProtectionAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Repose",
  Key="Domain Base ~ Repose",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "ReposeDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainReposeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainReposeLVL/2)+CHA"),
      Variables={
        "DomainReposeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainReposeTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainReposeAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Rune",
  Key="Domain Base ~ Rune",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "RuneDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainRuneLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainRuneLVL/2)+CHA"),
      Variables={
        "DomainRuneDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainRuneTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainRuneAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Strength",
  Key="Domain Base ~ Strength",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "StrengthDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainStrengthLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainStrengthLVL/2)+CHA"),
      Variables={
        "DomainStrengthDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainStrengthTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainStrengthAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Sun",
  Key="Domain Base ~ Sun",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "SunDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainSunLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainSunLVL/2)+CHA"),
      Variables={
        "DomainSunDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainSunTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainSunAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Travel",
  Key="Domain Base ~ Travel",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "TravelDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTravelLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainTravelLVL/2)+CHA"),
      Variables={
        "DomainTravelDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTravelTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTravelAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Trickery",
  Key="Domain Base ~ Trickery",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "TrickeryDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTrickeryLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainTrickeryLVL/2)+CHA"),
      Variables={
        "DomainTrickeryDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTrickeryTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTrickeryAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="War",
  Key="Domain Base ~ War",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "WarDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWarLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainWarLVL/2)+CHA"),
      Variables={
        "DomainWarDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWarTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWarAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Water",
  Key="Domain Base ~ Water",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "WaterDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWaterLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainWaterLVL/2)+CHA"),
      Variables={
        "DomainWaterDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWaterTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWaterAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Weather",
  Key="Domain Base ~ Weather",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Domain",
      },
      Variables={
        "WeatherDomain",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWeatherLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainWeatherLVL/2)+CHA"),
      Variables={
        "DomainWeatherDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWeatherTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWeatherAbilityTriggerLVL",
      },
    },
  },
})
DefineAbility({
  Name="Air",
  Key="Air Domain",
  Category="Special Ability",
  Description={
    Format="You can manipulate lightning, mist, and wind, traffic with air creatures, and are resistant to electricity damage.",
  },
  SourcePage="p.41",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Lightning Arc",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Air)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainAirAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Electricity Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAirLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAirAbilityTriggerLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainAirLVL/2)+CHA"),
      Variables={
        "DomainAirDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAirTimes",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Air",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Wind Wall",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Gaseous Form",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Air Walk",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Control Winds",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Chain Lightning",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Air Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Air Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Animal",
  Key="Animal Domain",
  Category="Special Ability",
  Description={
    Format="You can speak with and befriend animals with ease. In addition, you treat Knowledge (Nature) as a class skill.",
  },
  SourcePage="p.41",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Speak with Animals",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Animal)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainAnimalAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Animal Companion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAnimalAbilityTriggerLVL"] >= 4)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAnimalLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainAnimalLVL/2)+CHA"),
      Variables={
        "DomainAnimalDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAnimalTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainAnimalAbilityTriggerLVL",
      },
    },
  },
  ClassSkills={
    "Knowledge (Nature)",
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Animal",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Calm Animals",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Hold Animal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dominate Animal",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Summon Nature's Ally IV (Animals Only)",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Beast Shape III (Animals Only)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antilife Shell",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animal Shapes",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Summon Nature's Ally VIII (Animals Only)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Artifice",
  Key="Artifice Domain",
  Category="Special Ability",
  Description={
    Format="You can repair damage to objects, animate objects with life, and create objects from nothing.",
  },
  SourcePage="p.41",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Artificer's Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Artifice)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainArtificeAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dancing Weapons",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainArtificeAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainArtificeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainArtificeLVL/2)+CHA"),
      Variables={
        "DomainArtificeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainArtificeTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainArtificeAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Artifice",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Animate Rope",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Wood Shape",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Stone Shape",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Minor Creation",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Fabricate",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Major Creation",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Wall of Iron",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Instant Summons",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Chaos",
  Key="Chaos Domain",
  Category="Special Ability",
  Description={
    Format="Your touch infuses life and weapons with chaos, and you revel in all things anarchic.",
  },
  SourcePage="p.42",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Chaos",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Chaos)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainChaosAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Chaos Blade",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainChaosAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainChaosLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainChaosLVL/2)+CHA"),
      Variables={
        "DomainChaosDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainChaosTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainChaosAbilityTriggerLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.IsAlignment("CG") or character.IsAlignment("CN") or character.IsAlignment("CE")
    end,
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Chaos",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Law",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Align Weapon (Chaos Only)",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Law",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Chaos Hammer",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Law",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Animate Objects",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Word of Chaos",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cloak of Chaos",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX (Chaos Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Charm",
  Key="Charm Domain",
  Category="Special Ability",
  Description={
    Format="You can baffle and befuddle foes with a touch or a smile, and your beauty and grace are divine.",
  },
  SourcePage="p.42",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dazing Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Charm)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainCharmAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Charming Smile",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainCharmAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCharmLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainCharmLVL/2)+CHA"),
      Variables={
        "DomainCharmDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCharmTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCharmAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Charm",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Charm Person",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Calm Emotions",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Suggestion",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Heroism",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Charm Monster",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Geas/Quest",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Insanity",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Demand",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Dominate Monster",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Community",
  Key="Community Domain",
  Category="Special Ability",
  Description={
    Format="Your touch can heal wounds, and your presence instills unity and strengthens emotional bonds.",
  },
  SourcePage="p.42",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Calming Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Community)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainCommunityAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Unity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainCommunityAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCommunityLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainCommunityLVL/2)+CHA"),
      Variables={
        "DomainCommunityDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCommunityTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainCommunityAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Community",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Bless",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shield Other",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Prayer",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Imbue with Spell Ability",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Telepathic Bond",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Heroes' Feast",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Refuge",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cure Critical Wounds (Mass)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Miracle",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Darkness",
  Key="Darkness Domain",
  Category="Special Ability",
  Description={
    Format="You manipulate shadows and darkness. In addition, you receive Blind-Fight as a bonus feat.",
  },
  SourcePage="p.42",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Blind-Fight",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Darkness",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Darkness)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainDarknessAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Eyes of Darkness",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainDarknessAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDarknessLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainDarknessLVL/2)+CHA"),
      Variables={
        "DomainDarknessDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDarknessTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDarknessAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Darkness",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Blindness/Deafness (Blindness Only)",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Deeper Darkness",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Shadow Conjuration",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Summon Monster V (1d3 Shadows)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Shadow Walk",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Power Word Blind",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Shadow Evocation (Greater)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shades",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Death",
  Key="Death Domain",
  Category="Special Ability",
  Description={
    Format="You can cause the living to bleed at a touch, and find comfort in the presence of the dead.",
  },
  SourcePage="p.42",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Bleeding Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Death)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainDeathAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Death's Embrace",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainDeathAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDeathLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainDeathLVL/2)+CHA"),
      Variables={
        "DomainDeathDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDeathTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDeathAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Death",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cause Fear",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Death Knell",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Animate Dead",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Death Ward",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Slay Living",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Create Undead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Destruction",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Create Greater Undead",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Wail of the Banshee",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Destruction",
  Key="Destruction Domain",
  Category="Special Ability",
  Description={
    Format="You revel in ruin and devastation, and can deliver particularly destructive attacks.",
  },
  SourcePage="p.43",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Destructive Smite",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Destruction)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainDestructionAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Destructive Aura",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainDestructionAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDestructionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainDestructionLVL/2)+CHA"),
      Variables={
        "DomainDestructionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDestructionTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainDestructionAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Destruction",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "True Strike",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shatter",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Rage",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Inflict Critical Wounds",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Shout",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Harm",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Disintegrate",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Implosion",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Earth",
  Key="Earth Domain",
  Category="Special Ability",
  Description={
    Format="You have mastery over earth, metal, and stone, can fire darts of acid, and command earth creatures.",
  },
  SourcePage="p.43",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Acid Dart",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Earth)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainEarthAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Acid Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEarthLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainEarthLVL/2)+CHA"),
      Variables={
        "DomainEarthDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEarthTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEarthAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Earth",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Stone",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Soften Earth and Stone",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Stone Shape",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spike Stones",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Stone",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Earth Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Earth Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Evil",
  Key="Evil Domain",
  Category="Special Ability",
  Description={
    Format="You are sinister and cruel, and have wholly pledged your soul to the cause of evil.",
  },
  SourcePage="p.43",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Evil",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Evil)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainEvilAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Scythe of Evil",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEvilAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEvilLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainEvilLVL/2)+CHA"),
      Variables={
        "DomainEvilDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEvilTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainEvilAbilityTriggerLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.IsAlignment("LE") or character.IsAlignment("NE") or character.IsAlignment("CE")
    end,
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Evil",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Good",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Align Weapon (Evil Only)",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Good",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Unholy Blight",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Good",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Create Undead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Blasphemy",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Unholy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX (Evil Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Fire",
  Key="Fire Domain",
  Category="Special Ability",
  Description={
    Format="You can call forth fire, command creatures of the inferno, and your flesh does not burn.",
  },
  SourcePage="p.44",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Fire Bolt",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Fire)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainFireAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Fire Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainFireLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainFireLVL/2)+CHA"),
      Variables={
        "DomainFireDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainFireTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainFireAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Fire",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Produce Flame",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Fireball",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Wall of Fire",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Fire Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Incendiary Cloud",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Fire Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Glory",
  Key="Glory Domain",
  Category="Special Ability",
  Description={
    Format="You are infused with the glory of the divine, and are a true foe of the undead. In addition, when you channel positive energy to harm undead creatures, the save DC to halve the damage is increased by 2.",
  },
  SourcePage="p.44",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Glory",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Glory)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainGloryAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Divine Presence",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainGloryAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGloryLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "ChannelPositiveEnergyDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainGloryLVL/2)+CHA"),
      Variables={
        "DomainGloryDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGloryTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGloryAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Glory",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Shield of Faith",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Bless Weapon",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Searing Light",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Holy Smite",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Righteous Might",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Undeath to Death",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Holy Sword",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Holy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Gate",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Good",
  Key="Good Domain",
  Category="Special Ability",
  Description={
    Format="You have pledged your life and soul to goodness and purity.",
  },
  SourcePage="p.44",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Good",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Good)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainGoodAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Holy Lance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainGoodAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGoodLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainGoodLVL/2)+CHA"),
      Variables={
        "DomainGoodDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGoodTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainGoodAbilityTriggerLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.IsAlignment("LG") or character.IsAlignment("NG") or character.IsAlignment("CG")
    end,
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Good",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Evil",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Align Weapon (Good Only)",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Evil",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Holy Smite",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Evil",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Blade Barrier",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Holy Word",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Holy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX (Good Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Healing",
  Key="Healing Domain",
  Category="Special Ability",
  Description={
    Format="Your touch staves off pain and death, and your healing magic is particularly vital and potent.",
  },
  SourcePage="p.44",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Rebuke Death",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Healing)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainHealingAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Healer's Blessing",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainHealingAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainHealingLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainHealingLVL/2)+CHA"),
      Variables={
        "DomainHealingDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainHealingTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainHealingAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Healing",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cure Light Wounds",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Cure Moderate Wounds",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Cure Serious Wounds",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Cure Critical Wounds",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Breath of Life",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Heal",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Regenerate",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cure Critical Wounds (Mass)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Heal (Mass)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Knowledge",
  Key="Knowledge Domain",
  Category="Special Ability",
  Description={
    Format="You are a scholar and a sage of legends. In addition, you treat all Knowledge skills as class skills.",
  },
  SourcePage="p.45",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Lore Keeper",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Knowledge)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainKnowledgeAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Remote Viewing",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainKnowledgeAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainKnowledgeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainKnowledgeLVL/2)+CHA"),
      Variables={
        "DomainKnowledgeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainKnowledgeTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainKnowledgeAbilityTriggerLVL",
      },
    },
  },
  ClassSkills={
    "TYPE=Knowledge",
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Knowledge",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Comprehend Languages",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Detect Thoughts",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Speak with Dead",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Divination",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "True Seeing",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Find the Path",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Legend Lore",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Discern Location",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Foresight",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Law",
  Key="Law Domain",
  Category="Special Ability",
  Description={
    Format="You follow a strict and ordered code of laws, and in so doing, achieve enlightenment.",
  },
  SourcePage="p.45",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Touch of Law",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Law)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainLawAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Staff of Order",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainLawAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLawLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainLawLVL/2)+CHA"),
      Variables={
        "DomainLawDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLawTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLawAbilityTriggerLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.IsAlignment("LG") or character.IsAlignment("LN") or character.IsAlignment("LE")
    end,
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Law",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Chaos",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Align Weapon (Law Only)",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Chaos",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Order's Wrath",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Chaos",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Hold Monster",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Dictum",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Shield of Law",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX (Law Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Liberation",
  Key="Liberation Domain",
  Category="Special Ability",
  Description={
    Format="You are a spirit of freedom and a staunch foe against all who would enslave and oppress.",
  },
  SourcePage="p.45",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Liberation",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Liberation)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainLiberationAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Freedom's Call",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainLiberationAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLiberationLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainLiberationLVL/2)+CHA"),
      Variables={
        "DomainLiberationDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLiberationTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLiberationAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Liberation",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Remove Fear",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Remove Paralysis",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Remove Curse",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Freedom of Movement",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Break Enchantment",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Dispel Magic (Greater)",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Refuge",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Mind Blank",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Freedom",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Luck",
  Key="Luck Domain",
  Category="Special Ability",
  Description={
    Format="You are infused with luck, and your mere presence can spread good fortune.",
  },
  SourcePage="p.45",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Bit of Luck",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Luck)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainLuckAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Good Fortune",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainLuckAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLuckLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainLuckLVL/2)+CHA"),
      Variables={
        "DomainLuckDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLuckTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainLuckAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Luck",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "True Strike",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Aid",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Freedom of Movement",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Break Enchantment",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Moment of Prescience",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Miracle",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Madness",
  Key="Madness Domain",
  Category="Special Ability",
  Description={
    Format="You embrace the madness that lurks deep in your heart, and can unleash it to drive your foes insane or to sacrifice certain abilities to hone others.",
  },
  SourcePage="p.45",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Vision of Madness",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Madness)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainMadnessAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Aura of Madness",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainMadnessAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMadnessLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainMadnessLVL/2)+CHA"),
      Variables={
        "DomainMadnessDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMadnessTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMadnessAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Madness",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Confusion (Lesser)",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Touch of Idiocy",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Rage",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Confusion",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Nightmare",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Phantasmal Killer",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Insanity",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Scintillating Pattern",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Weird",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Magic",
  Key="Magic Domain",
  Category="Special Ability",
  Description={
    Format="You are a true student of all things mystical, and see divinity in the purity of magic.",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Hand of the Acolyte",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Magic)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainMagicAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dispelling Touch",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainMagicAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMagicLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainMagicLVL/2)+CHA"),
      Variables={
        "DomainMagicDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMagicTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainMagicAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Magic",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Identify",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Magic Mouth",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dispel Magic",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Imbue with Spell Ability",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antimagic Field",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Protection from Spells",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Mage's Disjunction",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Nobility",
  Key="Nobility Domain",
  Category="Special Ability",
  Description={
    Format="You are a great leader, an inspiration to all who follow the teachings of your faith.",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Inspiring Word",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Nobility)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainNobilityAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Leadership",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainNobilityAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainNobilityLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainNobilityLVL/2)+CHA"),
      Variables={
        "DomainNobilityDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainNobilityTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainNobilityAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Nobility",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Divine Favor",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Enthrall",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Discern Lies",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Command (Greater)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Geas/Quest",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Repulsion",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Demand",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Storm of Vengeance",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Plant",
  Key="Plant Domain",
  Category="Special Ability",
  Description={
    Format="You find solace in the green, can grow defensive thorns, and can communicate with plants.",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Wooden Fist",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Plant)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainPlantAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Bramble Armor",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainPlantAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainPlantLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainPlantLVL/2)+CHA"),
      Variables={
        "DomainPlantDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainPlantTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainPlantAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Plant",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entangle",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Barkskin",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Plant Growth",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Command Plants",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Thorns",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Repel Wood",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animate Plants",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Control Plants",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shambler",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Protection",
  Key="Protection Domain",
  Category="Special Ability",
  Description={
    Format="Your faith is your greatest source of protection, and you can use that faith to defend others. In addition, you receive a +1 resistance bonus on saving throws. This bonus increases by 1 for every 5 levels you possess.",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Resistant Touch",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Protection)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainProtectionAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Aura of Protection",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainProtectionAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="SAVE",
      Formula=Formula("DomainProtectionSaveBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ALL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(DomainProtectionLVL/5)+1"),
      Variables={
        "DomainProtectionSaveBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainProtectionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainProtectionLVL/2)+CHA"),
      Variables={
        "DomainProtectionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainProtectionTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainProtectionAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Protection",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Sanctuary",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shield Other",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spell Immunity",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antimagic Field",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Repulsion",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Mind Blank",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Repose",
  Key="Repose Domain",
  Category="Special Ability",
  Description={
    Format="You see death not as something to be feared, but as a final rest and reward for a life well spent. The taint of undeath is a mockery of what you hold dear.",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Gentle Rest",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Repose)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainReposeAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Ward Against Death",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainReposeAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainReposeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainReposeLVL/2)+CHA"),
      Variables={
        "DomainReposeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainReposeTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainReposeAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Repose",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Deathwatch",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Gentle Repose",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Speak with Dead",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Death Ward",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Slay Living",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Undeath to Death",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Destruction",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Waves of Exhaustion",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Wail of the Banshee",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Rune",
  Key="Rune Domain",
  Category="Special Ability",
  Description={
    Format="In strange and eldritch runes you find potent magic. You gain Scribe Scroll as a bonus feat.",
  },
  SourcePage="p.47",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Scribe Scroll",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Blast Rune",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Rune)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainRuneAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Spell Rune",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainRuneAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainRuneLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainRuneLVL/2)+CHA"),
      Variables={
        "DomainRuneDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainRuneTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainRuneAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Rune",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Erase",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Secret Page",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Glyph of Warding",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Explosive Runes",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Planar Binding (Lesser)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Glyph of Warding (Greater)",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Instant Summons",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Symbol of Death",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Teleportation Circle",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Strength",
  Key="Strength Domain",
  Category="Special Ability",
  Description={
    Format="In strength and brawn there is truth - your faith gives you incredible might and power.",
  },
  SourcePage="p.47",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Strength Surge",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Strength)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainStrengthAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Might of the Gods",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainStrengthAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainStrengthLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainStrengthLVL/2)+CHA"),
      Variables={
        "DomainStrengthDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainStrengthTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainStrengthAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Strength",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Enlarge Person",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Bull's Strength",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spell Immunity",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Righteous Might",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Grasping Hand",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Clenched Fist",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Crushing Hand",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Sun",
  Key="Sun Domain",
  Category="Special Ability",
  Description={
    Format="You see truth in the pure and burning light of the sun, and can call upon its blessing or wrath to work great deeds.",
  },
  SourcePage="p.47",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Sun's Blessing",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Sun)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainSunAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Nimbus of Light",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainSunAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainSunLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainSunLVL/2)+CHA"),
      Variables={
        "DomainSunDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainSunTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainSunAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Sun",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Endure Elements",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Heat Metal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Searing Light",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Sunbeam",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Sunburst",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Travel",
  Key="Travel Domain",
  Category="Special Ability",
  Description={
    Format="You are an explorer and find enlightenment in the simple joy of travel, be it by foot or conveyance or magic. Increase your base speed by 10 feet.",
  },
  SourcePage="p.47",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Agile Feet",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Travel)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainTravelAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Dimensional Hop",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainTravelAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("10"),
      Variables={
        "TYPE=Walk",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTravelLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainTravelLVL/2)+CHA"),
      Variables={
        "DomainTravelDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTravelTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTravelAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Travel",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Longstrider",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Locate Object",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Fly",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Dimension Door",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Teleport",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Find the Path",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Phase Door",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Astral Projection",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Trickery",
  Key="Trickery Domain",
  Category="Special Ability",
  Description={
    Format="You are a master of illusions and deceptions. Bluff, Disguise, and Stealth are class skills.",
  },
  SourcePage="p.48",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Copycat",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Trickery)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainTrickeryAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Master's Illusion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainTrickeryAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTrickeryLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainTrickeryLVL/2)+CHA"),
      Variables={
        "DomainTrickeryDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTrickeryTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainTrickeryAbilityTriggerLVL",
      },
    },
  },
  ClassSkills={
    "Bluff",
    "Disguise",
    "Stealth",
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Trickery",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Disguise Self",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Invisibility",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Nondetection",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Confusion",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "False Vision",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Screen",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Invisibility (Mass)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Time Stop",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="War",
  Key="War Domain",
  Category="Special Ability",
  Description={
    Format="You are a crusader for your god, always ready and willing to fight to defend your faith.",
  },
  SourcePage="p.48",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Battle Rage",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (War)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainWarAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Weapon Master",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWarAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWarLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainWarLVL/2)+CHA"),
      Variables={
        "DomainWarDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWarTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWarAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="War",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Weapon",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Spiritual Weapon",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Divine Power",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Blade Barrier",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Power Word Blind",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Power Word Stun",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Power Word Kill",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Water",
  Key="Water Domain",
  Category="Special Ability",
  Description={
    Format="You can manipulate water and mist and ice, conjure creatures of water, and resist cold.",
  },
  SourcePage="p.48",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Icicle",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Water)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainWaterAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Cold Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterAbilityTriggerLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWaterLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainWaterLVL/2)+CHA"),
      Variables={
        "DomainWaterDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWaterTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWaterAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Water",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Fog Cloud",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Water Breathing",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Control Water",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Ice Storm",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Cone of Cold",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Water Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Horrid Wilting",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Water Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Weather",
  Key="Weather Domain",
  Category="Special Ability",
  Description={
    Format="With power over storm and sky, you can call down the wrath of the gods upon the world below.",
  },
  SourcePage="p.48",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Storm Burst",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "DisableDomainLVL1 (Weather)" then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["DomainWeatherAbilityTriggerLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domain Power ~ Lightning Lord",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWeatherAbilityTriggerLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWeatherLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(DomainWeatherLVL/2)+CHA"),
      Variables={
        "DomainWeatherDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainPowerTimes"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWeatherTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainAbilityTriggerLVL"),
      Type={
        Name="Domain",
      },
      Variables={
        "DomainWeatherAbilityTriggerLVL",
      },
    },
  },
  SpellLists={
    {
      Kind="Domain",
      Name="Weather",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Fog Cloud",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Call Lightning",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Sleet Storm",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Ice Storm",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Control Winds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Control Weather",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Storm of Vengeance",
          },
        },
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "Domain",
    "ClericDomain",
  },
})
DefineAbility({
  Name="Lightning Arc",
  Key="Domain Power ~ Lightning Arc",
  Category="Special Ability",
  Description={
    Format="As a standard action you can unleash an arc of electricity targeting any foe within 30 feet as a ranged touch attack. This arc of electricity deals 1d6+%1 points of electricity damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainAirLVL/2"),
      Formula("LightningArcTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainAirLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.41",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "LightningArcTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainAirTimes"),
      Variables={
        "LightningArcTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Air Domain",
  },
})
DefineAbility({
  Name="Electricity Resistance",
  Key="Domain Power ~ Electricity Resistance",
  Category="Special Ability",
  SourcePage="p.41",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Electricity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Electricity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainAirResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 6)
        end,
      },
      Variables={
        "DomainAirResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 12)
        end,
      },
      Variables={
        "DomainAirResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Air Domain",
  },
})
DefineAbility({
  Name="Speak with Animals",
  Key="Domain Power ~ Speak with Animals",
  Category="Special Ability",
  Description={
    Format="You can Speak with Animals, as per the spell, for %1 rounds per day.",
    Arguments={
      Formula("SpeakWithAnimalsRounds"),
    },
  },
  SourcePage="p.41",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "SpeakWithAnimalsRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "SpeakWithAnimalsRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+DomainAnimalLVL"),
      Variables={
        "SpeakWithAnimalsRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Animal Domain",
    "Communicate",
  },
})
DefineAbility({
  Name="Animal Companion",
  Key="Domain Power ~ Animal Companion",
  Category="Special Ability",
  Description={
    Format="You gain the service of an animal companion.",
  },
  SourcePage="p.41",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainAnimalLVL-3"),
      Variables={
        "AnimalCompanionMasterLVL",
      },
    },
  },
  FollowerTypes={
    {
      Type="Animal Companion",
      IsValidFollower=function (follower)
        return follower.RaceType == "Companion"
      end,
      FollowerLevelAdjustment=0,
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Animal Domain",
    "Animal Companion",
  },
  Followers={
    ['Animal Companion']=1,
  },
})
DefineAbility({
  Name="Artificer's Touch",
  Key="Domain Power ~ Artificer's Touch",
  Category="Special Ability",
  Description={
    Format="You can cast Mending at will (CL %1) to repair damaged objects. In addition, you can cause damage to objects and construct creatures by striking them with a melee touch attack. Objects and constructs take 1d6 points of damage. This attack bypasses up to %1 points of damage reduction and hardness. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainArtificeLVL"),
      Formula("ArtificersTouchTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainArtificeLVL"] < 2)
      end,
    },
  },
  SourcePage="p.41",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ArtificersTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ArtificersTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainArtificeTimes"),
      Variables={
        "ArtificersTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Artifice Domain",
  },
})
DefineAbility({
  Name="Dancing Weapons",
  Key="Domain Power ~ Dancing Weapons",
  Category="Special Ability",
  Description={
    Format="You can give a weapon toched the Dancing special weapon quality for 4 rounds. You can use this ability %1 times per day.",
    Arguments={
      Formula("DancingWeaponTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DancingWeaponTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DancingWeaponTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainArtificeLVL-4)/4"),
      Variables={
        "DancingWeaponTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Artifice Domain",
  },
})
DefineAbility({
  Name="Touch of Chaos",
  Key="Domain Power ~ Touch of Chaos",
  Category="Special Ability",
  Description={
    Format="You can imbue a target with chaos as a melee touch attack. For the next round, any time the target rolls a d20, he must roll twice and take the less favorable result. You can use this ability %1 times per day.",
    Arguments={
      Formula("TouchofChaosTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofChaosTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofChaosTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainChaosTimes"),
      Variables={
        "TouchofChaosTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Chaos Domain",
  },
})
DefineAbility({
  Name="Chaos Blade",
  Key="Domain Power ~ Chaos Blade",
  Category="Special Ability",
  Description={
    Format="You can give a weapon tocuhed the Anarchic special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainChaosLVL/2"),
      Formula("ChaosBladeTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds, %2/day)",
      Arguments={
        "DomainChaosLVL/2",
        "ChaosBladeTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ChaosBladeTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainChaosLVL-4)/4"),
      Variables={
        "ChaosBladeTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Chaos Domain",
  },
})
DefineAbility({
  Name="Dazing Touch",
  Key="Domain Power ~ Dazing Touch",
  Category="Special Ability",
  Description={
    Format="You can cause a living creature to become dazed for 1 round as a melee touch attack. Creatures with more thatn %1 Hit Dice are unaffected. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainCharmLVL"),
      Formula("DazingTouchTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DazingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DazingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainCharmTimes"),
      Variables={
        "DazingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Charm Domain",
  },
})
DefineAbility({
  Name="Charming Smile",
  Key="Domain Power ~ Charming Smile",
  Category="Special Ability",
  Description={
    Format="You can cast Charm Person as a swift action with a DC of %1. You can only have one creature charmed in this way at a time. The total duration of this effect is %2 round per day. These rounds do not need to be consecutive, and you can dismiss the charm anytime as a free action. Each attempt to use this ability consumes 1 round of its duration, whether or not the creature succeeds on its save to resist the effect.",
    Arguments={
      Formula("DomainCharmDC"),
      Formula("CharmCharmingSmileRounds"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "CharmCharmingSmileRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainCharmLVL"),
      Variables={
        "CharmCharmingSmileRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Charm Domain",
  },
})
DefineAbility({
  Name="Calming Touch",
  Key="Domain Power ~ Calming Touch",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action to heal it of 1d6+%1 points of nonlethal damage. This touch also removes the fatigued, shaken, and sickened conditions (but has no effect on more severe conditions). You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainCommunityLVL"),
      Formula("CalmingTouchTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "CalmingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "CalmingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainCommunityTimes"),
      Variables={
        "CalmingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Community Domain",
  },
})
DefineAbility({
  Name="Unity",
  Key="Domain Power ~ Unity",
  Category="Special Ability",
  Description={
    Format="Whenever a spell targets you and one or more allies within 30 feet, you can use this ability to allow your allies to use your saving throw against the effect instead of their own. Each ally must decide individually before the rolls are made. Using this ability is an immediate action. You can use this ability %1 times per day.",
    Arguments={
      Formula("UnityTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "UnityTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "UnityTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainCommunityLVL-4)/4"),
      Variables={
        "UnityTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Community Domain",
  },
})
DefineAbility({
  Name="Touch of Darkness",
  Key="Domain Power ~ Touch of Darkness",
  Category="Special Ability",
  Description={
    Format="As a melee touch attack, you can cause a creature's vision to be fraught with shadows and darkness. The creature touched treats all other creatures as if they had concealment, suffering a 20%% miss chance on all attack rolls. This effect lasts for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainDarknessLVL/2,1)"),
      Formula("TouchofDarknessTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofDarknessTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofDarknessTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDarknessTimes"),
      Variables={
        "TouchofDarknessTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Darkness Domain",
  },
})
DefineAbility({
  Name="Eyes of Darkness",
  Key="Domain Power ~ Eyes of Darkness",
  Category="Special Ability",
  Description={
    Format="Your vision is not impaired by lighting conditions, even in absolute darkness and magic darkness. You can use this ability for %1 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("EyesOfDarknessRounds"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "EyesOfDarknessRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "EyesOfDarknessRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDarknessLVL/2"),
      Variables={
        "EyesOfDarknessRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Sense",
    "Darkness Domain",
  },
})
DefineAbility({
  Name="Bleeding Touch",
  Key="Domain Power ~ Bleeding Touch",
  Category="Special Ability",
  Description={
    Format="As a melee touch attack, you can cause a living creature to take 1d6 points of damage per round. This effect persists for %1 rounds or until stopped with a DC 15 Heal check or any spell or effect that heals damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainDeathLVL/2,1)"),
      Formula("BleedingTouchTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BleedingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BleedingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDeathTimes"),
      Variables={
        "BleedingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Death Domain",
  },
})
DefineAbility({
  Name="Death's Embrace",
  Key="Domain Power ~ Death's Embrace",
  Category="Special Ability",
  Description={
    Format="You heal damage instead of taking damage from channeled negative energy. If the channeled negative energy targets undead, you heal hit points just like undead in the area.",
  },
  SourcePage="p.43",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Death Domain",
  },
})
DefineAbility({
  Name="Destructive Smite",
  Key="Domain Power ~ Destructive Smite",
  Category="Special Ability",
  Description={
    Format="You gain the destructive smite power; the supernatural ability to make a single melee attack with a +%1 morale bonus on damage rolls. You must declare the destructive smite before making the attack. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainDestructionLVL/2,1)"),
      Formula("DestructiveSmiteTimes"),
    },
  },
  SourcePage="p.43",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DestructiveSmiteTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DestructiveSmiteTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDestructionTimes"),
      Variables={
        "DestructiveSmiteTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Destruction Domain",
  },
})
DefineAbility({
  Name="Destructive Aura",
  Key="Domain Power ~ Destructive Aura",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of destruction for %1 rounds per day. All attacks made against targets in this aura (including you) gain a +%2 morale bonus on damage and all critical threats are automatically confirmed. These rounds do not need to be consecutive.",
    Arguments={
      Formula("DestructiveAuraRounds"),
      Formula("DomainDestructionLVL/2"),
    },
  },
  SourcePage="p.43",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "DestructiveAuraRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DestructiveAuraRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDestructionLVL"),
      Variables={
        "DestructiveAuraRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Destruction Domain",
  },
})
DefineAbility({
  Name="Acid Dart",
  Key="Domain Power ~ Acid Dart",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can unleash an acid dart targeting any foe within 30 feet as a ranged touch attack. This acid dart deals 1d6+%1 points of acid damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainEarthLVL/2"),
      Formula("AcidDartTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainEarthLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.43",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "AcidDartTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AcidDartTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainEarthTimes"),
      Variables={
        "AcidDartTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Earth Domain",
  },
})
DefineAbility({
  Name="Acid Resistance",
  Key="Domain Power ~ Acid Resistance",
  Category="Special Ability",
  SourcePage="p.43",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Acid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Acid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainEarthResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 6)
        end,
      },
      Variables={
        "DomainEarthResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 12)
        end,
      },
      Variables={
        "DomainEarthResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Earth Domain",
  },
})
DefineAbility({
  Name="Touch of Evil",
  Key="Domain Power ~ Touch of Evil",
  Category="Special Ability",
  Description={
    Format="You can cause a creature to become sickened as a melee touch attack. Creatures sickened by your touch count as good for the purposes of spells with the Evil descriptor. This ability lasts for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainEvilLVL/2,1)"),
      Formula("TouchofEvilTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofEvilTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofEvilTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainEvilTimes"),
      Variables={
        "TouchofEvilTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Evil Domain",
  },
})
DefineAbility({
  Name="Scythe of Evil",
  Key="Domain Power ~ Scythe of Evil",
  Category="Special Ability",
  Description={
    Format="You can give a weapon you touch the Unholy special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainEvilLVL/2"),
      Formula("ScytheOfEvilTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ScytheOfEvilTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ScytheOfEvilTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainEvilLVL-4)/4"),
      Variables={
        "ScytheOfEvilTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Evil Domain",
  },
})
DefineAbility({
  Name="Fire Bolt",
  Key="Domain Power ~ Fire Bolt",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can unleash a scorching bolt of divine fire from your hand. You can target any single foe within 30 feet as a ranged touch attack with this bolt of fire. If you hit the foe, the fire bolt deals 1d6+%1 points of fire damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainFireLVL/2"),
      Formula("FireBoltTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainFireLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "FireBoltTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "FireBoltTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainFireTimes"),
      Variables={
        "FireBoltTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Fire Domain",
  },
})
DefineAbility({
  Name="Fire Resistance",
  Key="Domain Power ~ Fire Resistance",
  Category="Special Ability",
  SourcePage="p.44",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Fire",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Fire",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainFireResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "FireResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 6)
        end,
      },
      Variables={
        "DomainFireResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 12)
        end,
      },
      Variables={
        "DomainFireResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Fire Domain",
  },
})
DefineAbility({
  Name="Touch of Glory",
  Key="Domain Power ~ Touch of Glory",
  Category="Special Ability",
  Description={
    Format="You can cause your hand to shimmer with divine radiance, allowing you to touch a creature as a standard action and give it a +%1 bonus to a single Charisma-based skill check or Charisma ability check. This ability lasts for one hour or until the creature touched elects to apply the bonus to a roll. You can use this ability to grant the bonus %2 times per day.",
    Arguments={
      Formula("DomainGloryLVL"),
      Formula("TouchofGloryTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofGloryTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofGloryTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainGloryTimes"),
      Variables={
        "TouchofGloryTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Glory Domain",
  },
})
DefineAbility({
  Name="Divine Presence",
  Key="Domain Power ~ Divine Presence",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of divine presence for %1 rounds. All allies within this aura are treated as if under the effects of a Sanctuary spell with a DC of %2. These rounds do not need to be consecutive. Activating this ability is a standard action. If an ally leaves the area or makes an attack, the effect ends for that ally. If you make an attack, the effect ends for you and your allies.",
    Arguments={
      Formula("GloryDivinePresenceRounds"),
      Formula("DomainGloryDC"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DomainGloryLVL",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainGloryLVL"),
      Variables={
        "GloryDivinePresenceRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Glory Domain",
  },
})
DefineAbility({
  Name="Touch of Good",
  Key="Domain Power ~ Touch of Good",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action, granting giving it a +%1 sacred bonus on attack rolls, skill checks, ability checks, and saving throws for 1 round. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainGoodLVL/2,1)"),
      Formula("TouchofGoodTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofGoodTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofGoodTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainGoodTimes"),
      Variables={
        "TouchofGoodTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Good Domain",
  },
})
DefineAbility({
  Name="Holy Lance",
  Key="Domain Power ~ Holy Lance",
  Category="Special Ability",
  Description={
    Format="You can give a weapon you touch the Holy special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainGoodLVL"),
      Formula("HolyLanceTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "HolyLanceTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "HolyLanceTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainGoodLVL-4)/4"),
      Variables={
        "HolyLanceTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Good Domain",
  },
})
DefineAbility({
  Name="Rebuke Death",
  Key="Domain Power ~ Rebuke Death",
  Category="Special Ability",
  Description={
    Format="You can touch a living creature as a standard action, healing it of 1d4+%1 points of damage. You can only use this ability on a creature that is below 0 hit points. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainHealingLVL/2"),
      Formula("RebukeDeathTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainHealingLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "RebukeDeathTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "RebukeDeathTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainHealingTimes"),
      Variables={
        "RebukeDeathTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Healing Domain",
  },
})
DefineAbility({
  Name="Healer's Blessing",
  Key="Domain Power ~ Healer's Blessing",
  Category="Special Ability",
  Description={
    Format="All of your cure spells are treated as if they were empowered, increasing the amount of damage healed by half (+50%%). This does not apply to damage dealt to undead with a cure spell. This does not stack with the Empower Spell metamagic feat.",
  },
  SourcePage="p.44",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Healing Domain",
  },
})
DefineAbility({
  Name="Lore Keeper",
  Key="Domain Power ~ Lore Keeper",
  Category="Special Ability",
  Description={
    Format="You can touch a creature to learn about its abilities and weaknesses. With a successful touch attack, you gain information as if you made the appropriate Knowledge skill check with a result equal to %1.",
    Arguments={
      Formula("LoreKeeperDomainSkillBonus"),
    },
  },
  SourcePage="p.45",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("15+DomainKnowledgeLVL+WIS"),
      Variables={
        "LoreKeeperDomainSkillBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Knowledge Domain",
  },
})
DefineAbility({
  Name="Remote Viewing",
  Key="Domain Power ~ Remote Viewing",
  Category="Special Ability",
  Description={
    Format="You can use Clairaudience/Clairvoyance as a spell-like ability (CL %1). You can use this ability for %1 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("RemoteViewingRounds"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "RemoteViewingRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "RemoteViewingRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainKnowledgeLVL"),
      Variables={
        "RemoteViewingRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Knowledge Domain",
  },
})
DefineAbility({
  Name="Touch of Law",
  Key="Domain Power ~ Touch of Law",
  Category="Special Ability",
  Description={
    Format="You can touch a willing creature as a standard action, infusing it with the power of divine order and allowing it to treat all attack rolls, skill checks, ability checks, and saving throws for 1 round as if the natural d20 roll resulted in an 11. You can use this ability %1 times per day.",
    Arguments={
      Formula("TouchofLawTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofLawTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofLawTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLawTimes"),
      Variables={
        "TouchofLawTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Law Domain",
  },
})
DefineAbility({
  Name="Staff of Order",
  Key="Domain Power ~ Staff of Order",
  Category="Special Ability",
  Description={
    Format="You can give a weapon touched the Axiomatic special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainLawLVL/2"),
      Formula("StaffOfOrderTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "StaffOfOrderTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "StaffOfOrderTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainLawLVL-4)/4"),
      Variables={
        "StaffOfOrderTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Law Domain",
  },
})
DefineAbility({
  Name="Liberation",
  Key="Domain Power ~ Liberation",
  Category="Special Ability",
  Description={
    Format="You have the ability to ignore impediments to your mobility. For %1 rounds per day, you can move normally regardless of magical effects that impede movement, as if you were affected by Freedom of Movement. This effect  occurs automatically as soon as it applies. These rounds do not need to be consecutive.",
    Arguments={
      Formula("LiberationRounds"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "LiberationRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "LiberationRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLiberationLVL"),
      Variables={
        "LiberationRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "ModifyMovement",
    "Liberation Domain",
  },
})
DefineAbility({
  Name="Freedom's Call",
  Key="Domain Power ~ Freedom's Call",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of freedom for %1 rounds per day. Allies within this aura are not affected by the confused, grappled, frightened, panicked, paralyzed, pinned, or shaken conditions. This aura only suppresses these effects, and they return once a creature leaves the aura or when the aura ends, if applicable. These rounds do not need to be consecutive.",
    Arguments={
      Formula("FreedomsCallRounds"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "FreedomsCallRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "FreedomsCallRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLiberationLVL"),
      Variables={
        "FreedomsCallRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Liberation Domain",
  },
})
DefineAbility({
  Name="Bit of Luck",
  Key="Domain Power ~ Bit of Luck",
  Category="Special Ability",
  Description={
    Format="You can touch a willing creature as a standard action, giving it a bit of luck. For the next round, any time the target rolls a d20, he may roll twice and take the more favorable result. You can use this ability %1 times per day.",
    Arguments={
      Formula("BitofLuckTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BitofLuckTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BitofLuckTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLuckTimes"),
      Variables={
        "BitofLuckTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Defensive",
    "Luck Domain",
  },
})
DefineAbility({
  Name="Good Fortune",
  Key="Domain Power ~ Good Fortune",
  Category="Special Ability",
  Description={
    Format="As an immediate action, you can reroll any one d20 roll that you have just made before the results of the roll are revealed. You must take the result of the reroll, even if it's worse than the original roll. You can use this ability %1 times per day.",
    Arguments={
      Formula("GoodFortuneTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "GoodFortuneTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "GoodFortuneTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLuckLVL/6"),
      Variables={
        "GoodFortuneTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Defensive",
    "Luck Domain",
  },
})
DefineAbility({
  Name="Vision of Madness",
  Key="Domain Power ~ Vision of Madness",
  Category="Special Ability",
  Description={
    Format="You can give a creature a vision of madness as a melee touch attack. Choose one of the following; attack rolls, saving throws, or skill checks. The target receives a +%1 bonus to the chosen rolls and a -%1 penalty to the other two types of rolls. This effect fades after 3 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainMadnessLVL/2,1)"),
      Formula("VisionofMadnessTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "VisionofMadnessTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "VisionofMadnessTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainMadnessTimes"),
      Variables={
        "VisionofMadnessTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Madness Domain",
  },
})
DefineAbility({
  Name="Aura of Madness",
  Key="Domain Power ~ Aura of Madness",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of madness for %1 rounds per day. Enemies within this aura are affected by Confusion unless they make a Will save (DC %2). The Confusion effect ends immediately when the creature leaves the area or the aura expires. Creatures that succeed on their saving throw are immune to this aura for 24 hours. These rounds do not need to be consecutive.",
    Arguments={
      Formula("AuraOfMadnessRounds"),
      Formula("DomainMadnessDC"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "AuraOfMadnessRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AuraOfMadnessRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainMadnessLVL"),
      Variables={
        "AuraOfMadnessRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Madness Domain",
  },
})
DefineAbility({
  Name="Hand of the Acolyte",
  Key="Domain Power ~ Hand of the Acolyte",
  Category="Special Ability",
  Description={
    Format="You can cause your melee weapon to fly from your grasp and strike a foe before instantly returning. As a standard action, you can make a single attack with a melee weapon at a range of 30 feet. This attack is treated as a ranged attack with a thrown weapon, except that you add your Wisdom modifier instead of your Dexterity modifier (damage still relies on Strength). This ability cannot be used to perform a combat maneuver. You can use this ability %1 times per day.",
    Arguments={
      Formula("HandoftheAcolyteTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "HandoftheAcolyteTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "HandoftheAcolyteTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainMagicTimes"),
      Variables={
        "HandoftheAcolyteTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Magic Domain",
  },
})
DefineAbility({
  Name="Dispelling Touch",
  Key="Domain Power ~ Dispelling Touch",
  Category="Special Ability",
  Description={
    Format="You can use a targeted Dispel Magic effect as a melee touch attack. You can use this ability %1 times per day.",
    Arguments={
      Formula("DispellingTouchTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DispellingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DispellingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainMagicLVL-4)/4"),
      Variables={
        "DispellingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Magic Domain",
  },
})
DefineAbility({
  Name="Inspiring Word",
  Key="Domain Power ~ Inspiring Word",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can speak an inspiring word to a creature within 30 feet. That creature receives a +2 morale bonus on attack rolls, skill checks, ability checks, and saving throws for %1 rounds. You can use this power %2 times per day.",
    Arguments={
      Formula("max(DomainNobilityLVL/2,1)"),
      Formula("DomainNobilityTimes"),
    },
  },
  SourcePage="p.46",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Nobility Domain",
  },
})
DefineAbility({
  Name="Leadership",
  Key="Domain Power ~ Leadership",
  Category="Special Ability",
  Description={
    Format="You receive Leadership as a bonus feat. In addition, you gain a +2 bonus on your leadership score as long as you uphold the tenets of your deity (or divine concept if you do not venerate a deity).",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Leadership",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Nobility Domain",
  },
})
DefineAbility({
  Name="Wooden Fist",
  Key="Domain Power ~ Wooden Fist",
  Category="Special Ability",
  Description={
    Format="As a free action, your hands can become as hard as wood, covered in tiny thorns. While you have wooden fists, your unarmed strikes do not provoke attacks of opportunity, deal lethal damage, and gain a +%1 bonus on damage rolls. You can use this ability for %2 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("max(DomainPlantLVL/2,1)"),
      Formula("WoodenFistRounds"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "WoodenFistRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WoodenFistRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+WIS"),
      Variables={
        "WoodenFistRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Plant Domain",
  },
})
DefineAbility({
  Name="Bramble Armor",
  Key="Domain Power ~ Bramble Armor",
  Category="Special Ability",
  Description={
    Format="You can cause a host of wooden thorns to burst from your skin as a free action. While Bramble Armor is in effect, any foe striking you with an unarmed strike or a melee weapon without reach takes 1d6+%1 points of piercing damage. You can use this ability for %2 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("DomainPlantLVL/2"),
      Formula("BrambleArmorRounds"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "BrambleArmorRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BrambleArmorRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainPlantLVL"),
      Variables={
        "BrambleArmorRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Defensive",
    "Plant Domain",
  },
})
DefineAbility({
  Name="Resistant Touch",
  Key="Domain Power ~ Resistant Touch",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can touch an ally and grant them your +%1 resistance bonus for 1 minute. When you use this ability, you lose your resistance bonus granted by the Protection domain for 1 minute. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainProtectionSaveBonus"),
      Formula("ResistantTouchTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ResistantTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ResistantTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainProtectionTimes"),
      Variables={
        "ResistantTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Defensive",
    "Protection Domain",
  },
})
DefineAbility({
  Name="Aura of Protection",
  Key="Domain Power ~ Aura of Protection",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of protection for %1 rounds per day. You and your allies within this aura gain a +%2 deflection to AC resistance 5 against all elements (acid, cold, electricity, fire, and sonic). These rounds do not need to be consecutive.",
    Arguments={
      Formula("AuraOfProtectionRounds"),
      Formula("(DomainProtectionLVL-4)/4"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "AuraOfProtectionRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AuraOfProtectionRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainProtectionLVL"),
      Variables={
        "AuraOfProtectionRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Protection Domain",
  },
})
DefineAbility({
  Name="Gentle Rest",
  Key="Domain Power ~ Gentle Rest",
  Category="Special Ability",
  Description={
    Format="Your touch can fill a creature with lethargy, causing a living creature to become staggered for 1 round as a melee touch attack. If you touch a staggered living creatures, that creature falls asleep for 1 round instead. Undead creatures touched by you are staggered for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("WIS"),
      Formula("GentleRestTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "GentleRestTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "GentleRestTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainReposeTimes"),
      Variables={
        "GentleRestTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Repose Domain",
  },
})
DefineAbility({
  Name="Ward Against Death",
  Key="Domain Power ~ Ward Against Death",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura that wards against death for %1 rounds per day. Living creatures in this area are immune to death effects, energy drain, and effects that cause negative levels. This ward does not remove negative levels that a creature has already gained, but the negative levels have no effect while the creature is inside the warded area. These rounds do not need to be consecutive.",
    Arguments={
      Formula("WardAgainstDeathRounds"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "WardAgainstDeathRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WardAgainstDeathRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainReposeLVL"),
      Variables={
        "WardAgainstDeathRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Repose Domain",
  },
})
DefineAbility({
  Name="Blast Rune",
  Key="Domain Power ~ Blast Rune",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can create a Blast Rune in any adjacent square. Any creature entering this square takes 1d6+%1 points of damage. This rune deals either acid, cold, electricity, or fire damage, decided when you create the rune. The rune is invisible and lasts %2 rounds or until discharged. You cannot create a Blast Rune in a square occupied by another creature. This rune counts as a 1st-level spell for the purposes of dispelling. It can be discovered with at DC 26 Perception skill check and disarmed with a DC 26 Disable Device skill check. You can use this ability %3 times per day.",
    Arguments={
      Formula("DomainRuneLVL/2"),
      Formula("DomainRuneLVL"),
      Formula("BlastRuneTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainRuneLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BlastRuneTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BlastRuneTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainRuneTimes"),
      Variables={
        "BlastRuneTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Rune Domain",
  },
})
DefineAbility({
  Name="Spell Rune",
  Key="Domain Power ~ Spell Rune",
  Category="Special Ability",
  Description={
    Format="You can attach another spell that you cast to one of your Blast Runes, causing that spell to affect the creature that triggers the rune, in addition to the damage. This spell must be of at least one level lower than the highest-level cleric spell you can cast, and it must target one or more creatures. Regardless of the number of targets the spell can normally affect, it only affects the creature that triggers the rune.",
  },
  SourcePage="p.47",
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Rune Domain",
  },
})
DefineAbility({
  Name="Strength Surge",
  Key="Domain Power ~ Strength Surge",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can touch a creature to give it great strength. For 1 round, the target gains a +%1 enhancement bonus to melee attacks. combat maneuver checks that rely on Strength, Stregth-based skills, and Strength checks. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainStrengthLVL/2,1)"),
      Formula("StrengthSurgeTimes"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "StrengthSurgeTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "StrengthSurgeTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainStrengthTimes"),
      Variables={
        "StrengthSurgeTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Strength Domain",
  },
})
DefineAbility({
  Name="Might of the Gods",
  Key="Domain Power ~ Might of the Gods",
  Category="Special Ability",
  Description={
    Format="You can add a +%1 enhancement bonus to your Strength score for %1 rounds per day. That bonus only applies on Strength checks and Strength-based skill checks. These rounds do not need to be consecutive.",
    Arguments={
      Formula("MightOfTheGodsRounds"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "MightOfTheGodsRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "MightOfTheGodsRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainStrengthLVL"),
      Variables={
        "MightOfTheGodsRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Strength Domain",
  },
})
DefineAbility({
  Name="Sun's Blessing",
  Key="Domain Power ~ Sun's Blessing",
  Category="Special Ability",
  Description={
    Format="Whenever you channel positive energy to harm undead creatures, add a +%1 bonus to the damage dealt. Undead do not add their channel resistance to their saves when you channel positive energy.",
    Arguments={
      Formula("DomainSunLVL"),
    },
  },
  SourcePage="p.47",
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Sun Domain",
  },
})
DefineAbility({
  Name="Nimbus of Light",
  Key="Domain Power ~ Nimbus of Light",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot nimbus of light for %1 rounds per day. This acts as a Daylight spell. In addition, undead within this radius take %1 points of damage each round that they remain inside the nimbus. Spells and spell-like abilities with the Darkness descriptor are automatically dispelled if brought inside this nimbus. These rounds do not need to be consecutive.",
    Arguments={
      Formula("SunNimbusOfLightRounds"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "SunNimbusOfLightRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "SunNimbusOfLightRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainSunLVL"),
      Variables={
        "SunNimbusOfLightRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
    "Sun Domain",
  },
})
DefineAbility({
  Name="Agile Feet",
  Key="Domain Power ~ Agile Feet",
  Category="Special Ability",
  Description={
    Format="As a free action, you can gain increased mobility for 1 round. For the next round, you ignore all difficult terrain and do not take any penalties for moving through it. You can use this ability %1 times per day.",
    Arguments={
      Formula("AgileFeetTimes"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "AgileFeetTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AgileFeetTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainTravelTimes"),
      Variables={
        "AgileFeetTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "ModifyMovement",
    "Travel Domain",
  },
})
DefineAbility({
  Name="Dimensional Hop",
  Key="Domain Power ~ Dimensional Hop",
  Category="Special Ability",
  Description={
    Format="You can teleport up to %1 feet per day as a move action. This teleportation must be used in 5-foot increments and such movement does not provoke attacks of opportunity. You must have line of sight to your destination to use this ability. You can bring other willing creatures with you, but you must expend an equal amount of distance for each creature brought.",
    Arguments={
      Formula("TravelDimensionalHop"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 5-ft. increments)",
      Arguments={
        "TravelDimensionalHop/5",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TravelDimensionalHop/5",
      },
    },
    {
      Name="CheckType",
      FormatString="5-ft. increments",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainTravelLVL*10"),
      Variables={
        "TravelDimensionalHop",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "ModifyMovement",
    "Travel Domain",
  },
})
DefineAbility({
  Name="Copycat",
  Key="Domain Power ~ Copycat",
  Category="Special Ability",
  Description={
    Format="You can create an illusory double of yourself as a move action. This double functions as a single Mirror Image and lasts for %1 rounds, or until the illusory duplicate is dispelled or destroyed. You can have no more than one Copycat at a time. This ability does not stack with the Mirror Image spell. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainTrickeryLVL"),
      Formula("CopycatTimes"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "CopycatTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "CopycatTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainTrickeryTimes"),
      Variables={
        "CopycatTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Trickery Domain",
  },
})
DefineAbility({
  Name="Master's Illusion",
  Key="Domain Power ~ Master's Illusion",
  Category="Special Ability",
  Description={
    Format="You can create an illusion that hides the appearance of yourself and any number of allies within 30 feet for %1 rounds. This ability otherwise functions like the spell Veil. The save DC to disbelieve this effect is %2. The rounds do not need to be consecutive.",
    Arguments={
      Formula("TrickeryMastersIllusionRounds"),
      Formula("TrickeryMastersIllusionDC"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TrickeryMastersIllusionRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(DomainTrickeryLVL/2)+WIS"),
      Variables={
        "TrickeryMastersIllusionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainTrickeryLVL"),
      Variables={
        "TrickeryMastersIllusionRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Defensive",
    "Trickery Domain",
  },
})
DefineAbility({
  Name="Battle Rage",
  Key="Domain Power ~ Battle Rage",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action to give it a +%1 bonus on melee damage rolls for 1 round. You can do so %2 times per day.",
    Arguments={
      Formula("max(DomainWarLVL/2,1)"),
      Formula("BattleRageTimes"),
    },
  },
  SourcePage="p.48",
  TemporaryBonus={
    Bonus={
      Category="WEAPON",
      Formula=Formula("max(DomainWarLVL/2,1)"),
      Variables={
        "DAMAGE",
      },
    },
    Target="EQ|Melee",
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BattleRageTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BattleRageTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWarTimes"),
      Variables={
        "BattleRageTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "War Domain",
  },
})
DefineAbility({
  Name="Weapon Master",
  Key="Domain Power ~ Weapon Master",
  Category="Special Ability",
  Description={
    Format="As a swift action, you gain the use of one combat feat for %1 rounds per day. These rounds do not need to be consecutive and you can change the feat chosen each time you use this ability. You must meet the prerequisites to use these feats.",
    Arguments={
      Formula("WeaponMasterRounds"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "WeaponMasterRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WeaponMasterRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWarLVL"),
      Variables={
        "WeaponMasterRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "War Domain",
  },
})
DefineAbility({
  Name="Icicle",
  Key="Domain Power ~ Icicle",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can fire an icicle from your finger, targeting any foe within 30 feet as a ranged touch attack. The icicle deals 1d6+%1 points of cold damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainWaterLVL/2"),
      Formula("IcicleTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainWaterLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "IcicleTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "IcicleTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWaterTimes"),
      Variables={
        "IcicleTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Water Domain",
  },
})
DefineAbility({
  Name="Cold Resistance",
  Key="Domain Power ~ Cold Resistance",
  Category="Special Ability",
  SourcePage="p.48",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Cold",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWaterResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ColdResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 6)
        end,
      },
      Variables={
        "DomainWaterResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 12)
        end,
      },
      Variables={
        "DomainWaterResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Water Domain",
  },
})
DefineAbility({
  Name="Storm Burst",
  Key="Domain Power ~ Storm Burst",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can create a storm burst targeting any foe within 30 feet as a ranged touch attack. The storm burst deals 1d6+%1 points of nonlethal damage. In addition, the target is buffeted by winds and rain, causing it to take a -2 penalty on attack rolls for 1 round. You can use this ability %2 times per day",
    Arguments={
      Formula("DomainWeatherLVL/2"),
      Formula("StormBurstTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainWeatherLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "StormBurstTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "StormBurstTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWeatherTimes"),
      Variables={
        "StormBurstTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
    "Weather Domain",
  },
})
DefineAbility({
  Name="Lightning Lord",
  Key="Domain Power ~ Lightning Lord",
  Category="Special Ability",
  Description={
    Format="You can call down %1 bolts of lightning per day. You can call down as many bolts as you want with a single standard action, but no creature can be the target of more than one bolt and no two targets can be more than 30 feet apart. This ability otherwise functions as Call Lightning.",
    Arguments={
      Formula("WeatherLightningLordTimes"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WeatherLightningLordTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWeatherLVL"),
      Variables={
        "WeatherLightningLordTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Weather Domain",
  },
})
DefineAbility({
  Name="Spontaneous Casting",
  Key="Druid ~ Spontaneous Casting",
  Category="Special Ability",
  Description={
    Format="You can channel stored spell energy into summoning spells that you haven't prepares ahead of time. You can \"lose\" any prepared spell in order to cast any Summon Nature's Ally spell of the same spell level or lower",
  },
  SourcePage="p.49",
  Types={
    "DruidClassFeatures",
    "SpecialAttack",
  },
})
DefineAbility({
  Name="Orisons",
  Key="Druid ~ Orisons",
  Category="Special Ability",
  Description={
    Format="You can prepare a number of orisons, or 0-level spells. These spells are cast like any other spells, but they are not expended when used and may be used again.",
  },
  SourcePage="p.49",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Nature Sense",
  Key="Druid ~ Nature Sense",
  Category="Special Ability",
  Description={
    Format="You gain a +2 bonus on Knowledge (Nature) and Survival skill checks.",
  },
  SourcePage="p.50",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("2"),
      Variables={
        "Knowledge (Nature)",
        "Survival",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Wild Empathy",
  Key="Druid ~ Wild Empathy",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Wild Empathy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DruidLVL"),
      Variables={
        "WildEmpathyLVL",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "Wild Empathy",
  },
})
DefineAbility({
  Name="Woodland Stride",
  Key="Druid ~ Woodland Stride",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Woodland Stride",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "Woodland Stride",
  },
})
DefineAbility({
  Name="Trackless Step",
  Key="Druid ~ Trackless Step",
  Category="Special Ability",
  Description={
    Format="You leave no trail in natural surroundings and cannot be tracked. You may choose to leave a trail if so desired.",
  },
  SourcePage="p.51",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Resist Nature's Lure",
  Key="Druid ~ Resist Nature's Lure",
  Category="Special Ability",
  Description={
    Format="You gain a +4 bonus on saving throws against the spell-like and supernatural abilities of fey. This bonus also applies to spells and effects that utilize and target plants, such as Blight, Entangle, Spike Growth, and Warp Wood.",
  },
  SourcePage="p.51",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+4 vs. spell-like and supernatural abilities of fey and spells and effects that utilize and target plants",
    },
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Venom Immunity",
  Key="Druid ~ Venom Immunity",
  Category="Special Ability",
  Description={
    Format="You are Immune to all poisons.",
  },
  SourcePage="p.51",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="A Thousand Faces",
  Key="Druid ~ A Thousand Faces",
  Category="Special Ability",
  Description={
    Format="You have the ability to change your appearance at will, as if using the Alter Self spell, but only while in your normal form.",
  },
  SourcePage="p.51",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Nature Bond",
  Key="Druid ~ Nature Bond",
  Category="Special Ability",
  Description={
    Format="At 1st level, a druid forms a bond with nature. This bond can take one of two forms. The first is a close tie to the natural world, granting the druid one of the following cleric domains: Air, Animal, Earth, Fire, Plant, Water, or Weather. When determining the powers and bonus spells granted by this domain, the druid's effective cleric level is equal to her druid level. A druid that selects this option also receives additional domain spell slots, just like a cleric. She must prepare the spell from her domain in this slot and this spell cannot be used to cast a spell spontaneously. The second option is to form a close bond with an animal companion. A druid may begin play with any of the animals listed in the Animal Companions section beginning on page 51. This animal is a loyal companion that accompanies the druid on her adventures. Unlike normal animals of its kind, an animal companion's Hit Dice, abilities, skills, and feats advance as the druid advances in level. If a character receives an animal companion from more than one source, her effective druid levels stack for the purposes of determining the statistics and abilities of the companion. Most animal companions increase in size when their druid reaches 4th or 7th level, depending on the companion. If a druid releases her companion from service, she may gain a new one by performing a ceremony requiring 24 uninterrupted hours of prayer in the environment where the new companion typically lives. This ceremony can also replace an animal companion that has perished.",
  },
  SourcePage="p.50",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Nature Bond",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Timeless Body",
  Key="Druid ~ Timeless Body",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Timeless Body",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "Timeless Body",
  },
})
DefineAbility({
  Name="Animal Companion",
  Key="Nature's Bond ~ Animal Companion",
  Category="Special Ability",
  SourcePage="p.51",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Animal Companion ~ Standard Companions",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.IsAnyType("NatureBondAnimalCompanion", "NaturesBondAnimalCompanion") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Animal Companion ~ Base",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "AnimalCompanionGranted",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CompanionMasterLVL_Druid"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CompanionDisable_AnimalCompanion"] == 0)
        end,
      },
      Variables={
        "AnimalCompanionMasterLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DruidLVL"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.IsAnyType("DruidAnimalCompanion") then return true end
            return false
          end)
        end,
      },
      Variables={
        "CompanionMasterLVL_Druid",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Druid_CF_AnimalCompanion"] == 0)
    end,
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "NatureBond",
    "DruidAnimalCompanion",
    "Animal Companion",
  },
})
DefineAbility({
  Name="Animal Companion ~ Base",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Companion ~ Animal Companion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["CompanionDisable_AnimalCompanion"] == 0)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Animal Companion ~ Standard Companions",
  Category="Internal",
  FollowerTypes={
    {
      Type="Animal Companion",
      IsValidFollower=function (follower)
        return follower.RaceType == "Companion"
      end,
      FollowerLevelAdjustment=0,
    },
  },
})
DefineAbility({
  Name="Druid Domain",
  Key="Nature's Bond ~ Druid Domain",
  Category="Special Ability",
  SourcePage="p.50",
  Visible=true,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Domains",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Druid Domain ~ Base",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.IsAnyType("NatureBondDruidDomain", "NaturesBondDruidDomain") then return true end
            return false
          end))
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Druid Domain",
      },
    },
    {
      Category="DOMAIN",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.IsAnyType("DruidDomainSelection") then return true end
            return false
          end)
        end,
      },
      Variables={
        "NUMBER",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "DomainTaken",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DruidLVL"),
      Variables={
        "DomainLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Druid_CF_DruidDomain"] == 0)
    end,
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "NatureBond",
    "DruidDomain",
    "CF_Domain",
  },
})
DefineAbility({
  Name="Druid Domain ~ Base",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="DruidDomain",
      },
      Variables={
        "DruidAirAllowed",
        "DruidAnimalAllowed",
        "DruidEarthAllowed",
        "DruidFireAllowed",
        "DruidPlantAllowed",
        "DruidWaterAllowed",
        "DruidWeatherAllowed",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
DefineAbility({
  Name="Air",
  Key="Druid Domain ~ Air",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="You can manipulate lightning, mist, and wind, traffic with air creatures, and are resistant to electricity damage.",
  },
  SourcePage="p.41",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidAirAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Wind Wall",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Gaseous Form",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Air Walk",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Control Winds",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Chain Lightning",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Air Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Air Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Animal",
  Key="Druid Domain ~ Animal",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="You can speak with and befriend animals with ease. In addition, you treat Knowledge (Nature) as a class skill.",
  },
  SourcePage="p.41",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidAnimalAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Calm Animals",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Hold Animal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dominate Animal",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Summon Nature's Ally IV (Animals Only)",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Beast Shape III (Animals Only)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antilife Shell",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animal Shapes",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Summon Nature's Ally VIII (Animals Only)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Earth",
  Key="Druid Domain ~ Earth",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="You have mastery over earth, metal, and stone, can fire darts of acid, and command earth creatures.",
  },
  SourcePage="p.43",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidEarthAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Stone",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Soften Earth and Stone",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Stone Shape",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spike Stones",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Stone",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Earth Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Earth Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Fire",
  Key="Druid Domain ~ Fire",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="You can call forth fire, command creatures of the inferno, and your flesh does not burn.",
  },
  SourcePage="p.44",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidFireAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Produce Flame",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Fireball",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Wall of Fire",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Fire Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Incendiary Cloud",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Fire Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Plant",
  Key="Druid Domain ~ Plant",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="You find solace in the green, can grow defensive thorns, and can communicate with plants.",
  },
  SourcePage="p.46",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidPlantAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entangle",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Barkskin",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Plant Growth",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Command Plants",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Thorns",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Repel Wood",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animate Plants",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Control Plants",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shambler",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Water",
  Key="Druid Domain ~ Water",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="You can manipulate water and mist and ice, conjure creatures of water, and resist cold.",
  },
  SourcePage="p.48",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidWaterAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Fog Cloud",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Water Breathing",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Control Water",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Ice Storm",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Cone of Cold",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV (Water Only)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Horrid Wilting",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm (Water Spell Only)",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weather",
  Key="Druid Domain ~ Weather",
  SortKey="Domain ~ Base",
  Category="Special Ability",
  Description={
    Format="With power over storm and sky, you can call down the wrath of the gods upon the world below.",
  },
  SourcePage="p.48",
  Conditions={
    function (character, item, sources)
      return (character.Variables["DruidWeatherAllowed"] == 1)
    end,
  },
  SpellLists={
    {
      Kind="Class",
      Name="Druid",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Fog Cloud",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Call Lightning",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Sleet Storm",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Ice Storm",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Control Winds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Control Weather",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Storm of Vengeance",
          },
        },
      },
    },
  },
  Types={
    "DruidDomainSelection",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change shape at will for up to %1 hours",
    Arguments={
      Formula("WildShapeDuration"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 9) and (character.Variables["Druid_CF_WildShapeUses20"] == 0)
      end,
    },
  },
  SourcePage="p.51",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Druid Wild Shape Progression",
        "Druid Wild Shape Times",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DruidLVL"),
      Variables={
        "DruidWildShape",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Wild Shape",
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Small or Medium animal.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 1) and (character.Variables["WildShapeAbilityLevel"] >= 1)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Tiny, Small, Medium or Large animal, or a Small elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 2) and (character.Variables["WildShapeAbilityLevel"] >= 2)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Tiny, Small, Medium or Large animal.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 2) and (character.Variables["WildShapeAbilityLevel"] >= 2)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 2) and (character.Variables["WildShapeAbilityLevel"] >= 2)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, a Small or Medium elemental, or a Small or Medium plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, or a Small or Medium elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, or a Small or Medium plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small or Medium elemental, or a Small or Medium plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small or Medium elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small or Medium plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, a Small, Medium or Large elemental, or a Small, Medium or Large plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, or a Small, Medium or Large elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, or a Small, Medium or Large plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small, Medium or Large elemental, or a Small, Medium or Large plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small, Medium or Large elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small, Medium or Large plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, a Small, Medium, Large or Huge elemental, or a Small, Medium, Large or Huge plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, or a Small, Medium, Large or Huge elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal, or a Small, Medium, Large or Huge plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small, Medium, Large or Huge elemental, or a Small, Medium, Large or Huge plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into any Diminutive, Tiny, Small, Medium, Large or Huge animal.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small, Medium, Large or Huge elemental.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 0) and (character.Variables["NoPlantShape"] == 1)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="You can change into a Small, Medium, Large or Huge plant creature.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 1) and (character.Variables["NoElementalShape"] == 1) and (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an animal, this functions as Beast Shape I",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 1) and (character.Variables["WildShapeAbilityLevel"] >= 1)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an animal, this functions as Beast Shape II",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 2) and (character.Variables["WildShapeAbilityLevel"] >= 2)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an animal, this functions as Beast Shape III",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoAnimalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into a plant, this functions as Plant Shape I",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into a plant, this functions as Plant Shape II",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into a plant, this functions as Plant Shape III",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoPlantShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an elemental, this functions as Elemental Body I",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoElementalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 2) and (character.Variables["WildShapeAbilityLevel"] >= 2)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an elemental, this functions as Elemental Body II",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoElementalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 3) and (character.Variables["WildShapeAbilityLevel"] >= 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an elemental, this functions as Elemental Body III",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoElementalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] == 4) and (character.Variables["WildShapeAbilityLevel"] >= 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Description={
    Format="When changing into an elemental, this functions as Elemental Body IV",
    Conditions={
      function (character, item, sources)
        return (character.Variables["NoElementalShape"] == 0)
      end,
      function (character, item, sources)
        return (character.Variables["WildShapeProgression"] >= 5) and (character.Variables["WildShapeAbilityLevel"] >= 5)
      end,
    },
  },
})
DefineAbility({
  Name="Ink Cloud",
  Key="Octopus Wild Shape ~ Ink Cloud",
  Category="Special Ability",
  Description={
    Format="An octopus can emit a 10ft radius sphere of ink once per minute as a free action. The ink provides total concealment in water, and persists for 1 minute.",
  },
  SourcePage="p.219",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Jet",
  Key="Octopus Wild Shape ~ Jet",
  Category="Special Ability",
  Description={
    Format="An octopus can jet backward once per round as a full-round action, at a speed of 200 ft. It must move in a straight line while jetting, and does not provoke attacks of opportunity when it does so.",
  },
  SourcePage="p.219",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
  Movement={
    Jet=200,
  },
})
DefineAbility({
  Name="Poison",
  Key="Octopus Wild Shape ~ Poison",
  Category="Special Ability",
  Description={
    Format="Bite-injury; save Fort DC 13; frequency 1/round for 6 rounds; effect 1 Str; cure 1 save.",
  },
  SourcePage="p.219",
  Types={
    "DruidClassFeatures",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Poison",
  Key="Lizard Monitor Wild Shape ~ Poison",
  Category="Special Ability",
  Description={
    Format="Bite--injury; save Fort DC %1; onset 1 minute; frequency 1/hour for 6 hours; effect 1d2 Dexterity damage; cure 1 save.",
    Arguments={
      Formula("PoisonSaveDC"),
    },
  },
  SourcePage="p.194",
  Abilities={
    {
      Category="Ability Focus",
      Nature="AUTOMATIC",
      Names={
        "Poison",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "PoisonSaveDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Ability Focus (Poison)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "PoisonSaveDC",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Sprint",
  Key="Cheetah Wild Shape ~ Sprint",
  Category="Special Ability",
  Description={
    Format="Once per hour, a cheetah can move at 10 times its normal speed (500 feet) when it makes a charge.",
  },
  SourcePage="p.40",
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Tongue",
  Key="Giant Frog Wild Shape ~ Tongue",
  Category="Special Ability",
  Description={
    Format="A giant frog's tongue is a primary attack with reach equal to three times the frog's normal reach (15 feet for a Medium giant frog). A giant frog's tongue deals no damage on a hit, but can be used to grab. A giant frog does not gain the grappled condition while using its tongue in this manner.",
  },
  SourcePage="p.135",
  Types={
    "DruidClassFeatures",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Druid ~ Wild Shape",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Druid Wild Shape Progression",
        "Druid Wild Shape Times",
        "Wild Shape",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DruidWildShape"),
      Variables={
        "WildShapeDuration",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DruidLVL>=4)+(DruidLVL>=6)+(DruidLVL>=8)+(DruidLVL>=10)+(DruidLVL>=12)+(DruidLVL>=14)+(DruidLVL>=16)+(DruidLVL>=18)+(DruidLVL>=20)"),
      Type={
        Name="BASE",
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "Internal",
    "ClassFeatures",
    "DruidWildshape",
  },
})
DefineAbility({
  Name="Druid Wild Shape Progression",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DruidWildShape>=4)+(DruidWildShape>=6)+(DruidWildShape>=8)+(DruidWildShape>=10)+(DruidWildShape>=12)+(DruidWildShape>=14)+(DruidWildShape>=16)+(DruidWildShape>=18)+(DruidWildShape>=20)"),
      Type={
        Name="BASE",
      },
      Variables={
        "WildShapeProgression",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "Internal",
    "ClassFeatures",
    "DruidWildshape",
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 4) and (character.Variables["Druid_CF_WildShapeOptions4"] == 1)
        end,
      },
      Variables={
        "WildShapeAbilityLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 6) and (character.Variables["Druid_CF_WildShapeOptions6"] == 1)
        end,
      },
      Variables={
        "WildShapeAbilityLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 8) and (character.Variables["Druid_CF_WildShapeOptions8"] == 1)
        end,
      },
      Variables={
        "WildShapeAbilityLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 10) and (character.Variables["Druid_CF_WildShapeOptions10"] == 1)
        end,
      },
      Variables={
        "WildShapeAbilityLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Wild Shape",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 12) and (character.Variables["Druid_CF_WildShapeOptions12"] == 1)
        end,
      },
      Variables={
        "WildShapeAbilityLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 4) and (character.Variables["Druid_CF_WildShapeUses4"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 6) and (character.Variables["Druid_CF_WildShapeUses6"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 8) and (character.Variables["Druid_CF_WildShapeUses8"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 10) and (character.Variables["Druid_CF_WildShapeUses10"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 12) and (character.Variables["Druid_CF_WildShapeUses12"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 14) and (character.Variables["Druid_CF_WildShapeUses14"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 16) and (character.Variables["Druid_CF_WildShapeUses16"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 18) and (character.Variables["Druid_CF_WildShapeUses18"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Druid Wild Shape Times",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DruidWildShape"] >= 20) and (character.Variables["Druid_CF_WildShapeUses20"] == 1)
        end,
      },
      Variables={
        "WildShapeTimes",
      },
    },
  },
})
DefineAbility({
  Name="Fighter Level Advanced Feat Tracker",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FighterWeaponQualifyLVL"),
      Variables={
        "WeaponSpecQualifyLVL",
        "DisruptiveQualifyLVL",
        "GreatShieldFocusQualifyLVL",
        "GreatWeapFocusQualifyLVL",
        "SpellbreakerQualifyLVL",
        "GreatWeapSpecQualifyLVL",
        "PenetratingStrikeQualifyLVL",
        "CriticalMasteryQualifyLVL",
        "GreatPenetratingStrikeQualifyLVL",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Weapon Specialization Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["WeaponSpecQualifyLVL"] >= 4)
        end,
      },
      Variables={
        "WeapSpecQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Disruptive Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisruptiveQualifyLVL"] >= 6)
        end,
      },
      Variables={
        "DisruptiveQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Greater Shield Focus Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["GreatShieldFocusQualifyLVL"] >= 8)
        end,
      },
      Variables={
        "GreatShieldFocusQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Greater Weapon Focus Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["GreatWeapFocusQualifyLVL"] >= 8)
        end,
      },
      Variables={
        "GreatWeapFocusQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Spellbreaker Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["SpellbreakerQualifyLVL"] >= 6)
        end,
      },
      Variables={
        "SpellbreakerQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Greater Weapon Specialization Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["GreatWeapSpecQualifyLVL"] >= 12)
        end,
      },
      Variables={
        "GreatWeapSpecQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Penetrating Strike Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["PenetratingStrikeQualifyLVL"] >= 12)
        end,
      },
      Variables={
        "PenetratingStrikeQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Critical Mastery Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CriticalMasteryQualifyLVL"] >= 14)
        end,
      },
      Variables={
        "CriticalMasteryQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Greater Penetrating Strike Qualify",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["GreatPenetratingStrikeQualifyLVL"] >= 16)
        end,
      },
      Variables={
        "GreatPenetratingStrikeQualify",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "Internal",
    "FighterWeaponQualify",
  },
})
DefineAbility({
  Name="Bravery",
  Key="Fighter ~ Bravery",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus to Will saves against fear effects.",
    Arguments={
      Formula("Bravery"),
    },
  },
  SourcePage="p.55",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+%1 Will vs. fear",
      Arguments={
        "Bravery",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(BraveryLVL+2)/4"),
      Variables={
        "Bravery",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Bravery",
  },
})
DefineAbility({
  Name="Armor Training",
  Key="Fighter ~ Armor Training",
  Category="Special Ability",
  Description={
    Format="You are more maneuverable while wearing armor. Whenever you are wearing armor, you reduce the armor check penalty by %1 and increase the maximum Dexterity bonus allowed by your armor by +%1",
    Arguments={
      Formula("ArmorTrainingTier"),
    },
  },
  SourcePage="p.55",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Armor Training ~ Heavy Armor",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArmorTrainingLVL"] >= 7)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="MISC",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTrainingTier"] >= 1)
        end,
      },
      Variables={
        "MAXDEX",
      },
    },
    {
      Category="MISC",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTrainingTier"] >= 2)
        end,
      },
      Variables={
        "MAXDEX",
      },
    },
    {
      Category="MISC",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTrainingTier"] >= 3)
        end,
      },
      Variables={
        "MAXDEX",
      },
    },
    {
      Category="MISC",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTrainingTier"] >= 4)
        end,
      },
      Variables={
        "MAXDEX",
      },
    },
    {
      Category="MISC",
      Formula=Formula("ArmorTrainingTier"),
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end))
        end,
      },
      Variables={
        "ACCHECK",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArmorTraining"),
      Variables={
        "ArmorTrainingTier",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min((ArmorTrainingLVL+1)/4,4)"),
      Variables={
        "ArmorTraining",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
  UnencumberedMove={
    "MediumArmor",
  },
})
DefineAbility({
  Name="Armor Training ~ Heavy Armor",
  Category="Special Ability",
  Visible=false,
  Types={
    "FighterClassFeatures",
    "Internal",
  },
  UnencumberedMove={
    "HeavyArmor",
  },
})
DefineAbility({
  Name="Armor Mastery",
  Key="Fighter ~ Armor Mastery",
  Category="Special Ability",
  DamageReduction={
    Value="5/-",
    Conditions={
      function (character, item, sources)
        return (character.HasEquipped(function (item) return item.IsType("Armor") end)) or (character.HasEquipped(function (item) return item.IsType("Shield") end))
      end,
    },
  },
  Description={
    Format="You gain DR 5/-- whenever you are wearing armor or using a shield.",
  },
  SourcePage="p.56",
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Weapon Mastery",
  Key="Fighter ~ Weapon Mastery",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseWeaponProficiency(function (character, weapon)
      return ((character.IsProficientWith(weapon)))
    end),
  },
  Description={
    Format="Any attacks made a %1 automatically confirm all critical threats and have their damage multiplier increased by 1 (x2 becomes x3, for example). In addition, you cannot be disarmed while wielding a weapon of this type.",
    Arguments={
      Formula("%CHOICE"),
    },
  },
  SourcePage="p.56",
  Stackable=false,
  Bonuses={
    {
      Category="WEAPONPROF=%LIST",
      Formula=Formula("1"),
      Type={
        Name="NonStackingCrit",
      },
      Variables={
        "CRITMULTADD",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "WeaponMastery",
  },
})
DefineAbility({
  Name="Bonus Feats",
  Key="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Description={
    Format="At 1st level, and at every even level thereafter, a fighter gains a bonus feat in addition to those gained from normal advancement (meaning that the fighter gains a feat at every level). These bonus feats must be selected from those listed as combat feats, sometimes also called \"fighter bonus feats.\" Upon reaching 4th level, and every four levels thereafter (8th, 12th, and so on), a fighter can choose to learn a new bonus feat in place of a bonus feat he has already learned. In effect, the fighter loses the bonus feat in exchange for the new one. The old feat cannot be one that was used as a prerequisite for another feat, prestige class, or other ability. A fighter can only change one feat at any given level and must choose whether or not to swap the feat at the time he gains a new bonus feat for the level.",
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("FighterLvl/2+1"),
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
  },
})
ModifyAbility({
  Name="Fighter ~ Armor Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ArmorTraining1"] == 1)
        end,
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTraining"] >= 1)
        end,
      },
      Variables={
        "ArmorTrainingTier",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Armor Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ArmorTraining2"] == 1)
        end,
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTraining"] >= 2)
        end,
      },
      Variables={
        "ArmorTrainingTier",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Armor Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ArmorTraining3"] == 1)
        end,
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTraining"] >= 3)
        end,
      },
      Variables={
        "ArmorTrainingTier",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Armor Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ArmorTraining4"] == 1)
        end,
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Armor") end)) and (character.Variables["ArmorTraining"] >= 4)
        end,
      },
      Variables={
        "ArmorTrainingTier",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat1"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat2"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat4"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat6"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 8)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat8"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat10"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 12)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat12"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 14)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat14"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 16)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat16"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 18)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat18"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterLvl"] >= 20)
        end,
        function (character, item, sources)
          return (character.Variables["Fighter_CF_BonusFeat20"] == 1)
        end,
      },
      Variables={
        "Fighter Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_WeaponTraining1"] == 1)
        end,
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 5)
        end,
      },
      Variables={
        "Weapon Training I",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_WeaponTraining2"] == 1)
        end,
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 9)
        end,
      },
      Variables={
        "Weapon Training II",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_WeaponTraining3"] == 1)
        end,
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 13)
        end,
      },
      Variables={
        "Weapon Training III",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_WeaponTraining4"] == 1)
        end,
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 17)
        end,
      },
      Variables={
        "Weapon Training IV",
      },
    },
  },
})
DefineAbility({
  Name="Weapon Training",
  Key="Fighter ~ Weapon Training",
  Category="Special Ability",
  Description={
    Format="Thrown Weapons +%1",
    Arguments={
      Formula("WeaponTrainingThrown"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["WeaponTrainingThrown"] > 0)
      end,
    },
  },
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 5)
        end,
      },
      Variables={
        "Weapon Training I",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 9)
        end,
      },
      Variables={
        "Weapon Training II",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 13)
        end,
      },
      Variables={
        "Weapon Training III",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FighterWeaponTrainingLVL"] >= 17)
        end,
      },
      Variables={
        "Weapon Training IV",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "WeaponTrainingBase",
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingBase+MAX(count(\"ABILITIES\",\"CATEGORY=Special Ability\",\"TYPE=WeaponTraining\")-1,0)"),
      Variables={
        "WeaponTrainingTierOne",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingBase+MAX(count(\"ABILITIES\",\"CATEGORY=Special Ability\",\"TYPE=WeaponTraining\")-2,0)"),
      Variables={
        "WeaponTrainingTierTwo",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingBase+MAX(count(\"ABILITIES\",\"CATEGORY=Special Ability\",\"TYPE=WeaponTraining\")-3,0)"),
      Variables={
        "WeaponTrainingTierThree",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingBase+MAX(count(\"ABILITIES\",\"CATEGORY=Special Ability\",\"TYPE=WeaponTraining\")-4,0)"),
      Variables={
        "WeaponTrainingTierFour",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Axes" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingAxes",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Blades Heavy" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesHeavy",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Blades Light" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesLight",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Bows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Close" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingClose",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Crossbows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingCrossbows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Double" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingDouble",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Flails" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingFlails",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Hammers" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingHammers",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Monk" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingMonk",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Natural" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingNatural",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Pole Arms" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingPoleArms",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Spears" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingSpears",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierOne"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 1 Thrown" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingThrown",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Axes" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingAxes",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Blades Heavy" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesHeavy",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Blades Light" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesLight",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Bows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Close" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingClose",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Crossbows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingCrossbows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Double" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingDouble",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Flails" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingFlails",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Hammers" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingHammers",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Monk" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingMonk",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Natural" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingNatural",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Pole Arms" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingPoleArms",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Spears" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingSpears",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierTwo"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 2 Thrown" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingThrown",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Axes" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingAxes",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Blades Heavy" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesHeavy",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Blades Light" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesLight",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Bows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Close" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingClose",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Crossbows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingCrossbows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Double" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingDouble",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Flails" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingFlails",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Hammers" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingHammers",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Monk" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingMonk",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Natural" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingNatural",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Pole Arms" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingPoleArms",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Spears" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingSpears",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierThree"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 3 Thrown" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingThrown",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Axes" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingAxes",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Blades Heavy" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesHeavy",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Blades Light" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBladesLight",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Bows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingBows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Close" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingClose",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Crossbows" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingCrossbows",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Double" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingDouble",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Flails" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingFlails",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Hammers" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingHammers",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Monk" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingMonk",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Natural" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingNatural",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Pole Arms" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingPoleArms",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Spears" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingSpears",
      },
    },
  },
})
ModifyAbility({
  Name="Fighter ~ Weapon Training",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WeaponTrainingTierFour"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Weapon Training 4 Thrown" then return true end
            return false
          end)
        end,
      },
      Variables={
        "WeaponTrainingThrown",
      },
    },
  },
})
DefineAbility({
  Name="Weapon Training (Axes)",
  Key="Weapon Training 1 Axes",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Axes",
      Formula=Formula("WeaponTrainingAxes"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingAxes") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingAxes",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Heavy)",
  Key="Weapon Training 1 Blades Heavy",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Heavy",
      Formula=Formula("WeaponTrainingBladesHeavy"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesHeavy") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingBladesHeavy",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Light)",
  Key="Weapon Training 1 Blades Light",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Light",
      Formula=Formula("WeaponTrainingBladesLight"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesLight") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingBladesLight",
  },
})
DefineAbility({
  Name="Weapon Training (Bows)",
  Key="Weapon Training 1 Bows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Bows",
      Formula=Formula("WeaponTrainingBows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingBows",
  },
})
DefineAbility({
  Name="Weapon Training (Close)",
  Key="Weapon Training 1 Close",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Close",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingClose") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingClose",
  },
})
DefineAbility({
  Name="Weapon Training (Crossbows)",
  Key="Weapon Training 1 Crossbows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Crossbows",
      Formula=Formula("WeaponTrainingCrossbows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingCrossbows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingCrossbows",
  },
})
DefineAbility({
  Name="Weapon Training (Double)",
  Key="Weapon Training 1 Double",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Double",
      Formula=Formula("WeaponTrainingDouble"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingDouble") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingDouble",
  },
})
DefineAbility({
  Name="Weapon Training (Flails)",
  Key="Weapon Training 1 Flails",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Flails",
      Formula=Formula("WeaponTrainingFlails"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingFlails") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingFlails",
  },
})
DefineAbility({
  Name="Weapon Training (Hammers)",
  Key="Weapon Training 1 Hammers",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Hammers",
      Formula=Formula("WeaponTrainingHammers"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingHammers") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingHammers",
  },
})
DefineAbility({
  Name="Weapon Training (Monk)",
  Key="Weapon Training 1 Monk",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Monk",
      Formula=Formula("WeaponTrainingMonk"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingMonk") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingMonk",
  },
})
DefineAbility({
  Name="Weapon Training (Natural)",
  Key="Weapon Training 1 Natural",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("WeaponTrainingNatural"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT.Weapon Group Natural",
        "DAMAGE.Weapon Group Natural",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingNatural") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingNatural",
  },
})
DefineAbility({
  Name="Weapon Training (Pole Arms)",
  Key="Weapon Training 1 Pole Arms",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Pole Arms",
      Formula=Formula("WeaponTrainingPoleArms"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingPoleArms") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingPoleArms",
  },
})
DefineAbility({
  Name="Weapon Training (Spears)",
  Key="Weapon Training 1 Spears",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Spears",
      Formula=Formula("WeaponTrainingSpears"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingSpears") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingSpears",
  },
})
DefineAbility({
  Name="Weapon Training (Thrown)",
  Key="Weapon Training 1 Thrown",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Thrown",
      Formula=Formula("WeaponTrainingThrown"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingThrown") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining1",
    "WeaponTrainingThrown",
  },
})
DefineAbility({
  Name="Weapon Training (Axes)",
  Key="Weapon Training 2 Axes",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Axes",
      Formula=Formula("WeaponTrainingAxes"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingAxes") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingAxes",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Heavy)",
  Key="Weapon Training 2 Blades Heavy",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Heavy",
      Formula=Formula("WeaponTrainingBladesHeavy"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesHeavy") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingBladesHeavy",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Light)",
  Key="Weapon Training 2 Blades Light",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Light",
      Formula=Formula("WeaponTrainingBladesLight"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesLight") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingBladesLight",
  },
})
DefineAbility({
  Name="Weapon Training (Bows)",
  Key="Weapon Training 2 Bows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Bows",
      Formula=Formula("WeaponTrainingBows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingBows",
  },
})
DefineAbility({
  Name="Weapon Training (Close)",
  Key="Weapon Training 2 Close",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Close",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingClose") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingClose",
  },
})
DefineAbility({
  Name="Weapon Training (Crossbows)",
  Key="Weapon Training 2 Crossbows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Crossbows",
      Formula=Formula("WeaponTrainingCrossbows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingCrossbows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingCrossbows",
  },
})
DefineAbility({
  Name="Weapon Training (Double)",
  Key="Weapon Training 2 Double",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Double",
      Formula=Formula("WeaponTrainingDouble"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingDouble") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingDouble",
  },
})
DefineAbility({
  Name="Weapon Training (Flails)",
  Key="Weapon Training 2 Flails",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Flails",
      Formula=Formula("WeaponTrainingFlails"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingFlails") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingFlails",
  },
})
DefineAbility({
  Name="Weapon Training (Hammers)",
  Key="Weapon Training 2 Hammers",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Hammers",
      Formula=Formula("WeaponTrainingHammers"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingHammers") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingHammers",
  },
})
DefineAbility({
  Name="Weapon Training (Monk)",
  Key="Weapon Training 2 Monk",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Monk",
      Formula=Formula("WeaponTrainingMonk"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingMonk") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingMonk",
  },
})
DefineAbility({
  Name="Weapon Training (Natural)",
  Key="Weapon Training 2 Natural",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("WeaponTrainingNatural"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT.Weapon Group Natural",
        "DAMAGE.Weapon Group Natural",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingNatural") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingNatural",
  },
})
DefineAbility({
  Name="Weapon Training (Pole Arms)",
  Key="Weapon Training 2 Pole Arms",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Pole Arms",
      Formula=Formula("WeaponTrainingPoleArms"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingPoleArms") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingPoleArms",
  },
})
DefineAbility({
  Name="Weapon Training (Spears)",
  Key="Weapon Training 2 Spears",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Spears",
      Formula=Formula("WeaponTrainingSpears"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingSpears") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingSpears",
  },
})
DefineAbility({
  Name="Weapon Training (Thrown)",
  Key="Weapon Training 2 Thrown",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Thrown",
      Formula=Formula("WeaponTrainingThrown"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingThrown") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining2",
    "WeaponTrainingThrown",
  },
})
DefineAbility({
  Name="Weapon Training (Axes)",
  Key="Weapon Training 3 Axes",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Axes",
      Formula=Formula("WeaponTrainingAxes"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingAxes") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingAxes",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Heavy)",
  Key="Weapon Training 3 Blades Heavy",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Heavy",
      Formula=Formula("WeaponTrainingBladesHeavy"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesHeavy") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingBladesHeavy",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Light)",
  Key="Weapon Training 3 Blades Light",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Light",
      Formula=Formula("WeaponTrainingBladesLight"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesLight") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingBladesLight",
  },
})
DefineAbility({
  Name="Weapon Training (Bows)",
  Key="Weapon Training 3 Bows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Bows",
      Formula=Formula("WeaponTrainingBows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingBows",
  },
})
DefineAbility({
  Name="Weapon Training (Close)",
  Key="Weapon Training 3 Close",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Close",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingClose") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingClose",
  },
})
DefineAbility({
  Name="Weapon Training (Crossbows)",
  Key="Weapon Training 3 Crossbows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Crossbows",
      Formula=Formula("WeaponTrainingCrossbows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingCrossbows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingCrossbows",
  },
})
DefineAbility({
  Name="Weapon Training (Double)",
  Key="Weapon Training 3 Double",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Double",
      Formula=Formula("WeaponTrainingDouble"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingDouble") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingDouble",
  },
})
DefineAbility({
  Name="Weapon Training (Flails)",
  Key="Weapon Training 3 Flails",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Flails",
      Formula=Formula("WeaponTrainingFlails"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingFlails") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingFlails",
  },
})
DefineAbility({
  Name="Weapon Training (Hammers)",
  Key="Weapon Training 3 Hammers",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Hammers",
      Formula=Formula("WeaponTrainingHammers"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingHammers") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingHammers",
  },
})
DefineAbility({
  Name="Weapon Training (Monk)",
  Key="Weapon Training 3 Monk",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Monk",
      Formula=Formula("WeaponTrainingMonk"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingMonk") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingMonk",
  },
})
DefineAbility({
  Name="Weapon Training (Natural)",
  Key="Weapon Training 3 Natural",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("WeaponTrainingNatural"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT.Weapon Group Natural",
        "DAMAGE.Weapon Group Natural",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingNatural") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingNatural",
  },
})
DefineAbility({
  Name="Weapon Training (Pole Arms)",
  Key="Weapon Training 3 Pole Arms",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Pole Arms",
      Formula=Formula("WeaponTrainingPoleArms"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingPoleArms") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingPoleArms",
  },
})
DefineAbility({
  Name="Weapon Training (Spears)",
  Key="Weapon Training 3 Spears",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Spears",
      Formula=Formula("WeaponTrainingSpears"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingSpears") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingSpears",
  },
})
DefineAbility({
  Name="Weapon Training (Thrown)",
  Key="Weapon Training 3 Thrown",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Thrown",
      Formula=Formula("WeaponTrainingThrown"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingThrown") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining3",
    "WeaponTrainingThrown",
  },
})
DefineAbility({
  Name="Weapon Training (Axes)",
  Key="Weapon Training 4 Axes",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Axes",
      Formula=Formula("WeaponTrainingAxes"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingAxes") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingAxes",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Heavy)",
  Key="Weapon Training 4 Blades Heavy",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Heavy",
      Formula=Formula("WeaponTrainingBladesHeavy"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesHeavy") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingBladesHeavy",
  },
})
DefineAbility({
  Name="Weapon Training (Blades/Light)",
  Key="Weapon Training 4 Blades Light",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Blades Light",
      Formula=Formula("WeaponTrainingBladesLight"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBladesLight") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingBladesLight",
  },
})
DefineAbility({
  Name="Weapon Training (Bows)",
  Key="Weapon Training 4 Bows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Bows",
      Formula=Formula("WeaponTrainingBows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingBows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingBows",
  },
})
DefineAbility({
  Name="Weapon Training (Close)",
  Key="Weapon Training 4 Close",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Close",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingClose") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingClose",
  },
})
DefineAbility({
  Name="Weapon Training (Crossbows)",
  Key="Weapon Training 4 Crossbows",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Crossbows",
      Formula=Formula("WeaponTrainingCrossbows"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingCrossbows") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingCrossbows",
  },
})
DefineAbility({
  Name="Weapon Training (Double)",
  Key="Weapon Training 4 Double",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Double",
      Formula=Formula("WeaponTrainingDouble"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingDouble") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingDouble",
  },
})
DefineAbility({
  Name="Weapon Training (Flails)",
  Key="Weapon Training 4 Flails",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Flails",
      Formula=Formula("WeaponTrainingFlails"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingFlails") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingFlails",
  },
})
DefineAbility({
  Name="Weapon Training (Hammers)",
  Key="Weapon Training 4 Hammers",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Hammers",
      Formula=Formula("WeaponTrainingHammers"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingHammers") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingHammers",
  },
})
DefineAbility({
  Name="Weapon Training (Monk)",
  Key="Weapon Training 4 Monk",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Monk",
      Formula=Formula("WeaponTrainingMonk"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingMonk") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingMonk",
  },
})
DefineAbility({
  Name="Weapon Training (Natural)",
  Key="Weapon Training 4 Natural",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("WeaponTrainingNatural"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT.Weapon Group Natural",
        "DAMAGE.Weapon Group Natural",
      },
    },
    {
      Category="WEAPONPROF=Unarmed Strike",
      Formula=Formula("WeaponTrainingClose"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingNatural") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingNatural",
  },
})
DefineAbility({
  Name="Weapon Training (Pole Arms)",
  Key="Weapon Training 4 Pole Arms",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Pole Arms",
      Formula=Formula("WeaponTrainingPoleArms"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingPoleArms") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingPoleArms",
  },
})
DefineAbility({
  Name="Weapon Training (Spears)",
  Key="Weapon Training 4 Spears",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Spears",
      Formula=Formula("WeaponTrainingSpears"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingSpears") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingSpears",
  },
})
DefineAbility({
  Name="Weapon Training (Thrown)",
  Key="Weapon Training 4 Thrown",
  Category="Special Ability",
  AllowMultiple=false,
  SourcePage="p.56",
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=TYPE.Weapon Group Thrown",
      Formula=Formula("WeaponTrainingThrown"),
      Type={
        Name="WeaponTraining",
      },
      Variables={
        "TOHIT",
        "DAMAGE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("WeaponTrainingThrown") then return true end
        return false
      end))
    end,
  },
  Types={
    "WeaponTraining",
    "Fighter Weapon Training",
    "WeaponTraining4",
    "WeaponTrainingThrown",
  },
})
DefineAbility({
  Name="Monk Core Class Skills",
  Key="Class Skills ~ Monk",
  Category="Internal",
  ClassSkills={
    "Acrobatics",
    "Climb",
    "TYPE=Craft",
    "Escape Artist",
    "Intimidate",
    "Knowledge (History)",
    "Knowledge (Religion)",
    "Perception",
    "TYPE=Perform",
    "TYPE=Profession",
    "Ride",
    "Sense Motive",
    "Stealth",
    "Swim",
  },
})
DefineAbility({
  Name="Monk Bonus Feat",
  Key="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1+max((MonkBonusFeatLVL+2)/4,0)"),
      Variables={
        "Monk Bonus Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "MonkBonusFeatLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="AC Bonus",
  Key="Monk ~ AC Bonus",
  Category="Special Ability",
  Description={
    Format="When unarmored and unencumbered, you add +%1 to your AC and your CMD. These bonuses apply even against touch attacks or when you are flat-footed. You lose these bonuses when you are immobilized or helpless, when you wear any armor, when you carry a shield, or when you carry a medium or heavy load.",
    Arguments={
      Formula("MonkACBonus"),
    },
  },
  SourcePage="p.57",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("MonkACBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ENCUMBERANCE"] == 0) and (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED]\")"] == 0) and (character.Variables["var(\"COUNT[EQTYPE.SHIELD.EQUIPPED]\")"] == 0)
        end,
      },
      Variables={
        "AC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min((MonkACLVL)/4,5)"),
      Variables={
        "MonkACBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkACWisBonus"),
      Variables={
        "MonkACBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkACBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ENCUMBERANCE"] == 0) and (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED]\")"] == 0) and (character.Variables["var(\"COUNT[EQTYPE.SHIELD.EQUIPPED]\")"] == 0)
        end,
      },
      Variables={
        "CMD",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(WIS,0)"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 1)
        end,
      },
      Variables={
        "MonkACWisBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "MonkACLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Flurry of Blows",
  Key="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Description={
    Format="You can make a flurry of blows as a full-attack action.",
  },
  Types={
    "MonkClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "Flurry of Blows",
  },
})
DefineAbility({
  Name="Stunning Fist",
  Key="Monk ~ Stunning Fist",
  Category="Special Ability",
  Description={
    Format="You gain Stunning Fist as a bonus feat.",
  },
  SourcePage="p.59",
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Stunning Fist",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "StunningFistMonkLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "Stunning Fist",
  },
})
DefineAbility({
  Name="Fast Movement",
  Key="Monk ~ Fast Movement",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 feet enhancement bonus to your land speed. If you wear armor or carry a medium or heavy load, you lose this extra speed.",
    Arguments={
      Formula("MonkFastMovementBonus"),
    },
  },
  SourcePage="p.59",
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("MonkFastMovementBonus"),
      Type={
        Name="Enhancement",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ENCUMBERANCE"] == 0) and (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED]\")"] == 0)
        end,
      },
      Variables={
        "TYPE=Walk",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10*floor(MonkFastMovementLVL/3)"),
      Variables={
        "MonkFastMovementBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "MonkFastMovementLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Maneuver Training",
  Key="Monk ~ Maneuver Training",
  Category="Special Ability",
  Description={
    Format="A monk uses his monk level in place of his base attack bonus when calculating his combat maneuver bonus. Base attack bonuses granted from other classes are unaffected and are added normally.",
  },
  SourcePage="p.59",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ManeuverTrainingLVL-ManeuverTrainingBAB"),
      Variables={
        "CMB_BAB",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "ManeuverTrainingLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL*3/4"),
      Variables={
        "ManeuverTrainingBAB",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Still Mind",
  Key="Monk ~ Still Mind",
  Category="Special Ability",
  Description={
    Format="You gain a +2 bonus on saving throws against enchantment spells and effects.",
  },
  SourcePage="p.59",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+2 vs. enchantment spells and effects",
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
    "Still Mind",
  },
})
DefineAbility({
  Name="Ki Pool",
  Key="Monk ~ Ki Pool",
  Category="Special Ability",
  Description={
    Format="You have a pool of %1 ki points, supernatural energy he can use to accomplish amazing feats.",
    Arguments={
      Formula("KiPoints"),
    },
  },
  SourcePage="p.59",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ki Pool Tracker",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "KiPoolLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "Ki",
    "Ki Pool",
    "AttackOption",
  },
})
DefineAbility({
  Name="Slow Fall",
  Key="Monk ~ Slow Fall",
  Category="Special Ability",
  Description={
    Format="You can use a nearby wall to slow your descent.",
  },
  SourcePage="p.59",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("floor(SlowFallLVL/2)*10"),
      Variables={
        "SlowFall",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "SlowFallLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="High Jump",
  Key="Monk ~ High Jump",
  Category="Special Ability",
  Description={
    Format="You can adds +%1 to all Acrobatics checks made to jump, both for vertical jumps and horizontal jumps. In addition, you always count as having a running start when making jump checks using Acrobatics. By spending 1 point from your ki pool as a swift action, you gain a +20 bonus on Acrobatics checks made to jump for 1 round.",
    Arguments={
      Formula("HighJumpBonus"),
    },
  },
  SourcePage="p.59",
  Bonuses={
    {
      Category="SITUATION",
      Formula=Formula("HighJumpBonus"),
      Variables={
        "Acrobatics=When Jumping",
      },
    },
    {
      Category="VAR",
      Formula=Formula("HighJumpLVL"),
      Variables={
        "HighJumpBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "HighJumpLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Purity of Body",
  Key="Monk ~ Purity of Body",
  Category="Special Ability",
  Description={
    Format="You are immune to all diseases, including supernatural and magical diseases.",
  },
  SourcePage="p.59",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Disease",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Purity of Body",
  },
})
DefineAbility({
  Name="Wholeness of Body",
  Key="Monk ~ Wholeness of Body",
  Category="Special Ability",
  Description={
    Format="You can heal your own wounds as a standard action. You can heal %1 hit points of damage by using 2 points from your ki pool.",
    Arguments={
      Formula("WholenessOfBody"),
    },
  },
  SourcePage="p.59",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WholenessOfBodyLVL"),
      Variables={
        "WholenessOfBody",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "WholenessOfBodyLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Ki",
    "Wholeness of Body",
  },
})
DefineAbility({
  Name="Diamond Body",
  Key="Monk ~ Diamond Body",
  Category="Special Ability",
  Description={
    Format="You are immune to poisons of all kinds.",
  },
  SourcePage="p.59",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Poison",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Diamond Body",
  },
})
DefineAbility({
  Name="Abundant Step",
  Key="Monk ~ Abundant Step",
  Category="Special Ability",
  Description={
    Format="You can slip magically between spaces, as if using the spell Dimension Door. Using this Ability is a move action that consumes 2 points from your Ki pool. Your caster level is %1. You cannot take other creatures with you when you use this ability.",
    Arguments={
      Formula("AbundantStepCasterLVL"),
    },
  },
  SourcePage="p.59",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AbundantStepLVL"),
      Variables={
        "AbundantStepCasterLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "AbundantStepLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Ki",
    "ModifyMovement",
    "Abundant Step",
  },
})
DefineAbility({
  Name="Diamond Soul",
  Key="Monk ~ Diamond Soul",
  Category="Special Ability",
  Description={
    Format="You gain spell resistance %1. In order to affect the monk with a spell, a spellcaster must get a result on a caster level check (1d20 + caster level) that equals or exceeds the monk's spell resistance.",
    Arguments={
      Formula("DiamondSoul"),
    },
  },
  SourcePage="p.59",
  SpellResistance=Formula("DiamondSoul"),
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+DiamondSoulLVL"),
      Variables={
        "DiamondSoul",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "DiamondSoulLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Diamond Soul",
  },
})
DefineAbility({
  Name="Quivering Palm",
  Key="Monk ~ Quivering Palm",
  Category="Special Ability",
  Description={
    Format="You can set up vibrations within the body of another creature that can thereafter be fatal if you so desire. You can use this attack once per day, and you must announce your intent before making your attack roll. Creatures immune to critical hits cannot be affected. Otherwise, if you strike successfully and the target takes damage from the blow, the quivering palm attack succeeds. Thereafter, you can try to slay the victim at any later time, as long as the attempt is made within a %1 days. To make such an attempt, you merely will the target to die (a free action), and unless the target makes a Fortitude saving throw (DC %2), it dies. If the saving throw is successful, the target is no longer in danger from that particular quivering palm attack, but it may still be affected by another one at a later time. You can have no more than 1 quivering palm attack at one time. If you use quivering palm while another is still in effect, the previous effect is negated.",
    Arguments={
      Formula("QuiveringPalmDuration"),
      Formula("QuiveringPalmDC"),
    },
  },
  SourcePage="p.60",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("QuiveringPalmLVL"),
      Variables={
        "QuiveringPalmDuration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(QuiveringPalmLVL/2)+WIS"),
      Variables={
        "QuiveringPalmDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "QuiveringPalmLVL",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "AttackOption",
    "Quivering Palm",
  },
})
DefineAbility({
  Name="Tongue of the Sun and Moon",
  Key="Monk ~ Tongue of the Sun and Moon",
  Category="Special Ability",
  Description={
    Format="You can speak with any living creature.",
  },
  SourcePage="p.60",
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Communicate",
    "Tongue of the Sun and Moon",
  },
})
DefineAbility({
  Name="Empty Body",
  Key="Monk ~ Empty Body",
  Category="Special Ability",
  Description={
    Format="You can assume an ethereal state for 1 minute as though using the spell Etherealness. Using this ability is a move action that consumes 3 points for your Ki pool. This ability only affects you and cannot be used to make other creatures ethereal.",
  },
  SourcePage="p.60",
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ModifyMovement",
    "Empty Body",
  },
})
DefineAbility({
  Name="Perfect Self",
  Key="Monk ~ Perfect Self",
  Category="Special Ability",
  DamageReduction={
    Value="10/Chaotic",
  },
  Description={
    Format="You are treated as an Outsider for the purpose of spells and magical effects. Additionally gain Damage Reduction 10/Chaotic. Unlike other outsiders, you can still be brought back from the dead as if you were a member of your previous creature type.",
  },
  SourcePage="p.60",
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
    "Perfect Self",
  },
})
DefineAbility({
  Name="Evasion",
  Key="Monk ~ Evasion",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evasion",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "Evasion",
  },
})
DefineAbility({
  Name="Improved Evasion",
  Key="Monk ~ Improved Evasion",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Improved Evasion",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "Improved Evasion",
  },
})
DefineAbility({
  Name="Timeless Body",
  Key="Monk ~ Timeless Body",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Timeless Body",
      },
    },
  },
  TemplateChoices={
    "Timeless Body ~ Adult",
    "Timeless Body ~ Middle Age",
    "Timeless Body ~ Old",
    "Timeless Body ~ Venerable",
  },
  Types={
    "MonkClassFeatures",
    "Timeless Body",
  },
})
DefineAbility({
  Name="Unarmed Strike",
  Key="Monk ~ Unarmed Strike",
  Category="Special Ability",
  Description={
    Format="At 1st level, a monk gains Improved Unarmed Strike as a bonus feat. A monk's attacks may be with fist, elbows, knees, and feet. This means that a monk may make unarmed strikes with his hands full. There is no such thing as an off-hand attack for a monk striking unarmed. A monk may thus apply his full Strength bonus on damage rolls for all his unarmed strikes. Usually a monk's unarmed strikes deal lethal damage, but he can choose to deal nonlethal damage instead with no penalty on his attack roll. He has the same choice to deal lethal or nonlethal damage while grappling. A monk's unarmed strike is treated as both a manufactured weapon and a natural weapon for the purpose of spells and effects that enhance or improve either manufactured weapons or natural weapons. A monk also deals more damage with his unarmed strikes than a normal person would, as shown above on Table 3-10. The unarmed damage values listed on Table 3-10 is for Medium monks. A Small monk deals less damage than the amount given there with his unarmed attacks, while a Large monk deals more damage; see Small or Large Monk Unarmed Damage on the table given below.",
  },
  SourcePage="p.58",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Unarmed Strike",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk ~ Unarmed Damage",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall10"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall20"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall30"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 8)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall40"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall50"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 12)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall60"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 14)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall70"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 16)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall80"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkLVL"] >= 18)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_SlowFall90"] == 1)
        end,
      },
      Variables={
        "SlowFallLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min((FlurryLVL+6)/7,3)"),
      Variables={
        "FlurryExtraAttacks",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FlurryLVL-MonkBAB"),
      Variables={
        "FlurryBABBonus",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(FlurryBABRaw)"),
      Variables={
        "FlurryLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FlurryBABRaw*3/4"),
      Variables={
        "FlurryBAB",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2+(FlurryLVL>=6)+(FlurryLVL>=8)+(FlurryLVL>=11)+(FlurryLVL>=15)+(FlurryLVL>=16)"),
      Variables={
        "FlurryAttacks",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1+(FlurryLVL>=5)+(FlurryLVL>=9)+(FlurryLVL>=13)+(FlurryLVL>=17)+FlurryDiff"),
      Variables={
        "FAB",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB"),
      Variables={
        "FAB_1",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB"),
      Variables={
        "FAB_2",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB-5"),
      Variables={
        "FAB_3",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB-5"),
      Variables={
        "FAB_4",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB-10"),
      Variables={
        "FAB_5",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB-10"),
      Variables={
        "FAB_6",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FAB-15"),
      Variables={
        "FAB_7",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  SourcePage="p.57",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "FlurryBABRaw",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FlurryBAB-BAB"),
      Variables={
        "FlurryDiff",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
})
DefineAbility({
  Name="Ki Pool Tracker",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ki Stat Choice ~ Wisdom",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPool"] == 1) and (character.Variables["KiPoolWis"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ki Stat Choice ~ Charisma",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPool"] == 1) and (character.Variables["KiPoolCha"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ki Stat Choice ~ Intelligence",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPool"] == 1) and (character.Variables["KiPoolInt"] == 1)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPool"] >= 2)
        end,
      },
      Variables={
        "Ki Pool Stat Choice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("KiPoolLVL/2"),
      Variables={
        "KiPoints",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
DefineAbility({
  Name="Ki Stat Choice ~ Wisdom",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WIS"),
      Variables={
        "KiPoints",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["KiPoolWis"] > 0)
    end,
  },
  Types={
    "KiStatChoice",
  },
})
DefineAbility({
  Name="Ki Stat Choice ~ Charisma",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CHA"),
      Variables={
        "KiPoints",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["KiPoolCha"] > 0)
    end,
  },
  Types={
    "KiStatChoice",
  },
})
DefineAbility({
  Name="Ki Stat Choice ~ Intelligence",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("INT"),
      Variables={
        "KiPoints",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["KiPoolInt"] > 0)
    end,
  },
  Types={
    "KiStatChoice",
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Description={
    Format="You can make a flurry of blows as a full-attack action. When doing so, you may make one additional attack, taking a -2 penalty on all of your attacks, as if using the Two-Weapon Fighting feat. These attacks can be any combination of unarmed strikes and attacks with a monk speciak weapon (you do not need to use two weapons to utlilize this ability). For the purpose of these attacks, your base attack bonus is equal to your monk level. For all other purposes, such as qualifying for a feat or a prestige class, you use your normal base attack bonus.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["FlurryLVL"] >= 1)
      end,
      function (character, item, sources)
        return (character.Variables["FlurryLVL"] < 8)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Description={
    Format="You can make a flurry of blows as a full-attack action. When doing so, you may make two additional attacks using any combination of unarmed strikes or attack with a special monk weapon (kama, nunchaku, quarterstaff, sai, shuriken, and siangham) as if using the Two-Weapon Fighting and Improved Two-Weapon Fighting feats. For the purpose of these attacks, your base attack bonus is equal to your monk level. For all other purposes, such as qualifying for a feat or a prestige class, you use your normal base attack bonus.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["FlurryLVL"] >= 8)
      end,
      function (character, item, sources)
        return (character.Variables["FlurryLVL"] < 15)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Flurry of Blows",
  Category="Special Ability",
  Description={
    Format="You can make a flurry of blows as a full-attack action. When doing so, you may make three additional attacks using any combination of unarmed strikes or attack with a special monk weapon (kama, nunchaku, quarterstaff, sai, shuriken, and siangham) as if using the Two-Weapon Fighting, Improved Two-Weapon Fighting, and Greater Two-Weapon Fighting feats. For the purpose of these attacks, your base attack bonus is equal to your monk level. For all other purposes, such as qualifying for a feat or a prestige class, you use your normal base attack bonus.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["FlurryLVL"] >= 15)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Stunning Fist",
  Category="Special Ability",
  Description={
    Format="You gain Stunning Fist as a bonus feat. You can choose to make the target of your Stunning Fist fatigued. This condition replaces stunning the target for 1 round, and a successful saving throw still negates the effect. You must choose which condition will apply before the attack roll is made. These effects do not stack with themselves, but additional hits do increase the duration.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] >= 4)
      end,
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] < 8)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Stunning Fist",
  Category="Special Ability",
  Description={
    Format="You gain Stunning Fist as a bonus feat. You can choose to make the target of your Stunning Fist fatigued, or sickened for 1 minute. This condition replaces stunning the target for 1 round, and a successful saving throw still negates the effect. You must choose which condition will apply before the attack roll is made. These effects do not stack with themselves, but additional hits do increase the duration.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] >= 8)
      end,
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] < 12)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Stunning Fist",
  Category="Special Ability",
  Description={
    Format="You gain Stunning Fist as a bonus feat. You can choose to make the target of your Stunning Fist fatigued, sickened for 1 minute, or staggered for 1d6+1 rounds. This condition replaces stunning the target for 1 round, and a successful saving throw still negates the effect. You must choose which condition will apply before the attack roll is made. These effects do not stack with themselves, but additional hits do increase the duration.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] >= 12)
      end,
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] < 16)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Stunning Fist",
  Category="Special Ability",
  Description={
    Format="You gain Stunning Fist as a bonus feat. You can choose to make the target of your Stunning Fist fatigued, sickened for 1 minute, staggered for 1d6+1 rounds, or permanently blinded or deafened. This condition replaces stunning the target for 1 round, and a successful saving throw still negates the effect. You must choose which condition will apply before the attack roll is made. These effects do not stack with themselves, but additional hits do increase the duration.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["MonkStunningFistLVL"] >= 16)
      end,
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] < 20)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Stunning Fist",
  Category="Special Ability",
  Description={
    Format="You gain Stunning Fist as a bonus feat. You can choose to make the target of your Stunning Fist fatigued, sickened for 1 minute, staggered for 1d6+1 rounds, permanently blinded or deafened, or paralyzed for 1d6+1 rounds. This condition replaces stunning the target for 1 round, and a successful saving throw still negates the effect. You must choose which condition will apply before the attack roll is made. These effects do not stack with themselves, but additional hits do increase the duration.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["StunningFistMonkLVL"] >= 20)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_KiPoolAbilities1"] == 0)
        end,
      },
      Variables={
        "KiPoolProgression",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPoolLVL"] >= 7)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_KiPoolAbilities7"] == 0)
        end,
      },
      Variables={
        "KiPoolProgression",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPoolLVL"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_KiPoolAbilities10"] == 0)
        end,
      },
      Variables={
        "KiPoolProgression",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["KiPoolLVL"] >= 16)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_KiPoolAbilities16"] == 0)
        end,
      },
      Variables={
        "KiPoolProgression",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Description={
    Format="You have a pool of %1 ki points, supernatural energy you can use to accomplish amazing feats. As long as you have at least 1 point in your ki pool, you can make a ki strike. Ki Strike allows your unarmed attacks to be treated as magic weapons for the purpose of overcoming damage reduction. By spending 1 point from your ki pool, you can make one additional attack at your highest attack bonus when making a Flurry of Blows attack. In addition, you can spend 1 point to increase your speed by 20 feet for 1 round. Finally, you can spend 1 point from your ki pool to give yourself a +4 dodge bonus to AC for 1 round. Each use of these powers is activated as a swift action. The ki pool is replenished after 8 hours of rest or meditation; these hours do not need to be consecutive.",
    Arguments={
      Formula("KiPoints"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["KiPoolProgression"] == 1)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Description={
    Format="You have a pool of %1 ki points, supernatural energy you can use to accomplish amazing feats. As long as you have at least 1 point in your ki pool, you can make a ki strike. Ki Strike allows your unarmed attacks to be treated as magic, cold iron and silver weapons for the purpose of overcoming damage reduction. By spending 1 point from your ki pool, you can make one additional attack at your highest attack bonus when making a Flurry of Blows attack. In addition, you can spend 1 point to increase your speed by 20 feet for 1 round. Finally, you can spend 1 point from your ki pool to give yourself a +4 dodge bonus to AC for 1 round. Each use of these powers is activated as a swift action. The ki pool is replenished after 8 hours of rest or meditation; these hours do not need to be consecutive.",
    Arguments={
      Formula("KiPoints"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["KiPoolProgression"] == 2)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Description={
    Format="You have a pool of %1 ki points, supernatural energy you can use to accomplish amazing feats. As long as you have at least 1 point in your ki pool, you can make a ki strike. Ki strike allows your unarmed attacks to be treated as magic, cold iron, silver and lawful weapons for the purpose of overcoming damage reduction. By spending 1 point from your ki pool, you can make one additional attack at your highest attack bonus when making a Flurry of Blows attack. In addition, you can spend 1 point to increase your speed by 20 feet for 1 round. Finally, you can spend 1 point from your ki pool to give yourself a +4 dodge bonus to AC for 1 round. Each use of these powers is activated as a swift action. The ki pool is replenished after 8 hours of rest or meditation; these hours do not need to be consecutive.",
    Arguments={
      Formula("KiPoints"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["KiPoolProgression"] == 3)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Ki Pool",
  Category="Special Ability",
  Description={
    Format="You have a pool of %1 ki points, supernatural energy you can use to accomplish amazing feats. As long as you have at least 1 point in your ki pool, you can make a ki strike. Ki strike allows your unarmed attacks to be treated as magic, cold iron, silver, lawful, and adamantine weapons for the purpose of overcoming damage reduction and bypassing hardness. By spending 1 point from your ki pool, you can make one additional attack at your highest attack bonus when making a Flurry of Blows attack. In addition, you can spend 1 point to increase your speed by 20 feet for 1 round. Finally, you can spend 1 point from your ki pool to give yourself a +4 dodge bonus to AC for 1 round. Each use of these powers is activated as a swift action. The ki pool is replenished after 8 hours of rest or meditation; these hours do not need to be consecutive.",
    Arguments={
      Formula("KiPoints"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["KiPoolProgression"] == 4)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Description={
    Format="If you are within arm's reach of a wall, you can use it to slow your descent. You take damage as if the fall were %1 feet shorter than it actually is.",
    Arguments={
      Formula("SlowFall"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["SlowFallLVL"] < 20)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Slow Fall",
  Category="Special Ability",
  Description={
    Format="You can use a nearby wall to slow your descent and fall any distance without harm.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["SlowFallLVL"] == 20)
      end,
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Bonus Feat ~ Default",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeats"] == 0)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1+max((MonkBonusFeatLVL+2)/4,0)"),
      Variables={
        "MonkBonusFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatCount"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeat1"] == 1)
        end,
      },
      Variables={
        "Monk Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatCount"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeat2"] == 1)
        end,
      },
      Variables={
        "Monk Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatCount"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeat6"] == 1)
        end,
      },
      Variables={
        "Monk Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatCount"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeat10"] == 1)
        end,
      },
      Variables={
        "Monk Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatCount"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeat14"] == 1)
        end,
      },
      Variables={
        "Monk Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatCount"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Monk_CF_BonusFeat18"] == 1)
        end,
      },
      Variables={
        "Monk Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
ModifyAbility({
  Name="Monk ~ Monk Bonus Feat",
  Category="Special Ability",
})
DefineAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_CatchOffGuard",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_CombatReflexes",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_DeflectArrows",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_Dodge",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_ImprovedGrapple",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_ScorpionStyle",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 1)
        end,
      },
      Variables={
        "MonkBonusFeat_ThrowAnything",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 6)
        end,
      },
      Variables={
        "MonkBonusFeat_GorgonsFist",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 6)
        end,
      },
      Variables={
        "MonkBonusFeat_ImprovedBullRush",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 6)
        end,
      },
      Variables={
        "MonkBonusFeat_ImprovedDisarm",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 6)
        end,
      },
      Variables={
        "MonkBonusFeat_ImprovedFeint",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 6)
        end,
      },
      Variables={
        "MonkBonusFeat_ImprovedTrip",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 6)
        end,
      },
      Variables={
        "MonkBonusFeat_Mobility",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 10)
        end,
      },
      Variables={
        "MonkBonusFeat_ImprovedCritical",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 10)
        end,
      },
      Variables={
        "MonkBonusFeat_MedusasWrath",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 10)
        end,
      },
      Variables={
        "MonkBonusFeat_SnatchArrows",
      },
    },
  },
})
ModifyAbility({
  Name="Monk Bonus Feat ~ Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkBonusFeatLVL"] >= 10)
        end,
      },
      Variables={
        "MonkBonusFeat_SpringAttack",
      },
    },
  },
})
DefineAbility({
  Name="Catch Off-Guard",
  Key="Monk Bonus Feat ~ Catch Off-Guard",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Catch Off-Guard",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Catch Off-Guard" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_CatchOffGuard"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Combat Reflexes",
  Key="Monk Bonus Feat ~ Combat Reflexes",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Combat Reflexes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Combat Reflexes" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_CombatReflexes"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Deflect Arrows",
  Key="Monk Bonus Feat ~ Deflect Arrows",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Deflect Arrows",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Deflect Arrows" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_DeflectArrows"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Dodge",
  Key="Monk Bonus Feat ~ Dodge",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Dodge",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Dodge" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_Dodge"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Improved Grapple",
  Key="Monk Bonus Feat ~ Improved Grapple",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Grapple",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Grapple" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ImprovedGrapple"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Scorpion Style",
  Key="Monk Bonus Feat ~ Scorpion Style",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Scorpion Style",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Scorpion Style" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ScorpionStyle"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Throw Anything",
  Key="Monk Bonus Feat ~ Throw Anything",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Throw Anything",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Throw Anything" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ThrowAnything"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Gorgon's Fist",
  Key="Monk Bonus Feat ~ Gorgon's Fist",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Gorgon's Fist",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Gorgon's Fist" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 6)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_GorgonsFist"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Improved Bull Rush",
  Key="Monk Bonus Feat ~ Improved Bull Rush",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Bull Rush",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Bull Rush" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 6)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ImprovedBullRush"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Improved Disarm",
  Key="Monk Bonus Feat ~ Improved Disarm",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Disarm",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Disarm" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 6)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ImprovedDisarm"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Improved Feint",
  Key="Monk Bonus Feat ~ Improved Feint",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Feint",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Feint" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 6)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ImprovedFeint"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Improved Trip",
  Key="Monk Bonus Feat ~ Improved Trip",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Trip",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Trip" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 6)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ImprovedTrip"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Mobility",
  Key="Monk Bonus Feat ~ Mobility",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Mobility",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Mobility" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 6)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_Mobility"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Improved Critical",
  Key="Monk Bonus Feat ~ Improved Critical",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseWeaponProficiency(function (character, weapon)
      return ((character.IsProficientWith(weapon)))
    end),
  },
  Stackable=false,
  Visible=true,
  Bonuses={
    {
      Category="WEAPONPROF=%LIST",
      Formula=Formula("1"),
      Type={
        Name="NonStackingCrit",
      },
      Variables={
        "CRITRANGEDOUBLE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 10)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_ImprovedCritical"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Medusa's Wrath",
  Key="Monk Bonus Feat ~ Medusa's Wrath",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Medusa's Wrath",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Medusa's Wrath" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 10)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_MedusasWrath"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Snatch Arrows",
  Key="Monk Bonus Feat ~ Snatch Arrows",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Snatch Arrows",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Snatch Arrows" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 10)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_SnatchArrows"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Spring Attack",
  Key="Monk Bonus Feat ~ Spring Attack",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Spring Attack",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Spring Attack" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeatLVL"] >= 10)
    end,
    function (character, item, sources)
      return (character.Variables["MonkBonusFeat_SpringAttack"] >= 1)
    end,
  },
  Types={
    "MonkBonusFeat",
  },
})
DefineAbility({
  Name="Monk ~ Unarmed Damage",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkUnarmedDamageProgression"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkUnarmedDamageProgression"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkUnarmedDamageProgression"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkUnarmedDamageProgression"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkUnarmedDamageProgression"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MonkUnarmedDamageProgression"] == 5)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("MonkLVL"),
      Variables={
        "MonkUnarmedDamageLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(min(5,MonkUnarmedDamageLVL/4))"),
      Variables={
        "MonkUnarmedDamageProgression",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("F")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("D")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("T")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("S")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("M")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("L")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("7"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("H")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("G")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("9"),
      Conditions={
        function (character, item, sources)
          return character.BaseSize == GetSize("C")
        end,
      },
      Variables={
        "UDAMAttackSize",
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Fine)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] <= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Diminutive)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Tiny)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Small)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Large)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Huge)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Gargantuan)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 1 (Colossal)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] >= 9)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Fine)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] <= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Diminutive)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Tiny)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Small)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Large)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Huge)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Gargantuan)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 4 (Colossal)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] >= 9)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Fine)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] <= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Diminutive)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Tiny)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Small)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Large)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Huge)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Gargantuan)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 8 (Colossal)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] >= 9)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Fine)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] <= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Diminutive)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Tiny)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Small)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Large)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Huge)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Gargantuan)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 12 (Colossal)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] >= 9)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Fine)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] <= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Diminutive)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Tiny)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Small)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Large)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Huge)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Gargantuan)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 16 (Colossal)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] >= 9)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Fine)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] <= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Diminutive)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 2)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Tiny)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 3)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Small)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 4)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Medium)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 5)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Large)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 6)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Huge)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 7)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Gargantuan)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] == 8)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Monk Unarmed Damage LVL 20 (Colossal)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UDAMAttackSize"] >= 9)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Fine)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d1",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Diminutive)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d2",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Tiny)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d3",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Small)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d4",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Medium)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Large)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Huge)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Gargantuan)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "3d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 1 (Colossal)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "4d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Fine)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d2",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Diminutive)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d3",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Tiny)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d4",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Small)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Medium)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Large)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Huge)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "3d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Gargantuan)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "4d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 4 (Colossal)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "6d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Fine)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d3",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Diminutive)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d4",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Tiny)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Small)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Medium)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d10",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Large)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Huge)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "3d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Gargantuan)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "4d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 8 (Colossal)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "6d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Fine)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d4",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Diminutive)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Tiny)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Small)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d10",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Medium)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Large)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "3d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Huge)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "4d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Gargantuan)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "6d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 12 (Colossal)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "8d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Fine)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Diminutive)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Tiny)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d10",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Small)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Medium)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Large)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "3d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Huge)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "4d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Gargantuan)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "6d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 16 (Colossal)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "8d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Fine)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Diminutive)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "1d10",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Tiny)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d6",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Small)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Medium)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "2d10",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Large)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "4d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Huge)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "6d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Gargantuan)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "8d8",
  },
})
DefineAbility({
  Name="Monk Unarmed Damage LVL 20 (Colossal)",
  Category="Internal",
  UnarmedDamageMultiplier=":2",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("12"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Type={
        Name="Base",
      },
      Variables={
        "PrimaryAttackDamageSize",
      },
    },
  },
  UnarmedDamage={
    "12d8",
  },
})
DefineAbility({
  Name="Aura of Good",
  Key="Paladin ~ Aura of Good",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aura of Good",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
  },
})
DefineAbility({
  Name="Detect Evil",
  Key="Paladin ~ Detect Evil",
  Category="Special Ability",
  Description={
    Format="At will, you can use Detect Evil, as the Spell. You can, as a move action, concentrate on a single individual or item within 60 feet and determine if it is evil, learning the strength of its aura as if having studied it for 3 rounds. While focusing on one individual or object, you do not detect evil in any other object or individual within range.",
  },
  SourcePage="p.60",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "DetectEvilLVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Detect Evil",
      SpellBookName="Class",
      Times="ATWILL",
      TimeUnit="Day",
      DC="11+WIS",
      CasterLevel="DetectEvilLVL",
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "Detect Evil",
  },
})
DefineAbility({
  Name="Smite Evil",
  Key="Paladin ~ Smite Evil",
  Category="Special Ability",
  Description={
    Format="You can call out to the powers of good to aid you in your struggle against evil %1 times per day. As a swift action, you choose one target within sight to smite. If this target is evil, you add +%2 to your attack rolls and +%3 to all damage rolls made against the target of your smite. If the target of Smite Evil is an outsider with the evil subtype, an evil-aligned dragon, or an undead creature, the bonus to damage on the first successful attack increases to +%4. Regardless of the target, Smite Evil attacks automatically bypass any DR the creature might possess. In addition, while smite evil is in effect, you gain a +%5 deflection bonus to your AC against attacks made by the target of the smite. If you target a creature that is not evil, the smite is wasted with no effect. The Smite Evil effect remains until the target of the smite is dead or the next time you rest and regain your uses of this ability.",
    Arguments={
      Formula("SmiteEvilTimes"),
      Formula("SmiteEvilAttackBonus"),
      Formula("SmiteEvilDamageBonus"),
      Formula("SmiteEvilDamageBonus*2"),
      Formula("SmiteEvilACBonus"),
    },
  },
  SourcePage="p.60",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "SmiteEvilTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min((SmiteEvilLVL+2)/3,7)"),
      Variables={
        "SmiteEvilTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(CHA,0)"),
      Variables={
        "SmiteEvilAttackBonus",
        "SmiteEvilACBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SmiteEvilLVL"),
      Variables={
        "SmiteEvilDamageBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "SmiteEvilLVL",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "Smite Evil",
  },
})
DefineAbility({
  Name="Divine Grace",
  Key="Paladin ~ Divine Grace",
  Category="Special Ability",
  SourcePage="p.61",
  Visible=false,
  Bonuses={
    {
      Category="SAVE",
      Formula=Formula("DivineGrace"),
      Variables={
        "ALL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(CHA,0)"),
      Variables={
        "DivineGrace",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Lay on Hands",
  Key="Paladin ~ Lay on Hands",
  Category="Special Ability",
  Description={
    Format="You can heal wounds (your own or those of others) by touch. Each day you can use this ability %1 times per day. With one use of this ability, you can heal %2d6 hit points of damage. Using this ability is a standard action, unless you target yourself, in which case it is a swift action. Despite the name of this ability, you only need one free hand to use this ability. Alternatively, you can use this healing power to deal damage to undead creatures, dealing %2d6 points of damage. Using Lay on Hands in this way requires a melee touch attack and doesn't provide an attack of opportunity. Undead do not receive a saving throw against this damage.",
    Arguments={
      Formula("LayOnHandsTimes"),
      Formula("LayOnHandsDice"),
    },
  },
  SourcePage="p.61",
  Aspects={
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "LayOnHandsTimes",
      },
    },
    {
      Name="MasterAbility",
      FormatString="Lay on Hands",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("LayOnHandsLVL/2"),
      Variables={
        "LayOnHandsDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(LayOnHandsLVL/2)+CHA"),
      Variables={
        "LayOnHandsTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "LayOnHandsLVL",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "LayOnHands",
    "Lay on Hands",
  },
})
DefineAbility({
  Name="Divine Health",
  Key="Paladin ~ Divine Health",
  Category="Special Ability",
  Description={
    Format="You are immune to all diseases, including supernatural and magical diseases, including mummy rot.",
  },
  SourcePage="p.61",
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Mercy",
  Key="Paladin ~ Mercy",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("Mercies"),
      Variables={
        "Mercy",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(MercyLVL/3,6)"),
      Variables={
        "Mercies",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "MercyLVL",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "Internal",
    "ClassFeatures",
    "Mercy",
  },
})
DefineAbility({
  Name="Channel Positive Energy",
  Key="Paladin ~ Channel Positive Energy",
  Category="Special Ability",
  Description={
    Format="You can unleash a wave of positive energy. You must choose to deal %1d%2 points of positive energy damage to undead creatures or to heal living creatures of %1d%2 points of damage. Creatures that take damage from channeled energy receive a DC %3 Will save to halve the damage. Using this ability consumes two uses of her lay on hands ability.",
    Arguments={
      Formula("PaladinChannelDice"),
      Formula("PaladinChannelDieSize"),
      Formula("PaladinChannelDC"),
    },
  },
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Channel Positive Energy",
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="Lay on Hands",
    },
    {
      Name="Ability Benefit",
      FormatString="(%1d%2, DC %3)",
      Arguments={
        "PaladinChannelDice",
        "PaladinChannelDieSize",
        "PaladinChannelDC",
      },
    },
    {
      Name="MasterAbility",
      FormatString="Channel Energy",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Variables={
        "PaladinChannelDieSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(PaladinChannelLVL+1)/2"),
      Variables={
        "PaladinChannelDice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(PaladinChannelLVL/2)+CHA"),
      Variables={
        "PaladinChannelDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "PaladinChannelLVL",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "Channel Energy",
    "Channel Energy Positive",
    "Channel Positive Energy",
  },
})
DefineAbility({
  Name="Holy Champion",
  Key="Paladin ~ Holy Champion",
  Category="Special Ability",
  Description={
    Format="You are a conduit for the power of your god. Your DR increases to 10/Evil. Whenever you use Smite Evil and successfully strike an evil outsider, the outsider is also subject to a Banishment at caster level %1 (your weapon and holy symbol automatically count as objects that the subject hates). After the Banishment effect and the damage from the attack is resolved, the smite immediately ends. In addition, whenever you channel positive energy or uses Lay on Hands to heal a creature, you heal the maximum possible amount.",
    Arguments={
      Formula("HolyChampionCasterLevel"),
    },
  },
  SourcePage="p.63",
  Bonuses={
    {
      Category="DR",
      Formula=Formula("5"),
      Variables={
        "Evil",
      },
    },
    {
      Category="VAR",
      Formula=Formula("HolyChampionLVL"),
      Variables={
        "HolyChampionCasterLevel",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "HolyChampionLVL",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
ModifyAbility({
  Name="Paladin ~ Mercy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Mercies"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy3"] == 1)
        end,
      },
      Variables={
        "Mercy",
      },
    },
  },
})
ModifyAbility({
  Name="Paladin ~ Mercy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Mercies"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy6"] == 1)
        end,
      },
      Variables={
        "Mercy",
      },
    },
  },
})
ModifyAbility({
  Name="Paladin ~ Mercy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Mercies"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy9"] == 1)
        end,
      },
      Variables={
        "Mercy",
      },
    },
  },
})
ModifyAbility({
  Name="Paladin ~ Mercy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Mercies"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy12"] == 1)
        end,
      },
      Variables={
        "Mercy",
      },
    },
  },
})
ModifyAbility({
  Name="Paladin ~ Mercy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Mercies"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy15"] == 1)
        end,
      },
      Variables={
        "Mercy",
      },
    },
  },
})
ModifyAbility({
  Name="Paladin ~ Mercy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Mercies"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Paladin_CF_Mercy18"] == 1)
        end,
      },
      Variables={
        "Mercy",
      },
    },
  },
})
DefineAbility({
  Name="Aura of Courage",
  Key="Paladin ~ Aura of Courage",
  Category="Special Ability",
  Description={
    Format="You are immune to fear (magical or otherwise). Each ally within 10 feet of you gains a +4 morale bonus on saving throws against fear effects. This ability functions only while you are conscious, not if you are unconscious or dead.",
  },
  SourcePage="p.61",
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Aura",
    "Aura of Courage",
  },
})
DefineAbility({
  Name="Aura of Resolve",
  Key="Paladin ~ Aura of Resolve",
  Category="Special Ability",
  Description={
    Format="You are immune to charm spells and spell-like abilities. Each ally within 10 feet of you gains a +4 morale bonus on saving throws against charm effects. This ability functions only while you are conscious, not if you are unconscious or dead.",
  },
  SourcePage="p.63",
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Aura",
    "Aura of Resolve",
  },
})
DefineAbility({
  Name="Aura of Justice",
  Key="Paladin ~ Aura of Justice",
  Category="Special Ability",
  Description={
    Format="You can expend two uses of your smite ability to grant the ability to smite evil to all allies within 10 feet, using your bonuses. Allies must use this Smile Evil ability by the start of your next turn and the bonuses last for 1 minute. Using this ability is a free action. Evil creatures gain no benefit from this ability.",
  },
  SourcePage="p.63",
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Aura",
    "Aura of Justice",
  },
})
DefineAbility({
  Name="Aura of Faith",
  Key="Paladin ~ Aura of Faith",
  Category="Special Ability",
  Description={
    Format="Your weapons are treated as good-aligned for the purposes of overcoming damage reduction. Any attack made against an enemy within 10 feet of you is treated as good-aligned for the purposes of overcoming damage reduction. This ability functions only while you are conscious, not if you are unconscious or dead.",
  },
  SourcePage="p.63",
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Aura",
    "Aura of Faith",
  },
})
DefineAbility({
  Name="Aura of Righteousness",
  Key="Paladin ~ Aura of Righteousness",
  Category="Special Ability",
  DamageReduction={
    Value="5/Evil",
  },
  Description={
    Format="You gain DR 5/Evil and immunity to compulsion spells and spell-like abilities. Each ally within 10 feet or you gains a +4 morale bonus on saving throws against fear compulsion . This ability functions only while you are conscious, not if you are unconscious or dead.",
  },
  SourcePage="p.63",
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Aura",
    "Aura of Righteousness",
  },
})
DefineAbility({
  Name="Divine Bond",
  Key="Paladin ~ Divine Bond",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Divine Bond",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min((DivineBondLVL-1)/4,4)"),
      Variables={
        "DivineBondTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PaladinLVL"),
      Variables={
        "DivineBondLVL",
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "Internal",
    "ClassFeatures",
    "Divine Bond",
  },
})
DefineAbility({
  Name="Celestial Spirit",
  Key="Divine Bond ~ Celestial Spirit",
  Category="Special Ability",
  Description={
    Format="Your divine bond allows you to enhance your weapon as a standard action by calling upon the aid of a celestial spirit for %1 minutes. When called, the spirit causes the weapon to shed light as a torch. This spirit grants the weapon a +%2 enhancement bonus. This bonus can be added to the weapon, stacking with existing weapon bonuses to a maximum of +5, or it can be used to add any of the following weapon properties: defending, flaming, keen, merciful (+1), axiomatic, disruption, flaming burst, holy (+2), speed (+3), and brilliant energy (+4). Adding these properties consumes an amount of bonus equal to the property's cost. These bonuses are added to any properties the weapon already has, but duplicate abilities do not stack. If the weapon is not magical, at least a +1 enhancement bonus must be added before any other properties can be added. The bonus and properties granted by the spirit are determined when the spirit is called and cannot be changed until the spirit is called again. The celestial spirit imparts no bonuses if the weapon is held by anyone other than you but resumes giving bonuses if returned to you. These bonuses apply to only one end of a double weapon. You can use this ability %3 times per day. If a weapon bonded with a celestial spirit is destroyed, you lose the use of this ability for 30 days, or until you gain a level, whichever comes first. During this 30-day period, you take a -1 penalty on attack and weapon damage rolls.",
    Arguments={
      Formula("CelestialSpiritDuration"),
      Formula("CelestialSpiritBonus"),
      Formula("DivineBondTimes"),
    },
  },
  SourcePage="p.63",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DivineBondTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DivineBondLVL"),
      Variables={
        "CelestialSpiritDuration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min((1+((DivineBondLVL-5)/3)),6)"),
      Variables={
        "CelestialSpiritBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Paladin_CF_BondedWeapon"] == 0)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DivineBond",
    "Divine Bond",
  },
})
DefineAbility({
  Name="Special Mount",
  Key="Divine Bond ~ Special Mount",
  Category="Special Ability",
  Description={
    Format="Your divine bond allows you to gain the service of an unusually intelligent, strong, and loyal steed to serve you in your crusade against evil.",
  },
  SourcePage="p.63",
  Abilities={
    {
      Category="Special Mount Choice",
      Nature="AUTOMATIC",
      Names={
        "Special Mount ~ Standard Choices",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.IsAnyType("SpecialMountAlternate") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.IsAnyType("Special Mount") then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Companion ~ Special Mount",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["CompanionDisable_PaladinMount"] == 0)
        end,
      },
    },
  },
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DivineBondTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DivineBondLVL/3"),
      Variables={
        "SpecialMountSpellLevel",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DivineBondLVL+11"),
      Variables={
        "SpecialMountSR",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Divine_Bond_Mount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CompanionMasterLVL_Paladin"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CompanionDisable_PaladinMount"] == 0)
        end,
      },
      Variables={
        "SpecialMountLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DivineBondLVL"),
      Variables={
        "CompanionMasterLVL_Paladin",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Paladin_CF_BondedMount"] == 0)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DivineBond",
    "Divine Bond",
    "Special Mount",
    "Divine Bond Mount",
  },
})
DefineAbility({
  Name="Standard Choices",
  Key="Special Mount ~ Standard Choices",
  Category="Internal",
  FollowerTypes={
    {
      Type="Special Mount",
      IsValidFollower=function (follower)
        return follower.Name == "Companion (Boar)" or follower.Name == "Companion (Cat (Big (Lion)))" or follower.Name == "Companion (Cat (Big (Tiger)))" or follower.Name == "Companion (Dog)" or follower.Name == "Companion (Horse)" or follower.Name == "Companion (Pony)" or follower.Name == "Companion (Shark)" or follower.Name == "Companion (Wolf)"
      end,
      FollowerLevelAdjustment=0,
    },
  },
  Types={
    "SpecialMountSelection",
  },
})
DefineAbility({
  Name="Expanded Choices",
  Key="Special Mount ~ Expanded Choices",
  Category="Internal",
  Cost=0,
  FollowerTypes={
    {
      Type="Special Mount",
      IsValidFollower=function (follower)
        return true
      end,
      FollowerLevelAdjustment=0,
    },
  },
  Types={
    "SpecialMountSelection",
    "SpecialMountAlternate",
  },
})
ModifyAbility({
  Name="Divine Bond ~ Special Mount",
  Category="Special Ability",
  Description={
    Format="Your divine bond allows you to gain the service of an unusually intelligent, strong, and loyal steed to serve you in your crusade against evil. This mount is usually a heavy horse (for a Medium paladin) or a pony (for a Small paladin), although more exotic mounts, such as a boar, camel, or dog are also suitable. This mount functions as a druid's animal companion, with an effective druid level of 1. Bonded mounts have an Intelligence of at least 6. %1 times day, as a full-round action, you may magically call your mount to your side. This ability is the equivalent of a spell of level %2. The mount immediately appears adjacent to you. Should your mount die, you may not summon another mount for 30 days, or until you gain a level, whichever comes first. During this 30-day period, you take a -1 penalty on attack and weapon damage rolls.",
    Arguments={
      Formula("DivineBondTimes"),
      Formula("SpecialMountSpellLevel"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DivineBondLVL"] >= 5)
      end,
      function (character, item, sources)
        return (character.Variables["DivineBondLVL"] < 11)
      end,
    },
  },
})
ModifyAbility({
  Name="Divine Bond ~ Special Mount",
  Category="Special Ability",
  Description={
    Format="Your divine bond allows you to gain the service of an unusually intelligent, strong, and loyal steed to serve you in your crusade against evil. This mount is usually a heavy horse (for a Medium paladin) or a pony (for a Small paladin), although more exotic mounts, such as a boar, camel, or dog are also suitable. The mount gains the celestial template and becomes a magical beast for the purposes of which spells affect it. This mount functions as a druid's animal companion, with an effective druid level of 1. Bonded mounts have an Intelligence of at least 6. %1 times day, as a full-round action, you may magically call your mount to your side. This ability is the equivalent of a spell of level %2. The mount immediately appears adjacent to you. Should your mount die, you may not summon another mount for 30 days, or until you gain a level, whichever comes first. During this 30-day period, you take a -1 penalty on attack and weapon damage rolls.",
    Arguments={
      Formula("DivineBondTimes"),
      Formula("SpecialMountSpellLevel"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DivineBondLVL"] >= 11)
      end,
      function (character, item, sources)
        return (character.Variables["DivineBondLVL"] < 15)
      end,
    },
  },
})
ModifyAbility({
  Name="Divine Bond ~ Special Mount",
  Category="Special Ability",
  Description={
    Format="Your divine bond allows you to gain the service of an unusually intelligent, strong, and loyal steed to serve you in your crusade against evil. This mount is usually a heavy horse (for a Medium paladin) or a pony (for a Small paladin), although more exotic mounts, such as a boar, camel, or dog are also suitable. The mount gains the celestial template and becomes a magical beast for the purposes of which spells affect it, and it has spell resistance %2. This mount functions as a druid's animal companion, with an effective druid level of 1. Bonded mounts have an Intelligence of at least 6. %1 times day, as a full-round action, you may magically call your mount to your side. This ability is the equivalent of a spell of level %3. The mount immediately appears adjacent to you. Should your mount die, you may not summon another mount for 30 days, or until you gain a level, whichever comes first. During this 30-day period, you take a -1 penalty on attack and weapon damage rolls.",
    Arguments={
      Formula("DivineBondTimes"),
      Formula("SpecialMountSR"),
      Formula("SpecialMountSpellLevel"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DivineBondLVL"] >= 11)
      end,
      function (character, item, sources)
        return (character.Variables["DivineBondLVL"] < 15)
      end,
    },
  },
})
DefineAbility({
  Name="Fatigued",
  Key="Mercy ~ Fatigued",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer fatigued.",
  },
  DisplayName="Mercy (Fatigued)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 3)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Shaken",
  Key="Mercy ~ Shaken",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer shaken.",
  },
  DisplayName="Mercy (Shaken)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 3)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Sickened",
  Key="Mercy ~ Sickened",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer sickened.",
  },
  DisplayName="Mercy (Sickened)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 3)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Dazed",
  Key="Mercy ~ Dazed",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer dazed.",
  },
  DisplayName="Mercy (Dazed)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 6)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Diseased",
  Key="Mercy ~ Diseased",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the ability also acts as Remove Disease with a caster level of %1.",
    Arguments={
      Formula("MercyLVL"),
    },
  },
  DisplayName="Mercy (Diseased)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 6)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Staggered",
  Key="Mercy ~ Staggered",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer staggered, unless it is at exactly 0 hit points.",
  },
  DisplayName="Mercy (Staggered)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 6)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Cursed",
  Key="Mercy ~ Cursed",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the ability also acts as Remove Curse with a caster level of %1.",
    Arguments={
      Formula("MercyLVL"),
    },
  },
  DisplayName="Mercy (Cursed)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 9)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Exhausted",
  Key="Mercy ~ Exhausted",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer exhausted.",
  },
  DisplayName="Mercy (Exhausted)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Mercy ~ Fatigued" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 9)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Frightened",
  Key="Mercy ~ Frightened",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer frightened.",
  },
  DisplayName="Mercy (Frightened)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Mercy ~ Shaken" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 9)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Nauseated",
  Key="Mercy ~ Nauseated",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer nauseated.",
  },
  DisplayName="Mercy (Nauseated)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Mercy ~ Sickened" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 9)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Poisoned",
  Key="Mercy ~ Poisoned",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the ability also acts as Neutralize Poison with a caster level of %1.",
    Arguments={
      Formula("MercyLVL"),
    },
  },
  DisplayName="Mercy (Poisoned)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 9)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Blinded",
  Key="Mercy ~ Blinded",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer blinded.",
  },
  DisplayName="Mercy (Blinded)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 12)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Deafened",
  Key="Mercy ~ Deafened",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer deafened.",
  },
  DisplayName="Mercy (Deafened)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 12)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Paralyzed",
  Key="Mercy ~ Paralyzed",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer paralyzed.",
  },
  DisplayName="Mercy (Paralyzed)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 12)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Stunned",
  Key="Mercy ~ Stunned",
  Category="Special Ability",
  Description={
    Format="Whenever you use Lay on Hands to heal damage to one target, the target is no longer stunned.",
  },
  DisplayName="Mercy (Stunned)",
  SourcePage="p.61",
  Conditions={
    function (character, item, sources)
      return (character.Variables["MercyLVL"] >= 12)
    end,
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Mercy",
    "LayOnHands",
  },
})
DefineAbility({
  Name="Track",
  Key="Ranger ~ Track",
  Category="Special Ability",
  Description={
    Format="You gain +%1 to Survival checks made to follow tracks.",
    Arguments={
      Formula("TrackBonus"),
    },
  },
  SourcePage="p.64",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Track Bonus",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "TrackBonus",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "TrackLVL",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Swift Tracker",
  Key="Ranger ~ Swift Tracker",
  Category="Special Ability",
  Description={
    Format="You can move at your normal speed while using Survival to follow tracks without taking the normal -5 penalty. You take only a -10 penalty (instead of the normal -20) when moving at up to twice normal speed while tracking.",
  },
  SourcePage="p.67",
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Quarry",
  Key="Ranger ~ Quarry",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Quarry Output",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Quarry",
  Key="Ranger ~ Quarry Output",
  Category="Special Ability",
  Description={
    Format="You can, as a standard action, denote one target within your line of sight as your quarry. Whenever you are following the tracks of your quarry, you can take 10 on Survival skill checks while moving at normal speed, without penalty. In addition, you receive a +2 insight bonus on attack rolls made against your quarry and all critical threats are automatically confirmed. You can have no more than one quarry at a time and the creature's type must correspond to one of your favored enemy types. You can end this effect at any time as a free action, but you cannot select a new quarry for 24 hours. If your quarry is killed, you can select a new quarry after waiting 1 hour.",
  },
  SourcePage="p.67",
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Camouflage",
  Key="Ranger ~ Camouflage",
  Category="Special Ability",
  Description={
    Format="You can use the Stealth skill to hide in any of your favored terrains, even if the terrain doesn't grant cover or concealment.",
  },
  SourcePage="p.67",
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Hide in Plain Sight",
  Key="Ranger ~ Hide in Plain Sight",
  Category="Special Ability",
  Description={
    Format="While in any of your favored terrains, you can use the Stealth skill even while being observed.",
  },
  SourcePage="p.67",
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Improved Quarry",
  Key="Ranger ~ Improved Quarry",
  Category="Special Ability",
  Description={
    Format="You can, as a free action, denote one target within your line of sight as your quarry. Whenever you are following the tracks of your quarry, you can take 20 on Survival skill checks while moving at normal speed, without penalty. In addition, you receive a +4 insight bonus on attack rolls made against your quarry and all critical threats are automatically confirmed. You can have no more than one quarry at a time and the creature's type must correspond to one of your favored enemy types. You can end this effect at any time as a free action, but you cannot select a new quarry for 24 hours. If your quarry is killed, you can select a new quarry after waiting 10 minutes.",
  },
  SourcePage="p.67",
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Master Hunter",
  Key="Ranger ~ Master Hunter",
  Category="Special Ability",
  Description={
    Format="You can always move at full speed while using Survival to follow tracks without penalty. You can, as a standard action, make a single attack against a favored enemy at your full attack bonus. If the attack hits, the target takes damage normally and must make a Fortitude save or die (DC %1). You can choose instead to deal an amount of nonlethal damage equal to the creature's current hit points. A successful save negates this damage. You can use this ability once per day against each favored enemy type you possess, but not against the same creature more than once in a 24-hour period.",
    Arguments={
      Formula("MasterHunterDC"),
    },
  },
  SourcePage="p.67",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(MasterHunterLVL/2)+WIS"),
      Variables={
        "MasterHunterDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "MasterHunterLVL",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Evasion",
  Key="Ranger ~ Evasion",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evasion",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Evasion",
  },
})
DefineAbility({
  Name="Improved Evasion",
  Key="Ranger ~ Improved Evasion",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Improved Evasion",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Improved Evasion",
  },
})
DefineAbility({
  Name="Wild Empathy",
  Key="Ranger ~ Wild Empathy",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Wild Empathy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "WildEmpathy",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Wild Empathy",
  },
})
DefineAbility({
  Name="Woodland Stride",
  Key="Ranger ~ Woodland Stride",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Woodland Stride",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Woodland Stride",
  },
})
DefineAbility({
  Name="Combat Style Feat",
  Key="Ranger ~ Combat Style Feat",
  Category="Special Ability",
  Description={
    Format="At 2nd level, a ranger must select one of two combat styles to pursue: archery or two weapon combat. The ranger's expertise manifests in the form of bonus feats at 2nd, 6th, 10th, 14th, and 18th level. He can choose feats from his selected combat style, even if he does not have the normal prerequisites. If the ranger selects archery, he can choose from the following list whenever he gains a combat style feat: Far Shot, Point-Blank Shot, Precise Shot, and Rapid Shot. At 6th level, he adds Improved Precise Shot and Manyshot to the list. At 10th level, he adds Pinpoint Targeting and Shot on the Run to the list. If the ranger selects two-weapon combat, he can choose from the following list whenever he gains a combat style feat: Double Slice, Improved Shield Bash, Quick Draw, and Two-Weapon Fighting. At 6th level, he adds Improved Two-Weapon Fighting and Two-Weapon Defense to the list. At 10th level, he adds Greater Two-Weapon Fighting and Two- Weapon Rend to the list. The benefits of the ranger's chosen style feats apply only when he wears light, medium, or no armor. He loses all benefits of his combat style feats when wearing heavy armor. Once a ranger selects a combat style, it cannot be changed.",
  },
  SourcePage="p.65",
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Combat Style",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("RangerCombatStyleFeatCount"),
      Variables={
        "Ranger Combat Style Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(CombatStyleLVL+2)/4"),
      Variables={
        "RangerCombatStyleFeatCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "RangerDefaultCombatStyle",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "CombatStyleLVL",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Track Bonus",
  Category="Internal",
  Bonuses={
    {
      Category="SITUATION",
      Formula=Formula("TrackBonus"),
      Variables={
        "Survival=Follow or identify tracks",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(TrackLVL/2,1)"),
      Variables={
        "TrackBonus",
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Hunter's Bond",
  Key="Ranger ~ Hunter's Bond",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Hunter's Bond",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "HuntersBondLVL",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Internal",
    "ClassFeatures",
    "Hunters Bond",
  },
})
DefineAbility({
  Name="Hunting Companions",
  Key="Hunter's Bond ~ Hunting Companions",
  Category="Special Ability",
  Description={
    Format="You form a powerful bond with your companions. You may spend a move action to grant half your favored enemy bonus against a single target to all allies within 30 feet who can see or hear you for %1 rounds. This bonus does not stack with any favored enemy bonuses possessed by your allies; they use whichever bonus is higher.",
    Arguments={
      Formula("max(1,WIS)"),
    },
  },
  SourcePage="p.66",
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "HuntersBond",
  },
})
DefineAbility({
  Name="Animal Companion",
  Key="Hunter's Bond ~ Animal Companion",
  Category="Special Ability",
  Description={
    Format="This is not Allowed with the Archetype you selected.",
    Conditions={
      function (character, item, sources)
        return character.HasAnyAbility(function (ability)
          if ability.Category ~= "Archetype" then return false end
          if ability.IsAnyType("RangerAnimalCompanion") then return true end
          return false
        end)
      end,
    },
  },
  SourcePage="p.51",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Companion ~ Animal Companion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["CompanionDisable_AnimalCompanion"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Hunters_Bond_Animal_Companion",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CompanionMasterLVL_Ranger"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CompanionDisable_AnimalCompanion"] == 0)
        end,
      },
      Variables={
        "AnimalCompanionMasterLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerLVL-3"),
      Variables={
        "CompanionMasterLVL_Ranger",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Archetype" then return false end
        if ability.IsAnyType("RangerAnimalCompanion") then return true end
        return false
      end))
    end,
  },
  FollowerTypes={
    {
      Type="Animal Companion",
      IsValidFollower=function (follower)
        return follower.Name == "Companion (Badger (Wolverine))" or follower.Name == "Companion (Bird (Eagle))" or follower.Name == "Companion (Bird (Hawk))" or follower.Name == "Companion (Bird (Owl))" or follower.Name == "Companion (Camel)" or follower.Name == "Companion (Cat (Small (Cheetah)))" or follower.Name == "Companion (Cat (Small (Leopard)))" or follower.Name == "Companion (Dire Rat)" or follower.Name == "Companion (Dog)" or follower.Name == "Companion (Horse)" or follower.Name == "Companion (Pony)" or follower.Name == "Companion (Shark)" or follower.Name == "Companion (Snake (Constrictor))" or follower.Name == "Companion (Snake (Viper))" or follower.Name == "Companion (Wolf)"
      end,
      FollowerLevelAdjustment=0,
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerAnimalCompanion") then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "HuntersBond",
    "Animal Companion",
  },
})
DefineAbility({
  Name="Ranger Favored Enemy",
  Key="Ranger ~ Favored Enemy",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="SKILL",
      Formula=Formula("%CHOICE"),
      Variables={
        "TYPE=Knowledge",
      },
    },
    Target="PC",
  },
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Basic Favored Enemy",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("RangerFavoredEnemyCount"),
      Variables={
        "Favored Enemy",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("FavoredEnemyBonusCount"),
      Variables={
        "Favored Enemy Bonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerFavoredEnemyLVL/5+1"),
      Variables={
        "RangerFavoredEnemyCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerFavoredEnemyLVL/5"),
      Variables={
        "FavoredEnemyBonusCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "RangerFavoredEnemyLVL",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Ranger Favored Terrain",
  Key="Ranger ~ Favored Terrain",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Common Favored Terrain",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Basic Favored Terrain",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(RangerFavoredTerrainLVL+2)/5"),
      Variables={
        "FavoredTerrainPool",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RangerLVL"),
      Variables={
        "RangerFavoredTerrainLVL",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Ranger ~ Combat Style Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_CombatStyleFeat2"] == 1)
        end,
      },
      Variables={
        "RangerCombatStyleFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Combat Style Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerLVL"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_CombatStyleFeat6"] == 1)
        end,
      },
      Variables={
        "RangerCombatStyleFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Combat Style Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerLVL"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_CombatStyleFeat10"] == 1)
        end,
      },
      Variables={
        "RangerCombatStyleFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Combat Style Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerLVL"] >= 14)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_CombatStyleFeat14"] == 1)
        end,
      },
      Variables={
        "RangerCombatStyleFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Combat Style Feat",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerLVL"] >= 18)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_CombatStyleFeat18"] == 1)
        end,
      },
      Variables={
        "RangerCombatStyleFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Favored Enemy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerFavoredEnemyCount"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy1"] == 1)
        end,
      },
      Variables={
        "Favored Enemy",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FavoredEnemyBonusCount"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy1"] == 1)
        end,
      },
      Variables={
        "Favored Enemy Bonus",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Favored Enemy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerFavoredEnemyCount"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy2"] == 1)
        end,
      },
      Variables={
        "Favored Enemy",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FavoredEnemyBonusCount"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy2"] == 1)
        end,
      },
      Variables={
        "Favored Enemy Bonus",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Favored Enemy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerFavoredEnemyCount"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy3"] == 1)
        end,
      },
      Variables={
        "Favored Enemy",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FavoredEnemyBonusCount"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy3"] == 1)
        end,
      },
      Variables={
        "Favored Enemy Bonus",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Favored Enemy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerFavoredEnemyCount"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy4"] == 1)
        end,
      },
      Variables={
        "Favored Enemy",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FavoredEnemyBonusCount"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy4"] == 1)
        end,
      },
      Variables={
        "Favored Enemy Bonus",
      },
    },
  },
})
ModifyAbility({
  Name="Ranger ~ Favored Enemy",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RangerFavoredEnemyCount"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy5"] == 1)
        end,
      },
      Variables={
        "Favored Enemy",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["FavoredEnemyBonusCount"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Ranger_CF_FavoredEnemy5"] == 1)
        end,
      },
      Variables={
        "Favored Enemy Bonus",
      },
    },
  },
})
DefineAbility({
  Name="Archery",
  Key="Ranger Combat Style ~ Archery",
  Category="Special Ability",
  SourcePage="p.65",
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Far_Shot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Point_Blank_Shot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Precise_Shot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Rapid_Shot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 6)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Improved_Precise_Shot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 6)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Manyshot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 10)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Pinpoint_Targeting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 10)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Shot_on_the_Run",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "RangerCombatStyle",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Two-Weapon Combat",
  Key="Ranger Combat Style ~ Two-Weapon Combat",
  Category="Special Ability",
  SourcePage="p.65",
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Double_Slice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Improved_Shield_Bash",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Quick_Draw",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Ranger_Combat_Style_Feat_Two_Weapon_Fighting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 6)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Improved_Two_Weapon_Fighting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 6)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Two_Weapon_Defense",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 10)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Greater_Two_Weapon_Fighting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["CombatStyleLVL"] >= 10)
        end,
      },
      Variables={
        "Ranger_Combat_Style_Feat_Two_Weapon_Rend",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "RangerCombatStyle",
    "ClassFeatures",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Ranger Archetype Support",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerArchetype") then return true end
            return false
          end)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Ranger Archetype Support",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Ranger ~ Evasion",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerEvasion") then return true end
            return false
          end)
        end,
        function (character, item, sources)
          return (character.Variables["RangerLvl"] >= 16)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Far Shot",
  Key="Ranger Combat Style Feat ~ Far Shot",
  Category="Special Ability",
  Description={
    Format="You are more accurate at longer ranges.",
  },
  SourcePage="p.124",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Far Shot",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Far Shot" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Far_Shot"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Point-Blank Shot",
  Key="Ranger Combat Style Feat ~ Point-Blank Shot",
  Category="Special Ability",
  Description={
    Format="You are especially accurate when making ranged attacks against close target.",
  },
  SourcePage="p.131",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Point-Blank Shot",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Point-Blank Shot" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Point_Blank_Shot"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Precise Shot",
  Key="Ranger Combat Style Feat ~ Precise Shot",
  Category="Special Ability",
  Description={
    Format="You are adept at firing ranged attacks into melee.",
  },
  SourcePage="p.131",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Precise Shot",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Precise Shot" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Precise_Shot"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Rapid Shot",
  Key="Ranger Combat Style Feat ~ Rapid Shot",
  Category="Special Ability",
  Description={
    Format="You can make an additional ranged attack.",
  },
  SourcePage="p.132",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Rapid Shot",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Rapid Shot" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Rapid_Shot"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Improved Precise Shot",
  Key="Ranger Combat Style Feat ~ Improved Precise Shot",
  Category="Special Ability",
  Description={
    Format="Your ranged attacks ignore anything but total concealment and cover.",
  },
  SourcePage="p.128",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Precise Shot",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Precise Shot" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Improved_Precise_Shot"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Manyshot",
  Key="Ranger Combat Style Feat ~ Manyshot",
  Category="Special Ability",
  Description={
    Format="You can fire multiple arrows at a single target.",
  },
  SourcePage="p.130",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Manyshot",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Manyshot" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Manyshot"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Pinpoint Targeting",
  Key="Ranger Combat Style Feat ~ Pinpoint Targeting",
  Category="Special Ability",
  Description={
    Format="You can target the weak points in your opponent's armor.",
  },
  SourcePage="p.131",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Pinpoint Targeting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Pinpoint Targeting" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Pinpoint_Targeting"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Shot on the Run",
  Key="Ranger Combat Style Feat ~ Shot on the Run",
  Category="Special Ability",
  Description={
    Format="You can move, fire a ranged weapon, and move again before your foes can react.",
  },
  SourcePage="p.133",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Shot on the Run",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Shot on the Run" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Shot_on_the_Run"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Double Slice",
  Key="Ranger Combat Style Feat ~ Double Slice",
  Category="Special Ability",
  Description={
    Format="Your off-hand weapon while dual-wielding strikes with greater power.",
  },
  SourcePage="p.122",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Double Slice",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Double Slice" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Double_Slice"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Improved Shield Bash",
  Key="Ranger Combat Style Feat ~ Improved Shield Bash",
  Category="Special Ability",
  Description={
    Format="You can protect yourself with your shield, even if you use it to attack.",
  },
  SourcePage="p.128",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Shield Bash",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Shield Bash" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Improved_Shield_Bash"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Quick Draw",
  Key="Ranger Combat Style Feat ~ Quick Draw",
  Category="Special Ability",
  Description={
    Format="You can draw weapons faster than most.",
  },
  SourcePage="p.131",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Quick Draw",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Quick Draw" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Quick_Draw"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Two-Weapon Fighting",
  Key="Ranger Combat Style Feat ~ Two-Weapon Fighting",
  Category="Special Ability",
  Description={
    Format="You can fight with a weapon in each of your hands. You can make one extra attack each round with the secondary weapon.",
  },
  SourcePage="p.136",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Two-Weapon Fighting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Two-Weapon Fighting" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Two_Weapon_Fighting"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Improved Two-Weapon Fighting",
  Key="Ranger Combat Style Feat ~ Improved Two-Weapon Fighting",
  Category="Special Ability",
  Description={
    Format="You are skilled at fighting with two weapons.",
  },
  SourcePage="p.128",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Improved Two-Weapon Fighting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Two-Weapon Fighting" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Improved_Two_Weapon_Fighting"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Two-Weapon Defense",
  Key="Ranger Combat Style Feat ~ Two-Weapon Defense",
  Category="Special Ability",
  Description={
    Format="You are skilled at defending yourself while fighting with two weapons.",
  },
  SourcePage="p.136",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Two-Weapon Defense",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Two-Weapon Defense" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Two_Weapon_Defense"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Greater Two-Weapon Fighting",
  Key="Ranger Combat Style Feat ~ Greater Two-Weapon Fighting",
  Category="Special Ability",
  Description={
    Format="You are incredibly skilled at fighting with two weapons at the same time.",
  },
  SourcePage="p.126",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Greater Two-Weapon Fighting",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Greater Two-Weapon Fighting" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Greater_Two_Weapon_Fighting"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Two-Weapon Rend",
  Key="Ranger Combat Style Feat ~ Two-Weapon Rend",
  Category="Special Ability",
  Description={
    Format="Striking with both your weapons simultaneously, you can use them to deliver devastating wounds.",
  },
  SourcePage="p.136",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Two-Weapon Rend",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["var(\"COUNT[EQTYPE.ARMOR.EQUIPPED.IS.HEAVY]\")"] < 1)
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Two-Weapon Rend" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Ranger_Combat_Style_Feat_Two_Weapon_Rend"] >= 1)
    end,
  },
  Types={
    "RangerBonusFeat",
  },
})
DefineAbility({
  Name="Basic Favored Enemy",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredBaseBonus",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Aberration",
  Key="Favored Enemy ~ Aberration",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against aberrations. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredAberration"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredAberration",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against aberrations.",
      Arguments={
        "FavoredAberration",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against aberrations.",
      Arguments={
        "FavoredAberration",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredAberration",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Animal",
  Key="Favored Enemy ~ Animal",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against animals. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredAnimal"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredAnimal",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against animals.",
      Arguments={
        "FavoredAnimal",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against animals.",
      Arguments={
        "FavoredAnimal",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredAnimal",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Construct",
  Key="Favored Enemy ~ Construct",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against constructs. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredConstruct"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredConstruct",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against constructs.",
      Arguments={
        "FavoredConstruct",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against constructs.",
      Arguments={
        "FavoredConstruct",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredConstruct",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Dragon",
  Key="Favored Enemy ~ Dragon",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against dragons. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredDragon"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredDragon",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against dragons.",
      Arguments={
        "FavoredDragon",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against dragons.",
      Arguments={
        "FavoredDragon",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredDragon",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Fey",
  Key="Favored Enemy ~ Fey",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against fey. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredFey"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredFey",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against fey.",
      Arguments={
        "FavoredFey",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against fey.",
      Arguments={
        "FavoredFey",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredFey",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Aquatic)",
  Key="Favored Enemy ~ Humanoid (Aquatic)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against aquatic humanoids. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidAquatic"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidAquatic",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against aquatic humanoids.",
      Arguments={
        "FavoredHumanoidAquatic",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against aquatic humanoids.",
      Arguments={
        "FavoredHumanoidAquatic",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidAquatic",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Dwarf)",
  Key="Favored Enemy ~ Humanoid (Dwarf)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against dwarves. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidDwarf"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidDwarf",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against dwarves.",
      Arguments={
        "FavoredHumanoidDwarf",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against dwarves.",
      Arguments={
        "FavoredHumanoidDwarf",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidDwarf",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Elf)",
  Key="Favored Enemy ~ Humanoid (Elf)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against elves. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidElf"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidElf",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against elves.",
      Arguments={
        "FavoredHumanoidElf",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against elves.",
      Arguments={
        "FavoredHumanoidElf",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidElf",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Giant)",
  Key="Favored Enemy ~ Humanoid (Giant)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against giants. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidGiant"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidGiant",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against giants.",
      Arguments={
        "FavoredHumanoidGiant",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against giants.",
      Arguments={
        "FavoredHumanoidGiant",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidGiant",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Goblinoid)",
  Key="Favored Enemy ~ Humanoid (Goblinoid)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against goblinoids. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidGoblinoid"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidGoblinoid",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against goblinoids.",
      Arguments={
        "FavoredHumanoidGoblinoid",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against goblinoids.",
      Arguments={
        "FavoredHumanoidGoblinoid",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidGoblinoid",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Gnoll)",
  Key="Favored Enemy ~ Humanoid (Gnoll)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against gnolls. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidGnoll"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidGnoll",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against gnolls.",
      Arguments={
        "FavoredHumanoidGnoll",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against gnolls.",
      Arguments={
        "FavoredHumanoidGnoll",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidGnoll",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Gnome)",
  Key="Favored Enemy ~ Humanoid (Gnome)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against gnomes. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidGnome"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidGnome",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against gnomes.",
      Arguments={
        "FavoredHumanoidGnome",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against gnomes.",
      Arguments={
        "FavoredHumanoidGnome",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidGnome",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Halfling)",
  Key="Favored Enemy ~ Humanoid (Halfling)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against halflings. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidHalfling"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidHalfling",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against halflings.",
      Arguments={
        "FavoredHumanoidHalfling",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against halflings.",
      Arguments={
        "FavoredHumanoidHalfling",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidHalfling",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Human)",
  Key="Favored Enemy ~ Humanoid (Human)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against humans. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidHuman"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidHuman",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against humans.",
      Arguments={
        "FavoredHumanoidHuman",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against humans.",
      Arguments={
        "FavoredHumanoidHuman",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidHuman",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Orc)",
  Key="Favored Enemy ~ Humanoid (Orc)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against orcs. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidOrc"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidOrc",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against orcs.",
      Arguments={
        "FavoredHumanoidOrc",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against orcs.",
      Arguments={
        "FavoredHumanoidOrc",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidOrc",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Humanoid (Reptilian)",
  Key="Favored Enemy ~ Humanoid (Reptilian)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against reptilian humanoids. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredHumanoidReptilian"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredHumanoidReptilian",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against reptilian humanoids.",
      Arguments={
        "FavoredHumanoidReptilian",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against reptilian humanoids.",
      Arguments={
        "FavoredHumanoidReptilian",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredHumanoidReptilian",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Magical Beast",
  Key="Favored Enemy ~ Magical Beast",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against magical beasts. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredMagicalBeast"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredMagicalBeast",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against magical beasts.",
      Arguments={
        "FavoredMagicalBeast",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against magical beasts.",
      Arguments={
        "FavoredMagicalBeast",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredMagicalBeast",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Monstrous Humanoid",
  Key="Favored Enemy ~ Monstrous Humanoid",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against monstrous humanoids. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredMonstrousHumanoid"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredMonstrousHumanoid",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against monstrous humanoids.",
      Arguments={
        "FavoredMonstrousHumanoid",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against monstrous humanoids.",
      Arguments={
        "FavoredMonstrousHumanoid",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredMonstrousHumanoid",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Ooze",
  Key="Favored Enemy ~ Ooze",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against oozes. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOoze"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOoze",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against oozes.",
      Arguments={
        "FavoredOoze",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against oozes.",
      Arguments={
        "FavoredOoze",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOoze",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Air)",
  Key="Favored Enemy ~ Outsider (Air)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against outsiders with the air subtype. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderAir"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderAir",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against outsiders with the air subtype.",
      Arguments={
        "FavoredOutsiderAir",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against outsiders with the air subtype.",
      Arguments={
        "FavoredOutsiderAir",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderAir",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Chaotic)",
  Key="Favored Enemy ~ Outsider (Chaotic)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against chaotic outsiders. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderChaotic"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderChaotic",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against chaotic outsiders.",
      Arguments={
        "FavoredOutsiderChaotic",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against chaotic outsiders.",
      Arguments={
        "FavoredOutsiderChaotic",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderChaotic",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Earth)",
  Key="Favored Enemy ~ Outsider (Earth)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against outsiders with the earth subtype. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderEarth"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderEarth",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against outsiders with the earth subtype.",
      Arguments={
        "FavoredOutsiderEarth",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against outsiders with the earth subtype.",
      Arguments={
        "FavoredOutsiderEarth",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderEarth",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Evil)",
  Key="Favored Enemy ~ Outsider (Evil)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against evil outsiders. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderEvil"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderEvil",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against evil outsiders.",
      Arguments={
        "FavoredOutsiderEvil",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against evil outsiders.",
      Arguments={
        "FavoredOutsiderEvil",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderEvil",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Fire)",
  Key="Favored Enemy ~ Outsider (Fire)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against outsiders with the fire subtype. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderFire"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderFire",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against outsiders with the fire subtype.",
      Arguments={
        "FavoredOutsiderFire",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against outsiders with the fire subtype.",
      Arguments={
        "FavoredOutsiderFire",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderFire",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Good)",
  Key="Favored Enemy ~ Outsider (Good)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against good outsiders. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderGood"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderGood",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against good outsiders.",
      Arguments={
        "FavoredOutsiderGood",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against good outsiders.",
      Arguments={
        "FavoredOutsiderGood",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderGood",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Lawful)",
  Key="Favored Enemy ~ Outsider (Lawful)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against lawful outsiders. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderLawful"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderLawful",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against lawful outsiders.",
      Arguments={
        "FavoredOutsiderLawful",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against lawful outsiders.",
      Arguments={
        "FavoredOutsiderLawful",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderLawful",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Native)",
  Key="Favored Enemy ~ Outsider (Native)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against native outsiders. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderNative"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderNative",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against native outsiders.",
      Arguments={
        "FavoredOutsiderNative",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against native outsiders.",
      Arguments={
        "FavoredOutsiderNative",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderNative",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Outsider (Water)",
  Key="Favored Enemy ~ Outsider (Water)",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against outsiders with the water subtype. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredOutsiderWater"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredOutsiderWater",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against outsiders with the water subtype.",
      Arguments={
        "FavoredOutsiderWater",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against outsiders with the water subtype.",
      Arguments={
        "FavoredOutsiderWater",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredOutsiderWater",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Plant",
  Key="Favored Enemy ~ Plant",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against plant creatures. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredPlant"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredPlant",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against plant creatures.",
      Arguments={
        "FavoredPlant",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against plant creatures.",
      Arguments={
        "FavoredPlant",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredPlant",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Undead",
  Key="Favored Enemy ~ Undead",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against undead. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredUndead"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredUndead",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against undead.",
      Arguments={
        "FavoredUndead",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against undead.",
      Arguments={
        "FavoredUndead",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredUndead",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Vermin",
  Key="Favored Enemy ~ Vermin",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks when using these skills against vermin. Likewise, you get a +%1 bonus on weapon attack and damage rolls against such creatures. You may make Knowledge Skill checks untrained to identify such creatures.",
    Arguments={
      Formula("FavoredVermin"),
    },
  },
  SourcePage="p.64",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredVermin",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Bluff, Knowledge, Perception, Sense Motive, and Survival checks against vermin.",
      Arguments={
        "FavoredVermin",
      },
    },
    {
      Name="CombatBonus",
      FormatString="You gain a +%1 bonus on Attack rolls and Damage rolls against vermin.",
      Arguments={
        "FavoredVermin",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredBaseBonus"),
      Variables={
        "FavoredVermin",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemy",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Aberration",
  Key="Favored Enemy Bonus ~ Aberration",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredAberration",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Aberration" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Animal",
  Key="Favored Enemy Bonus ~ Animal",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredAnimal",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Animal" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Construct",
  Key="Favored Enemy Bonus ~ Construct",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredConstruct",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Construct" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Dragon",
  Key="Favored Enemy Bonus ~ Dragon",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredDragon",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Dragon" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Fey",
  Key="Favored Enemy Bonus ~ Fey",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredFey",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Fey" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Aquatic)",
  Key="Favored Enemy Bonus ~ Humanoid (Aquatic)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidAquatic",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Aquatic)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Dwarf)",
  Key="Favored Enemy Bonus ~ Humanoid (Dwarf)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidDwarf",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Dwarf)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Elf)",
  Key="Favored Enemy Bonus ~ Humanoid (Elf)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidElf",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Elf)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Giant)",
  Key="Favored Enemy Bonus ~ Humanoid (Giant)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidGiant",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Giant)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Gnoll)",
  Key="Favored Enemy Bonus ~ Humanoid (Gnoll)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidGnoll",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Gnoll)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Gnome)",
  Key="Favored Enemy Bonus ~ Humanoid (Gnome)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidGnome",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Gnome)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Goblinoid)",
  Key="Favored Enemy Bonus ~ Humanoid (Goblinoid)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidGoblinoid",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Goblinoid)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Halfling)",
  Key="Favored Enemy Bonus ~ Humanoid (Halfling)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidHalfling",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Halfling)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Human)",
  Key="Favored Enemy Bonus ~ Humanoid (Human)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidHuman",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Human)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Orc)",
  Key="Favored Enemy Bonus ~ Humanoid (Orc)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidOrc",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Orc)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Humanoid (Reptilian)",
  Key="Favored Enemy Bonus ~ Humanoid (Reptilian)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredHumanoidReptilian",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Humanoid (Reptilian)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Magical Beast",
  Key="Favored Enemy Bonus ~ Magical Beast",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredMagicalBeast",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Magical Beast" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Monstrous Humanoid",
  Key="Favored Enemy Bonus ~ Monstrous Humanoid",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredMonstrousHumanoid",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Monstrous Humanoid" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Ooze",
  Key="Favored Enemy Bonus ~ Ooze",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOoze",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Ooze" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Air)",
  Key="Favored Enemy Bonus ~ Outsider (Air)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderAir",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Air)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Earth)",
  Key="Favored Enemy Bonus ~ Outsider (Earth)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderEarth",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Earth)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Fire)",
  Key="Favored Enemy Bonus ~ Outsider (Fire)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderFire",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Fire)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Water)",
  Key="Favored Enemy Bonus ~ Outsider (Water)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderWater",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Water)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Lawful)",
  Key="Favored Enemy Bonus ~ Outsider (Lawful)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderLawful",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Lawful)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Chaotic)",
  Key="Favored Enemy Bonus ~ Outsider (Chaotic)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderChaotic",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Chaotic)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Good)",
  Key="Favored Enemy Bonus ~ Outsider (Good)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderGood",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Good)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Evil)",
  Key="Favored Enemy Bonus ~ Outsider (Evil)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderEvil",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Evil)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Outsider (Native)",
  Key="Favored Enemy Bonus ~ Outsider (Native)",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredOutsiderNative",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Outsider (Native)" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Plant",
  Key="Favored Enemy Bonus ~ Plant",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredPlant",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Plant" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Undead",
  Key="Favored Enemy Bonus ~ Undead",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredUndead",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Undead" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Vermin",
  Key="Favored Enemy Bonus ~ Vermin",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredVermin",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Enemy ~ Vermin" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredEnemyBonus",
  },
})
DefineAbility({
  Name="Basic Favored Terrain",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainBaseBonus",
      },
    },
  },
  Types={
    "Special",
    "RangerClassFeatures",
  },
})
DefineAbility({
  Name="Favored Terrain (Cold)",
  Key="Favored Terrain ~ Cold",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in cold terrain (ice, glaciers, snow, and tundra). Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainCold"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainCold",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in cold terrain",
      Arguments={
        "FavoredTerrainCold",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainCold",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Desert)",
  Key="Favored Terrain ~ Desert",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in desert terrain (sand and wastelands). Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainDesert"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainDesert",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in desert terrain",
      Arguments={
        "FavoredTerrainDesert",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainDesert",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Forest)",
  Key="Favored Terrain ~ Forest",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in forest terrain (coniferous and deciduous). Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainForest"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainForest",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in forest terrain",
      Arguments={
        "FavoredTerrainForest",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainForest",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Jungle)",
  Key="Favored Terrain ~ Jungle",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in jungle terrain . Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainJungle"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainJungle",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in jungle terrain",
      Arguments={
        "FavoredTerrainJungle",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainJungle",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Mountain)",
  Key="Favored Terrain ~ Mountain",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in mountain terrain (including hills). Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainMountains"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainMountains",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in mountain terrain",
      Arguments={
        "FavoredTerrainMountains",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainMountains",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Plains)",
  Key="Favored Terrain ~ Plains",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in plains terrain. Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainPlains"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainPlains",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in plains terrain",
      Arguments={
        "FavoredTerrainPlains",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainPlains",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Plane)",
  Key="Favored Terrain ~ Plane",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills on your chosen plane. Likewise, you get a +%1 bonus on initiative checks when on that plane. If you desire, you leave no trail on that plane and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainPlanes"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainPlanes",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked on your chosen plane",
      Arguments={
        "FavoredTerrainPlanes",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainPlanes",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Swamp)",
  Key="Favored Terrain ~ Swamp",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in swamp terrain. Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainSwamp"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainSwamp",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in swamp terrain",
      Arguments={
        "FavoredTerrainSwamp",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainSwamp",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Underground)",
  Key="Favored Terrain ~ Underground",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in underground terrain (caves and dungeons). Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainUnderground"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainUnderground",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in underground terrain",
      Arguments={
        "FavoredTerrainUnderground",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainUnderground",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Urban)",
  Key="Favored Terrain ~ Urban",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills in urban terrain (buildings, streets, and sewers). Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainUrban"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainUrban",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked in urban terrain",
      Arguments={
        "FavoredTerrainUrban",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainUrban",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain (Water)",
  Key="Favored Terrain ~ Water",
  Category="Special Ability",
  AllowMultiple=false,
  Description={
    Format="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks when using these skills above or below the water surface. Likewise, you get a +%1 bonus on initiative checks when in this terrain. If you desire, you leave no trail in this terrain and cannot be tracked.",
    Arguments={
      Formula("FavoredTerrainWater"),
    },
  },
  SourcePage="p.65",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "FavoredTerrainWater",
      },
    },
    {
      Name="SkillBonus",
      FormatString="You gain a +%1 bonus on Knowledge (Geography), Perception, Stealth, and Survival checks, Initiative checks and cannot be tracked above or below the water surface",
      Arguments={
        "FavoredTerrainWater",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("FavoredTerrainBaseBonus"),
      Variables={
        "FavoredTerrainWater",
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "FavoredTerrain",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Cold)",
  Key="Favored Terrain Bonus ~ Cold",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainCold",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Cold" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Desert)",
  Key="Favored Terrain Bonus ~ Desert",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainDesert",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Desert" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Forest)",
  Key="Favored Terrain Bonus ~ Forest",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainForest",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Forest" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Jungle)",
  Key="Favored Terrain Bonus ~ Jungle",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainJungle",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Jungle" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Mountain)",
  Key="Favored Terrain Bonus ~ Mountain",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainMountains",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Mountain" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Plains)",
  Key="Favored Terrain Bonus ~ Plains",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainPlains",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Plains" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Plane)",
  Key="Favored Terrain Bonus ~ Plane",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainPlanes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Plane" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Swamp)",
  Key="Favored Terrain Bonus ~ Swamp",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainSwamp",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Swamp" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Underground)",
  Key="Favored Terrain Bonus ~ Underground",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainUnderground",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Underground" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Urban)",
  Key="Favored Terrain Bonus ~ Urban",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainUrban",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Urban" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Favored Terrain Bonus (Water)",
  Key="Favored Terrain Bonus ~ Water",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "FavoredTerrainWater",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Favored Terrain ~ Water" then return true end
        return false
      end)
    end,
  },
  Types={
    "RangerClassFeatures",
    "FavoredTerrainBonus",
  },
})
DefineAbility({
  Name="Sneak Attack",
  Key="Rogue ~ Sneak Attack",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sneak Attack",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Variables={
        "RogueSneakAttackLVL",
      },
    },
  },
  Types={
    "Internal",
    "RogueClassFeatures",
    "AlchemistClassFeatures",
    "Sneak Attack",
  },
})
DefineAbility({
  Name="Rogue Talents",
  Key="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("RogueTalentLVL/2"),
      Variables={
        "Rogue Talent",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Variables={
        "RogueTalentLVL",
      },
    },
  },
  Types={
    "Internal",
    "RogueClassFeatures",
  },
})
DefineAbility({
  Name="Trapfinding",
  Key="Rogue ~ Trapfinding",
  Category="Special Ability",
  Description={
    Format="You add +%1 to Perception skill checks made to locate traps and to Disable Device skill checks. You can use the Disable Device skill to disarm magical traps.",
    Arguments={
      Formula("TrapfindingBonus"),
    },
  },
  SourcePage="p.68",
  Bonuses={
    {
      Category="SITUATION",
      Formula=Formula("TrapfindingBonus"),
      Type={
        Name="Trapfinding",
      },
      Variables={
        "Perception=Trapfinding",
      },
    },
    {
      Category="SKILL",
      Formula=Formula("TrapfindingBonus"),
      Type={
        Name="Trapfinding",
      },
      Variables={
        "Disable Device",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(TrapfindingLVL/2,1)"),
      Type={
        Name="Trapfinding",
      },
      Variables={
        "TrapfindingBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Variables={
        "TrapfindingLVL",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "RangerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Trapfinding",
  },
})
DefineAbility({
  Name="Trap Sense",
  Key="Rogue ~ Trap Sense",
  Category="Special Ability",
  Visible=true,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Trap Sense",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueTrapSenseLVL/3"),
      Variables={
        "TrapSenseBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Variables={
        "RogueTrapSenseLVL",
      },
    },
  },
  Types={
    "Internal",
    "RogueClassFeatures",
  },
})
DefineAbility({
  Name="Master Strike",
  Key="Rogue ~ Master Strike",
  Category="Special Ability",
  Description={
    Format="You are incredibly deadly when dealing sneak attack damage. Each time you deal sneak attack damage, you can choose one of the following three effects: the target can be put to sleep for 1d4 hours, paralyzed for 2d6 rounds, or slain. Regardless of the effect chosen, the target receives a Fortitude save to negate the additional effect. The DC of this save is %1. Once a creature has been the target of a master strike, regardless of whether or not the save is made, that creature is immune to your master strike for 24 hours. Creatures that are immune to sneak attack damage are also immune to this ability.",
    Arguments={
      Formula("MasterStrikeDC"),
    },
  },
  SourcePage="p.70",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(MasterStrikeLVL/2)+INT"),
      Variables={
        "MasterStrikeDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Variables={
        "MasterStrikeLVL",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Evasion",
  Key="Rogue ~ Evasion",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evasion",
      },
    },
  },
  Types={
    "RogueClassFeatures",
  },
})
DefineAbility({
  Name="Uncanny Dodge",
  Key="Rogue ~ Uncanny Dodge",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Type={
        Name="EachClass",
        Replace=true,
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "Uncanny Dodge",
  },
})
DefineAbility({
  Name="Improved Uncanny Dodge",
  Key="Rogue ~ Improved Uncanny Dodge",
  Category="Special Ability",
  Types={
    "RogueClassFeatures",
    "Uncanny Dodge",
    "Improved Uncanny Dodge",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Rogue Archetype Support",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueArchetype") then return true end
            return false
          end)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("count(\"ABILITIES\",\"CATEGORY=Special Ability\",\"TYPE=RogueTalent\")+count(\"ABILITIES\",\"CATEGORY=Special Ability\",\"TYPE=NinjaTrick\")"),
      Variables={
        "RogueTalentTaken",
      },
    },
  },
})
DefineAbility({
  Name="Rogue Archetype Support",
  Category="Internal",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Rogue ~ Sneak Attack",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueSneakAttack") then return true end
            return false
          end)
        end,
        function (character, item, sources)
          return (character.Variables["RogueLvl"] >= 3)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Uncanny Dodge ~ Base",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueUncannyDodge", "RogueImprovedUncannyDodge") then return true end
            return false
          end)
        end,
        function (character, item, sources)
          return (character.Variables["RogueLvl"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueLvl"] >= 3)
        end,
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueSneakAttack") then return true end
            return false
          end)
        end,
      },
      Variables={
        "RogueSneakAttackLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-4"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueLvl"] >= 8)
        end,
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueUncannyDodge", "RogueImprovedUncannyDodge") then return true end
            return false
          end)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
  },
})
DefineAbility({
  Name="Rogue ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Types={
    "RogueClassFeatures",
  },
})
ModifyAbility({
  Name="Rogue ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueLVL"),
      Type={
        Name="EachClass",
        Replace=true,
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_UncannyDodge"] == 0)
        end,
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueLVL"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_UncannyDodge"] == 0)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Uncanny Dodge Tracker",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueLVL"] >= 8)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_ImprovedUncannyDodge"] == 0)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 2)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent2"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 4)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent4"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 6)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent6"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 8)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent8"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent10"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 12)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent12"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 14)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent14"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 16)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent16"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 18)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent18"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["RogueTalentLVL"] >= 20)
        end,
        function (character, item, sources)
          return (character.Variables["Rogue_CF_RogueTalent20"] == 1)
        end,
      },
      Variables={
        "Rogue Talent",
      },
    },
  },
})
ModifyAbility({
  Name="Rogue ~ Rogue Talents",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "CombatTrickAllowed",
      },
    },
  },
})
DefineAbility({
  Name="Bleeding Attack",
  Key="Rogue Talent ~ Bleeding Attack",
  Category="Special Ability",
  Description={
    Format="You can cause living opponents to bleed when hitting them with a sneak attack. This attack causes the target to take %1 additional points of damage each round. Bleeding creatures that amount of damage every round at the start of their turns. The bleeding can be stopped by a DC 15 Heal check or the application of any effect that heals hit point damage. Bleeding damage from this ability does not stack with itself. Bleeding damage bypasses any damage reduction the creature might possess.",
    Arguments={
      Formula("SneakAttackDice"),
    },
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "RogueTalent",
    "AttackOption",
  },
})
DefineAbility({
  Name="Combat Trick",
  Key="Rogue Talent ~ Combat Trick",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Description={
    Format="You gain a bonus combat feat.",
  },
  SourcePage="p.68",
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Combat Trick Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "CombatTrickTaken",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["CombatTrickTaken"] < "CombatTrickAllowed")
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Fast Stealth",
  Key="Rogue Talent ~ Fast Stealth",
  Category="Special Ability",
  Description={
    Format="This ability allows you to move at full speed using Stealth without penalty.",
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Finesse Rogue",
  Key="Rogue Talent ~ Finesse Rogue",
  Category="Special Ability",
  Description={
    Format="You gain Weapon Finesse as a bonus feat.",
  },
  SourcePage="p.68",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Weapon Finesse",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Ledge Walker",
  Key="Rogue Talent ~ Ledge Walker",
  Category="Special Ability",
  Description={
    Format="This ability allows you to move along narrow surfaces at full speed using the Acrobatics skill without penalty. In addition, you are not flat-footed when using Acrobatics to move along narrow surfaces.",
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Major Magic",
  Key="Rogue Talent ~ Major Magic",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSpell(function (character, spell)
      return ((spell.IsInClassList("Wizard") and (((spell.Level <= 1) and (spell.Level >= 1)))))
    end),
    MaxTimes=1,
  },
  Description={
    Format="You can cast %1 two times a day as a spell-like ability. The caster level for this ability is %2. The save DC for this spell is %3.",
    Arguments={
      Formula("%CHOICE"),
      Formula("RogueCasterLevel"),
      Formula("11+INT"),
    },
  },
  SourcePage="p.68",
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Rogue Talent ~ Minor Magic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Stats["INT"] >= 11)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Minor Magic",
  Key="Rogue Talent ~ Minor Magic",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSpell(function (character, spell)
      return ((spell.IsInClassList("Wizard") and (((spell.Level <= 0) and (spell.Level >= 0)))))
    end),
    MaxTimes=1,
  },
  Description={
    Format="You can cast %1. This spell can be cast three times a day as a spell-like ability. The caster level for this ability is %2. The save DC for this spell is %3.",
    Arguments={
      Formula("%CHOICE"),
      Formula("RogueCasterLevel"),
      Formula("10+INT"),
    },
  },
  SourcePage="p.68",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueTalentLVL"),
      Variables={
        "RogueCasterLevel",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Stats["INT"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Quick Disable",
  Key="Rogue Talent ~ Quick Disable",
  Category="Special Ability",
  Description={
    Format="It takes you half the normal amount of time to disable a trap using the Disable Device skill(minimum 1 round).",
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Resiliency",
  Key="Rogue Talent ~ Resiliency",
  Category="Special Ability",
  Description={
    Format="Once per day, you can gain %1 temporary hit points. Activating this ability is an immediate action that can only be performed when you are brought to below 0 hit points. This ability can be used to prevent yourself from dying. These temporary hit points last for 1 minute. If your hit points drop below 0 due to the loss of these temporary hit points, you fall unconscious and are dying as normal.",
    Arguments={
      Formula("ResiliencyHitPoints"),
    },
  },
  SourcePage="p.68",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 hp)",
      Arguments={
        "ResiliencyHitPoints",
      },
    },
    {
      Name="CheckCount",
      FormatString="1",
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueTalentLVL"),
      Variables={
        "ResiliencyHitPoints",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
    "Defensive",
  },
})
DefineAbility({
  Name="Rogue Crawl",
  Key="Rogue Talent ~ Rogue Crawl",
  Category="Special Ability",
  Description={
    Format="While prone, you can move at half speed. This movement provokes attacks of opportunity as normal. You cannot take a 5-foot steps while crawling.",
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Slow Reactions",
  Key="Rogue Talent ~ Slow Reactions",
  Category="Special Ability",
  Description={
    Format="Opponents damaged by your sneak attack can't make attacks of opportunity for 1 round.",
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Stand Up",
  Key="Rogue Talent ~ Stand Up",
  Category="Special Ability",
  Description={
    Format="You can stand up from a prone position as a free action. This still provokes attacks of opportunity for standing up while threatened by a foe.",
  },
  SourcePage="p.68",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Surprise Attack",
  Key="Rogue Talent ~ Surprise Attack",
  Category="Special Ability",
  Description={
    Format="During the surprise round, opponents are always considered flat-footed to you, even if they have acted.",
  },
  SourcePage="p.69",
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Trap Spotter",
  Key="Rogue Talent ~ Trap Spotter",
  Category="Special Ability",
  Description={
    Format="Whenever you come within %1 feet of a trap, you receive an immediate Perception skill check to notice the trap. This check should be made in secret by the GM.",
    Arguments={
      Formula("TrapSpotterDistance"),
    },
  },
  SourcePage="p.69",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Variables={
        "TrapSpotterDistance",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Weapon Training",
  Key="Rogue Talent ~ Weapon Training",
  Category="Special Ability",
  Description={
    Format="You gain Weapon Focus as a bonus feat.",
  },
  SourcePage="p.69",
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Weapon Training",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
  },
})
DefineAbility({
  Name="Advanced Talent",
  Key="Rogue Talent ~ Advanced Talent",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Description={
    Format="Select an Advanced Rogue Talent.",
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Advanced Talent",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
    function (character, item, sources)
      return (character.Variables["RogueTalentTaken"] >= 4)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueTalent",
    "IncreaseRogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Crippling Strike",
  Key="Rogue Talent ~ Crippling Strike",
  Category="Special Ability",
  Description={
    Format="You can sneak attack opponents with such precision that your blows weaken and hamper them. An opponent damaged by one of your sneak attacks also takes 2 points of Strength damage.",
  },
  SourcePage="p.69",
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "RogueAdvancedTalent",
    "AttackOption",
  },
})
DefineAbility({
  Name="Defensive Roll",
  Key="Rogue Talent ~ Defensive Roll",
  Category="Special Ability",
  Description={
    Format="You can roll with a potentially lethal blow to take less damage from it than you otherwise would. Once per day, when you would be reduced to 0 or fewer hit points by damage in combat (from a weapon or other blow, not a spell or special ability), you can attempt to roll with the damage. To use this ability, you must attempt a Reflex saving throw (DC = damage dealt). If the save succeeds, you take only half damage from the blow; if it fails, you take full damage. You must be aware of the attack and able to react to it in order to execute your defensive roll - if you are denied your Dexterity bonus to AC, you can't use this ability. Since this effect would not normally allow a character to make a Reflex save for half damage, your evasion ability does not apply to the defensive roll.",
  },
  SourcePage="p.69",
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Dispelling Attack",
  Key="Rogue Talent ~ Dispelling Attack",
  Category="Special Ability",
  Description={
    Format="Opponents that are dealt sneak attack damage by you are affected by a targeted Dispel Magic, targeting the lowest-level spell effect active on the target. The caster level for this ability is %1.",
    Arguments={
      Formula("DispellingAttackCasterLevel"),
    },
  },
  SourcePage="p.70",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("RogueTalentLVL"),
      Variables={
        "DispellingAttackCasterLevel",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Rogue Talent ~ Major Magic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Improved Evasion",
  Key="Rogue Talent ~ Improved Evasion",
  Category="Special Ability",
  Description={
    Format="This works like Evasion, except that while you still take no damage on a successful Reflex saving throw against attacks, you henceforth take only half damage on a failed save. If you are helpless, you do not gain the benefit of Improved Evasion.",
  },
  SourcePage="p.70",
  Visible=true,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Improved Evasion",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Opportunist",
  Key="Rogue Talent ~ Opportunist",
  Category="Special Ability",
  Description={
    Format="Once per round, you can make an attack of opportunity against an opponent who has just been struck for damage in melee by another character. This attack counts as an attack of opportunity for that round. Even if you have the Combat Reflexes feat, you can't use the Opportunist ability more than once per round.",
  },
  SourcePage="p.70",
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Skill Mastery",
  Key="Rogue Talent ~ Skill Mastery",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSkill(function (character, skill)
      return ((true))
    end),
  },
  Description={
    Format="You become so confident in the use of certain skills that you can use them reliably even under adverse conditions. When making a skill check with one of these skills, you may take 10 even if stree and distraction would normally prevent you from doing so.",
  },
  Selections=Formula("3+INT"),
  SourcePage="p.70",
  Stackable=false,
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Slippery Mind",
  Key="Rogue Talent ~ Slippery Mind",
  Category="Special Ability",
  Description={
    Format=" You get %1 extra chances to succeed on your saving throw.",
    Arguments={
      Formula("SlipperymindTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["SlipperymindTimes"] >= 1)
      end,
    },
  },
  SourcePage="p.70",
  Visible=true,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Slippery Mind",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SlipperymindTimes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueClassFeatures",
    "Extraordinary",
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Feat",
  Key="Rogue Talent ~ Feat",
  Category="Special Ability",
  Description={
    Format="You may gain any feat that you qualify for in place of a rogue talent.",
  },
  SourcePage="p.70",
  Visible=true,
  Bonuses={
    {
      Category="FEAT",
      Formula=Formula("1"),
      Variables={
        "POOL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["RogueTalentLVL"] >= 10)
    end,
  },
  Types={
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Regular Talent",
  Key="Rogue Talent ~ Regular Talent",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Description={
    Format="Select a regular Rogue Talent.",
  },
  Stackable=true,
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Rogue Talent",
      },
    },
  },
  Types={
    "RogueAdvancedTalent",
  },
})
DefineAbility({
  Name="Class Skills",
  Key="Sorcerer ~ Class Skills",
  Category="Internal",
  SourcePage="p.70",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Appraise",
        "Bluff",
        "Craft",
        "Fly",
        "Intimidate",
        "Knowledge (Arcana)",
        "Profession",
        "Spellcraft",
        "Use Magic Device",
      },
    },
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Sorcerer ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Sorcerers are proficient with all simple weapons. They are not proficient with any type of armor or shield. Armor interferes with a sorcerer's gestures, which can cause her spells with somatic components to fail.",
  },
  SourcePage="p.70",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
        "Weapon Prof ~ Simple",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Spells",
  Key="Sorcerer ~ Spells",
  Category="Special Ability",
  Description={
    Format="A sorcerer casts arcane spells drawn primarily from the sorcerer/wizard spell list. She can cast any spell she knows without preparing it ahead of time. To learn or cast a spell, a sorcerer must have a Charisma score equal to at least 10 + the spell level. The Difficulty Class for a saving throw against a sorcerer's spell is %1 + the spell level.",
    Arguments={
      Formula("Sorcerer_Spells_SpellDCBonus"),
    },
  },
  SourcePage="p.70",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+CHA"),
      Variables={
        "Sorcerer_Spells_SpellDCBonus",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Bloodline",
  Key="Sorcerer ~ Standard Bloodline",
  Category="Special Ability",
  Description={
    Format="Each sorcerer has a source of magic somewhere in her heritage that grants her spells, bonus feats, an additional class skill, and other special abilities. This source can represent a blood relation or an extreme event involving a creature somewhere in the family's past. For example, a sorcerer might have a dragon as a distant relative or her grandfather might have signed a terrible contract with a devil. Regardless of the source, this influence manifests in a number of ways as the sorcerer gains levels. A sorcerer must pick one bloodline upon taking her first level of sorcerer. Once made, this choice cannot be changed.",
  },
  SourcePage="p.71",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bloodline Tracker",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Bloodline",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "HasSorcererBloodline",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Bloodline",
  },
})
DefineAbility({
  Name="Cantrips",
  Key="Sorcerer ~ Cantrips",
  Category="Special Ability",
  Description={
    Format="Sorcerers learn a number of cantrips, or 0-level spells. These spells are cast like any other spell, but they do not consume any slots and may be used again.",
  },
  SourcePage="p.71",
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Eschew Materials",
  Key="Sorcerer ~ Eschew Materials",
  Category="Special Ability",
  Description={
    Format="A sorcerer gains Eschew Materials as a bonus feat at 1st level.",
  },
  SourcePage="p.71",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Eschew Materials",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("SorcererLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "BloodlineLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("SorcererLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "BloodlineCasterLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("SorcererLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "BloodlineProgressionLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+CHA"),
      Type={
        Name="Base",
      },
      Variables={
        "BloodlinePowerTimes",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "BloodlineFeatProgression",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(BloodlineFeatProgression-1)/6"),
      Type={
        Name="Base",
      },
      Variables={
        "BloodlineFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BloodlineFeatProgression"] >= 7)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineFeat7"] == 1)
        end,
      },
      Variables={
        "BloodlineFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BloodlineFeatProgression"] >= 13)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineFeat13"] == 1)
        end,
      },
      Variables={
        "BloodlineFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["BloodlineFeatProgression"] >= 19)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineFeat19"] == 1)
        end,
      },
      Variables={
        "BloodlineFeatCount",
      },
    },
  },
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Bloodline Tracker",
  Category="Internal",
})
DefineAbility({
  Name="Acrobatic Steps",
  Key="Sorcerer Bloodline Feat ~ Acrobatic Steps",
  Category="Internal",
  Description={
    Format="You can easily move over and through obstacles.",
  },
  SourcePage="p.113",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Acrobatic Steps",
      },
    },
  },
  Benefits={
    {
      FormatString="Whenever you move, you may move through up to 15 feet of difficult terrain each round as if it were normal terrain. The effects of this feat stack with those provided by Nimble Moves (allowing you to move normally through a total of 20 feet of difficult terrain each round).",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Nimble Moves" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 15) or (character.Variables["FeatDexRequirement"] >= 15)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_AcrobaticSteps"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Agile Maneuvers",
  Key="Sorcerer Bloodline Feat ~ Agile Maneuvers",
  Category="Internal",
  Description={
    Format="You learned to use your quickness in place of brute force when performing combat maneuvers.",
  },
  SourcePage="p.117",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Agile Maneuvers",
      },
    },
  },
  Benefits={
    {
      FormatString="You add your Dexterity bonus to your base attack bonus and size bonus when determining your Combat Maneuver Bonus instead of your Strength bonus.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_AgileManeuvers"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Alertness",
  Key="Sorcerer Bloodline Feat ~ Alertness",
  Category="Internal",
  Description={
    Format="You often notice things that others might miss.",
  },
  SourcePage="p.117",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Alertness",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on Perception and Sense Motive skill checks. If you have 10 or more ranks in one of these skills, the bonus increases to +4 for that skill.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Alertness"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Arcane Armor Mastery",
  Key="Sorcerer Bloodline Feat ~ Arcane Armor Mastery",
  Category="Internal",
  Description={
    Format="You have mastered the ability to cast spells while wearing armor.",
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Arcane Armor Mastery",
      },
    },
  },
  Benefits={
    {
      FormatString="As a swift action, reduce the arcane spell failure chance due to the armor you are wearing by 20%% for any spells you cast this round. This bonus replaces, and does not stack with, the bonus granted by Arcane Armor Training.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Arcane Armor Training" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(7))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 7)
    end,
    function (character, item, sources)
      return (character.IsProficientWithArmorType("Medium")) or character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Armor Proficiency (Medium)" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ArcaneArmorMastery"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Arcane Armor Training",
  Key="Sorcerer Bloodline Feat ~ Arcane Armor Training",
  Category="Internal",
  Description={
    Format="You have learned how to cast spells while wearing armor.",
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Arcane Armor Training",
      },
    },
  },
  Benefits={
    {
      FormatString="As a swift action, reduce the arcane spell failure chance due to the armor you are wearing by 10%% for any spells you cast this round.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(3))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 3)
    end,
    function (character, item, sources)
      return (character.IsProficientWithArmorType("Light")) or character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Armor Proficiency (Light)" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ArcaneArmorTraining"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Arcane Strike",
  Key="Sorcerer Bloodline Feat ~ Arcane Strike",
  Category="Internal",
  Description={
    Format="As a swift action, you can imbue your weapons with a fraction of your power. For 1 round, you gain a +%1 damage bonus and your weapons are treated as magic for the purpose of overcoming damage reduction.",
    Arguments={
      Formula("ArcaneStrikeDamageBonus"),
    },
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Arcane Strike",
      },
    },
  },
  Benefits={
    {
      FormatString="As a swift action, you can imbue your weapons with a fraction of your power. For 1 round, your weapons deal +1 damage and are treated as magic for the purpose of overcoming damage reduction. For every five caster levels you possess, this bonus increases by +1, to a maximum of +5 at 20th level.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountArcaneSpellCastingClasses(1))) >= 1 or (character.Variables["Caster_Level_Highest__Arcane"] >= 1) or character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.IsAnyType("SpellLike") then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ArcaneStrike"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Armor Proficiency (Light)",
  Key="Sorcerer Bloodline Feat ~ Armor Proficiency (Light)",
  Category="Internal",
  Description={
    Format="You are skilled at wearing light armor.",
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Armor Proficiency (Light)",
      },
    },
  },
  Benefits={
    {
      FormatString="When you wear a type of armor with which you are proficient, the armor check penalty for that armor applies only to Dexterity- and Strength-based skill checks.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_LightArmorProficiency"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Augment Summoning",
  Key="Sorcerer Bloodline Feat ~ Augment Summoning",
  Category="Internal",
  Description={
    Format="Your summoned creatures are more powerful and robust than most.",
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Augment Summoning",
      },
    },
  },
  Benefits={
    {
      FormatString="Each creature you conjure with any summon spell gains a +4 enhancement bonus to Strength and Constitution for the duration of the spell that summoned it.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Spell Focus (Conjuration)" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_AugmentSummoning"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Blind-Fight",
  Key="Sorcerer Bloodline Feat ~ Blind-Fight",
  Category="Internal",
  Description={
    Format="You are skillled at attacking opponents that you cannot clearly perceive.",
  },
  SourcePage="p.118",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Blind-Fight",
      },
    },
  },
  Benefits={
    {
      FormatString="In melee, every time you miss because of concealment (see Chapter 8), you can reroll your miss chance percentile roll one time to see if you actually hit. An invisible attacker gets no advantages related to hitting you in melee. That is, you don't lose your Dexterity bonus to Armor Class, and the attacker doesn't get the usual +2 bonus for being invisible. The invisible attacker's bonuses do still apply for ranged attacks, however. You do not need to make Acrobatics skill checks to move at full speed while blinded.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_BlindFight"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Cleave",
  Key="Sorcerer Bloodline Feat ~ Cleave",
  Category="Internal",
  Description={
    Format="You can strike two adjacent foes with a single swing.",
  },
  SourcePage="p.119",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Cleave",
      },
    },
  },
  Benefits={
    {
      FormatString="As a standard action, you can make a single attack at your full base attack bonus against a foe within reach. If you hit, you deal damage normally and can make an additional attack (using your full base attack bonus) against a foe that is adjacent to the first and also within reach. You can only make one additional attack per round with this feat. When you use this feat, you take a -2 penalty to your Armor Class until your next turn.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Power Attack" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Cleave"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_STR"] >= 13)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Combat Casting",
  Key="Sorcerer Bloodline Feat ~ Combat Casting",
  Category="Internal",
  Description={
    Format="You are adept at spellcasting when threatened or distracted.",
  },
  SourcePage="p.119",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Combat Casting",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +4 bonus on concentration checks made to cast a spell or use a spell-like ability when casting on the defensive or while grappled.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_CombatCasting"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Combat Expertise",
  Key="Sorcerer Bloodline Feat ~ Combat Expertise",
  Category="Internal",
  Description={
    Format="You can increase your defense at the expense of your accuracy.",
  },
  SourcePage="p.119",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Combat Expertise",
      },
    },
  },
  Benefits={
    {
      FormatString="You can choose to take a %1 penalty on melee attack rolls and combat maneuver checks to gain a +%2 dodge bonus to your Armor Class. You can only choose to use this feat when you declare that you are making an attack or a full-attack action with a melee weapon. The effects of this feat last until your next turn.",
      Arguments={
        "CombatExpertiseModifierAttack",
        "CombatExpertiseModifierAC",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["PreStatScore_INT"] >= 13) or (character.Variables["CombatFeatIntRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_CombatExpertise"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Combat Reflexes",
  Key="Sorcerer Bloodline Feat ~ Combat Reflexes",
  Category="Internal",
  Description={
    Format="You can make additional attacks of opportunity.",
  },
  SourcePage="p.119",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Combat Reflexes",
      },
    },
  },
  Benefits={
    {
      FormatString="You may make %1 additional attacks of opportunity per round. With this feat, you may also make attacks of opportunity while flat-footed.",
      Arguments={
        "CombatReflexesAttacks",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_CombatReflexes"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Craft Rod",
  Key="Sorcerer Bloodline Feat ~ Craft Rod",
  Category="Internal",
  Description={
    Format="You can create magic rods.",
  },
  SourcePage="p.120",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Craft Rod",
      },
    },
  },
  Benefits={
    {
      FormatString="You can create magic rods. Crafting a rod takes 1 day for each 1,000 gp in its base price. To craft a rod, you must use up raw materials costing half of its base price. See the magic item creation rules for more information.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(9))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 9)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_CraftRod"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Craft Staff",
  Key="Sorcerer Bloodline Feat ~ Craft Staff",
  Category="Internal",
  Description={
    Format="You can create magic staves.",
  },
  SourcePage="p.120",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Craft Staff",
      },
    },
  },
  Benefits={
    {
      FormatString="You can create any staff whose prerequisites you meet. Crafting a staff takes 1 day for each 1,000 gp in its base price. To craft a staff, you must use up raw materials costing half of its base price. A newly created staff has 10 charges. See the magic item creation rules for more information.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(11))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 11)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_CraftStaff"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Craft Wondrous Item",
  Key="Sorcerer Bloodline Feat ~ Craft Wondrous Item",
  Category="Internal",
  Description={
    Format="You can create wondrous items, a type of magic item.",
  },
  SourcePage="p.120",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Craft Wondrous Item",
      },
    },
  },
  Benefits={
    {
      FormatString="You can create a wide variety of magic wondrous items. Crafting a wondrous item takes 1 day for each 1,000 gp in its price. To create a wondrous item, you must use up raw materials costing half of its base price. See the magic item creation rules in Chapter 15 for more information. You can also mend a broken wondrous item if it is one that you could make. Doing so costs half the raw materials and half the time it would take to craft that item.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(3))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 3) or (character.Variables["MasterCraftsmanRanks"] >= 3)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_CraftWondrousItem"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Deadly Aim",
  Key="Sorcerer Bloodline Feat ~ Deadly Aim",
  Category="Internal",
  Description={
    Format="You can make exceptionally deadly ranged attacks by pinpointing a foe's weak spot, at the expense of making the attack less likely to succeed.",
  },
  SourcePage="p.121",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Deadly Aim",
      },
    },
  },
  Benefits={
    {
      FormatString="You can choose to take a -%1 penalty on all ranged attack rolls to gain a +%2 bonus on all ranged damage rolls. You must choose to use this feat before making an attack roll and its effects last until your next turn. The bonus damage does not apply to touch attacks or effects that do not deal hit point damage.",
      Arguments={
        "DeadlyAimModifier",
        "2*DeadlyAimModifier",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 13) or (character.Variables["FeatDexRequirement"] >= 13)
    end,
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_DeadlyAim"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Deceitful",
  Key="Sorcerer Bloodline Feat ~ Deceitful",
  Category="Internal",
  Description={
    Format="You are skilled at deceiving others, both with the spoken word ans with physical disguises.",
  },
  SourcePage="p.121",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Deceitful",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on all Bluff and Disguise skill checks. If you have 10 or more ranks in one of these skills, the bonus increases to +4 for that skill.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Deceitful"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Defensive Combat Training",
  Key="Sorcerer Bloodline Feat ~ Defensive Combat Training",
  Category="Internal",
  Description={
    Format="You excel at defending yourself from all manner of combat maneuvers.",
  },
  SourcePage="p.121",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Defensive Combat Training",
      },
    },
  },
  Benefits={
    {
      FormatString="You treat your total Hit Dice as your base attack bonus when calculating your Combat Maneuver Defense.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_DefensiveCombatTraining"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Deft Hands",
  Key="Sorcerer Bloodline Feat ~ Deft Hands",
  Category="Internal",
  Description={
    Format="You have exceptional manual dexterity.",
  },
  SourcePage="p.121",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Deft Hands",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on Disable Device and Sleight of Hand skill checks. If you have 10 or more ranks in one of these skills, the bonus increases to +4 for that skill.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_DeftHands"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Diehard",
  Key="Sorcerer Bloodline Feat ~ Diehard",
  Category="Internal",
  Description={
    Format="You are especially hard to kill. Not only do your wounds automatically stabilize when grievously injured, but you can remain conscious and continue to act even at death's door.",
  },
  SourcePage="p.122",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Diehard",
      },
    },
  },
  Benefits={
    {
      FormatString="When your hit point total is below 0, but you are not dead, you automatically stabilize. You do not need to make a Constitution check each round to avoid losing additional hit points. You may choose to act as if you were disabled, rather than dying. You must make this decision as soon as you are reduced to negative hit points (even if it isn't your turn). If you do not choose to act as if you were disabled, you immediately fall unconscious. When using this feat, you are staggered. You can take a move action without further injuring yourself, but if you perform any standard action (or any other action deemed as strenuous, including some free actions, such as casting a quickened spell) you take 1 point of damage after completing the act. If your negative hit points are equal to or greater than your Constitution score, you immediately die.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Endurance" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Diehard"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Dodge",
  Key="Sorcerer Bloodline Feat ~ Dodge",
  Category="Internal",
  Description={
    Format="Your training and reflexes allow you to react swiftly to avoid an opponent's attack.",
  },
  SourcePage="p.122",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Dodge",
      },
    },
  },
  Benefits={
    {
      FormatString="You gain a +1 dodge bonus to your AC. A condition that makes you lose your Dex bonus to AC also makes you lose the benefits of this feat.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 13) or (character.Variables["FeatDexRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Dodge"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Empower Spell",
  Key="Sorcerer Bloodline Feat ~ Empower Spell",
  Category="Internal",
  Description={
    Format="You can increase the power of your spells, causing them to deal more damage.",
  },
  SourcePage="p.122",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Empower Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="All variable, numeric effects of an empowered spell are increased by half including bonuses to those dice rolls. Saving throws and opposed rolls are not affected, nor are spells without random variables. An empowered spell uses up a spell slot two levels higher than the spell's actual level.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_EmpowerSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Endurance",
  Key="Sorcerer Bloodline Feat ~ Endurance",
  Category="Internal",
  Description={
    Format="Harsh conditions or long exertions do not easily tire you.",
  },
  SourcePage="p.112",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Endurance",
      },
    },
  },
  Benefits={
    {
      FormatString="You gain a +%1 bonus on the following checks and saves: Swim checks made to resist nonlethal damage from exhaustion; Constitution checks made to continue running; Constitution checks made to avoid nonlethal damage from a forced march; Constitution checks made to hold your breath; Constitution checks made to avoid nonlethal damage from starvation or thirst; Fortitude saves made to avoid nonlethal damage from hot or cold environments; and Fortitude saves made to resist damage from suffocation. You may sleep in light or medium armor without becoming fatigued.",
      Arguments={
        "Feat_Endurance_SaveBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Endurance"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Enlarge Spell",
  Key="Sorcerer Bloodline Feat ~ Enlarge Spell",
  Category="Internal",
  Description={
    Format="You can increase the range of your spells.",
  },
  SourcePage="p.122",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Enlarge Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="You can alter a spell with a range of close, medium, or long to increase its range by 100%%. An enlarged spell uses up a spell slot one level higher than the spell's actual level. Spells whose ranges are not defined by distance, as well as spells whose ranges are not close, medium, or long, do not benefit from this feat.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_EnlargeSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Extend Spell",
  Key="Sorcerer Bloodline Feat ~ Extend Spell",
  Category="Internal",
  Description={
    Format="You can make your spells last twice as long.",
  },
  SourcePage="p.123",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Extend Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="An extended spell lasts twice as long as normal. A spell with a duration of concentration, instantaneous, or permanent is not affected by this feat. An extended spell uses up a spell slot one level higher than the spell's actual level.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ExtendSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Far Shot",
  Key="Sorcerer Bloodline Feat ~ Far Shot",
  Category="Internal",
  Description={
    Format="You are more accurate at longer ranges.",
  },
  SourcePage="p.124",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Far Shot",
      },
    },
  },
  Benefits={
    {
      FormatString="You only suffer a -1 penalty per full range increment between you and your target when using a ranged weapon.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Point-Blank Shot" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_FarShot"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Fleet",
  Key="Sorcerer Bloodline Feat ~ Fleet",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Description={
    Format="You are faster than most.",
  },
  SourcePage="p.124",
  Stackable=true,
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Fleet",
      },
    },
  },
  Benefits={
    {
      FormatString="While you are wearing light or no armor, your base speed increases by 5 feet. You lose the benefits of this feat if you carry a medium or heavy load.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Fleet"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Forge Ring",
  Key="Sorcerer Bloodline Feat ~ Forge Ring",
  Category="Internal",
  Description={
    Format="You can create magic rings.",
  },
  SourcePage="p.124",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Forge Ring",
      },
    },
  },
  Benefits={
    {
      FormatString="You can create magic rings. Crafting a ring takes 1 day for each 1,000 gp in its base price. To craft a ring, you must use up raw materials costing half of the base price. See the magic item creation rules in Chapter 15 for more information. You can also mend a broken ring if it is one that you could make. Doing so costs half the raw materials and half the time it would take to forge that ring in the first place.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(7))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 7)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ForgeRing"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Great Fortitude",
  Key="Sorcerer Bloodline Feat ~ Great Fortitude",
  Category="Internal",
  Description={
    Format="You are resistant to poisons, diseases, and other deadly maladies.",
  },
  SourcePage="p.124",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Great Fortitude",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on all Fortitude saving throws.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_GreatFortitude"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Greater Spell Focus (Enchantment)",
  Key="Sorcerer Bloodline Feat ~ Greater Spell Focus (Enchantment)",
  Category="Internal",
  Description={
    Format="Any spells you cast from your chosen school of magic are very hard to resist.",
  },
  SourcePage="p.125",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Greater Spell Focus (Enchantment)",
      },
    },
  },
  Benefits={
    {
      FormatString="Add +1 to the Difficulty Class for all saving throws against spells from the school of magic you select. This bonus stacks with the bonus from Spell Focus.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Spell Focus" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_GreaterSpellFocusEnchantment"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Heighten Spell",
  Key="Sorcerer Bloodline Feat ~ Heighten Spell",
  Category="Internal",
  Description={
    Format="You can cast spells as if they were a higher level.",
  },
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Heighten Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="A heightened spell has a higher spell level than normal (up to a maximum of 9th level). Unlike other metamagic feats, Heighten Spell actually increases the effective level of the spell that it modifies. All effects dependent on spell level (such as saving throw DCs and ability to penetrate a lesser globe of invulnerability) are calculated according to the heightened level. The heightened spell is as difficult to prepare and cast as a spell of its effective level.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_HeightenSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Bull Rush",
  Key="Sorcerer Bloodline Feat ~ Improved Bull Rush",
  Category="Internal",
  Description={
    Format="You are skilled at pushing your foes around.",
  },
  SourcePage="p.126",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Bull Rush",
      },
    },
  },
  Benefits={
    {
      FormatString="You do not provoke an attack of opportunity when performing a bull rush combat maneuver. In addition, you receive a +2 bonus on checks made to bull rush a foe. You also receive a +2 bonus to your Combat Maneuver Defense whenever an opponent tries to bull rush you.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Power Attack" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedBullRush"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_STR"] >= 13)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Counterspell",
  Key="Sorcerer Bloodline Feat ~ Improved Counterspell",
  Category="Internal",
  Description={
    Format="You are skilled at countering the spells of others using similar spells.",
  },
  SourcePage="p.126",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Counterspell",
      },
    },
  },
  Benefits={
    {
      FormatString="When counterspelling, you may use a spell of the same school that is one or more spell levels higher than the target spell.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedCounterspell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Disarm",
  Key="Sorcerer Bloodline Feat ~ Improved Disarm",
  Category="Internal",
  Description={
    Format="You are skilled at knocking weapons from a foe's grasp.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Disarm",
      },
    },
  },
  Benefits={
    {
      FormatString="You do not provoke an attack of opportunity when performing a disarm combat maneuver. In addition, you receive a +2 bonus on checks made to disarm a foe. You also receive a +2 bonus to your Combat Maneuver Defense whenever an opponent tries to disarm you.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Combat Expertise" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_INT"] >= 13) or (character.Variables["CombatFeatIntRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedDisarm"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Feint",
  Key="Sorcerer Bloodline Feat ~ Improved Feint",
  Category="Internal",
  Description={
    Format="You are skilled at fooling your opponents in combat.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Feint",
      },
    },
  },
  Benefits={
    {
      FormatString="You can make a Bluff check to feint in combat as a move action.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["PreStatScore_INT"] >= 13) or (character.Variables["CombatFeatIntRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedFeint"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Grapple",
  Key="Sorcerer Bloodline Feat ~ Improved Grapple",
  Category="Internal",
  Description={
    Format="You are skilled at grappling opponents.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Grapple",
      },
    },
  },
  Benefits={
    {
      FormatString="You do not provoke an attack of opportunity when performing a grapple combat maneuver. In addition, you receive a +2 bonus on checks made to grapple a foe. You also receive a +2 bonus to your Combat Maneuver Defense whenever an opponent tries to grapple you.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Improved Unarmed Strike" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 13) or (character.Variables["FeatDexRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedGrapple"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Great Fortitude",
  Key="Sorcerer Bloodline Feat ~ Improved Great Fortitude",
  Category="Internal",
  Description={
    Format="You can draw upon an inner reserve to resist diseases, poisons, and other grievous harm.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Great Fortitude",
      },
    },
  },
  Benefits={
    {
      FormatString="Once per day, you may reroll a Fortitude save. You must decide to use this ability before the results are revealed. You must take the second roll, even if it is worse.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Great Fortitude" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedGreatFortitude"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Initiative",
  Key="Sorcerer Bloodline Feat ~ Improved Initiative",
  Category="Internal",
  Description={
    Format="Your quick reflexes allow you to react quickly to danger.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Initiative",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +4 bonus on initiative checks.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedInitiative"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Iron Will",
  Key="Sorcerer Bloodline Feat ~ Improved Iron Will",
  Category="Internal",
  Description={
    Format="Your clarity of thought allows you to resist mental attacks.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Iron Will",
      },
    },
  },
  Benefits={
    {
      FormatString="Once per day, you may reroll a Will save. You must decide to use this ability before the results are revealed. You must take the second roll, even if it is worse.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Iron Will" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedIronWill"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Overrun",
  Key="Sorcerer Bloodline Feat ~ Improved Overrun",
  Category="Internal",
  Description={
    Format="You are skilled at running down your foes.",
  },
  SourcePage="p.127",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Overrun",
      },
    },
  },
  Benefits={
    {
      FormatString="You do not provoke an attack of opportunity when performing an overrun combat maneuver. In addition, you receive a +2 bonus on checks made to overrrun a foe. You also receive a +2 bonus to your Combat Maneuver Defense whenever an opponent tries to overrun you. Targets of your overrun attempt may not chose to avoid you.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Power Attack" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedOverrun"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_STR"] >= 13)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Sunder",
  Key="Sorcerer Bloodline Feat ~ Improved Sunder",
  Category="Internal",
  Description={
    Format="You are skilled at damaging your foes' weapons and armor.",
  },
  SourcePage="p.128",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Sunder",
      },
    },
  },
  Benefits={
    {
      FormatString="You do not provoke an attack of opportunity when performing a sunder combat maneuver. In addition, you receive a +2 bonus on checks made to sunder an item. You also receive a +2 bonus to your Combat Maneuver Defense whenever an opponent tries to sunder your gear.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Power Attack" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedSunder"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_STR"] >= 13)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Improved Unarmed Strike",
  Key="Sorcerer Bloodline Feat ~ Improved Unarmed Strike",
  Category="Internal",
  Description={
    Format="You are skilled while fighting unarmed.",
  },
  SourcePage="p.128",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Improved Unarmed Strike",
      },
    },
  },
  Benefits={
    {
      FormatString="You are considered to be armed even when unarmed-you do not provoke attacks of opportunity when you attack foes while unarmed. Your unarmed strikes can deal lethal or nonlethal damage, at your choice.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ImprovedUnarmedStrike"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Intimidating Prowess",
  Key="Sorcerer Bloodline Feat ~ Intimidating Prowess",
  Category="Internal",
  Description={
    Format="Your physical might is intimidating to others.",
  },
  SourcePage="p.128",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Intimidating Prowess",
      },
    },
  },
  Benefits={
    {
      FormatString="Add your Strength modifier to Intimidate skill checks in addition to your Charisma modifier.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_IntimidatingProwess"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Iron Will",
  Key="Sorcerer Bloodline Feat ~ Iron Will",
  Category="Internal",
  Description={
    Format="You are more resistant to mental effects.",
  },
  SourcePage="p.129",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Iron Will",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on all Will saving throws.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_IronWill"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Leadership",
  Key="Sorcerer Bloodline Feat ~ Leadership",
  Category="Internal",
  Description={
    Format="You attract followers to your cause and a companion to join you on your adventure.",
  },
  SourcePage="p.129",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Leadership",
      },
    },
  },
  Benefits={
    {
      FormatString="This feat enables you to attract a loyal cohort and a number of devoted subordinates who assist you. A cohort is generally an NPC with class levels, while followers are typically lower level NPCs. See Table 5-2 for what level of cohort and how many followers you can recruit.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.Level >= 7
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Leadership"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Lightning Reflexes",
  Key="Sorcerer Bloodline Feat ~ Lightning Reflexes",
  Category="Internal",
  Description={
    Format="You have faster reflexes than normal.",
  },
  SourcePage="p.130",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Lightning Reflexes",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on all Reflex saving throws.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_LightningReflexes"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Magical Aptitude",
  Key="Sorcerer Bloodline Feat ~ Magical Aptitude",
  Category="Internal",
  Description={
    Format="You are skilled at spellcasting and using magic items.",
  },
  SourcePage="p.130",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Magical Aptitude",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on all Spellcraft checks and Use Magic Device checks. If you have 10 or more ranks in one of these skills, the bonus increases to +4 for that skill.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_MagicalAptitude"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Martial Weapon Proficiency",
  Key="Sorcerer Bloodline Feat ~ Martial Weapon Proficiency",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseWeaponProficiency(function (character, weapon)
      return ((not (character.IsProficientWith(weapon)) and (((weapon.IsType("Martial"))))))
    end),
  },
  Description={
    Format="You understand how to use your chosen martial weapon in combat.",
  },
  SourcePage="p.130",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Martial Weapon Proficiency (%LIST)",
      },
    },
  },
  Benefits={
    {
      FormatString="You make attack rolls with the selected weapon normally (without the non-proficient penalty).",
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Martial Weapon Proficiency Output" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_MartialWeaponProficiency"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Maximize Spell",
  Key="Sorcerer Bloodline Feat ~ Maximize Spell",
  Category="Internal",
  Description={
    Format="Your spells have the maximum possible effect.",
  },
  SourcePage="p.130",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Maximize Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="All variable, numeric effects of a spell modified by this feat are maximized. Saving throws and opposed rolls are not affected, nor are spells without random variables. A maximized spell uses up a spell slot three levels higher than the spell's actual level. An empowered, maximized spell gains the separate benefits of each feat: the maximum result plus half the normally rolled result.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_MaximizeSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Mobility",
  Key="Sorcerer Bloodline Feat ~ Mobility",
  Category="Internal",
  Description={
    Format="You can easily move through a dangerous melee.",
  },
  SourcePage="p.130",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Mobility",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +4 dodge bonus to Armor Class against attacks of opportunity caused when you move out of or within a threatened area. A condition that makes you lose your Dexterity bonus to Armor Class (if any) also makes you lose dodge bonuses. Dodge bonuses stack with each other, unlike most types of bonuses.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Dodge" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 13) or (character.Variables["FeatDexRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Mobility"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Mounted Combat",
  Key="Sorcerer Bloodline Feat ~ Mounted Combat",
  Category="Internal",
  Description={
    Format="You are adept at guiding your mount through combat.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Mounted Combat",
      },
    },
  },
  Benefits={
    {
      FormatString="Once per round when your mount is hit in combat, you may attempt a Ride check (as an immediate action) to negate the hit. The hit is negated if your Ride check result is greater than the opponent's attack roll.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Skill("Ride").ranks >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_MountedCombat"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Nimble Moves",
  Key="Sorcerer Bloodline Feat ~ Nimble Moves",
  Category="Internal",
  Description={
    Format="You can move across a single obstacle with ease.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Nimble Moves",
      },
    },
  },
  Benefits={
    {
      FormatString="Whenever you move, you may move through 5 feet of difficult terrain each round as if it were normal terrain. This feat allows you to take a 5-foot step into difficult terrain.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 13) or (character.Variables["FeatDexRequirement"] >= 13)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_NimbleMoves"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Persuasive",
  Key="Sorcerer Bloodline Feat ~ Persuasive",
  Category="Internal",
  Description={
    Format="You are skilled at swaying attitudes and intimidating others into your way of thinking.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Persuasive",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on Diplomacy and Intimidate skill checks. If you have 10 or more ranks in one of these skills, the bonus increases to +4 for that skill.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Persuasive"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Point-Blank Shot",
  Key="Sorcerer Bloodline Feat ~ Point-Blank Shot",
  Category="Internal",
  Description={
    Format="You are especially accurate when making ranged attacks against close target.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Point-Blank Shot",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +1 bonus on attack and damage rolls with ranged weapons at ranges of up to 30 feet.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_PointBlankShot"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Power Attack",
  Key="Sorcerer Bloodline Feat ~ Power Attack",
  Category="Internal",
  Description={
    Format="You can make exceptionally deadly melee attacks by sacrificing accuracy for strength.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Power Attack",
      },
    },
  },
  Benefits={
    {
      FormatString="You can choose to take a -%1 penalty on all melee attack rolls and combat maneuver checks to gain a +%2 bonus on all melee damage rolls. This bonus to damage is increased by half (+50%%) if you are making an attack with a two-handed weapon, a one handed weapon using two hands, or a primary natural weapon that adds 1-1/2 times your Strength modifier on damage rolls. This bonus to damage is halved (-50%%) if you are making an attack with an off-hand weapon or secondary natural weapon. You must choose to use this feat before making an attack roll, and its effects last until your next turn. The bonus damage does not apply to touch attacks or effects that do not deal hit point damage.",
      Arguments={
        "PowerAttackModifier",
        "PowerAttackDamageModifier",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_PowerAttack"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_STR"] >= 13)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Precise Shot",
  Key="Sorcerer Bloodline Feat ~ Precise Shot",
  Category="Internal",
  Description={
    Format="You are adept at firing ranged attacks into melee.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Precise Shot",
      },
    },
  },
  Benefits={
    {
      FormatString="You can shoot or throw ranged weapons at an opponent engaged in melee without taking the standard -4 penalty on your attack roll.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Point-Blank Shot" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_PreciseShot"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Quick Draw",
  Key="Sorcerer Bloodline Feat ~ Quick Draw",
  Category="Internal",
  Description={
    Format="You can draw weapons faster than most.",
  },
  SourcePage="p.131",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Quick Draw",
      },
    },
  },
  Benefits={
    {
      FormatString="You can draw a weapon as a free action instead of as a move action. You can draw a hidden weapon (see the Sleight of Hand skill) as a move action. A character who has selected this feat may throw weapons at his full normal rate of attacks (much like a character with a bow). Alchemical items, potions, scrolls, and wands cannot be drawn quickly using this feat.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_QuickDraw"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Quicken Spell",
  Key="Sorcerer Bloodline Feat ~ Quicken Spell",
  Category="Internal",
  Description={
    Format="You can cast spells in the fraction of the normal time.",
  },
  SourcePage="p.132",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Quicken Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="Casting a quickened spell is a swift action. You can perform another action, even casting another spell, in the same round as you cast a quickened spell. A spell whose casting time is more than 1 round or 1 full-round action cannot be quickened. A quickened spell uses up a spell slot four levels higher than the spell's actual level. Casting a quickened spell doesn't provoke an attack of opportunity.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_QuickenSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Ride-By Attack",
  Key="Sorcerer Bloodline Feat ~ Ride-By Attack",
  Category="Internal",
  Description={
    Format="While mounted, you can move, strike at a foe, and then continue moving.",
  },
  SourcePage="p.132",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Ride-By Attack",
      },
    },
  },
  Benefits={
    {
      FormatString="When you are mounted and use the charge action, you may move and attack as if with a standard charge and then move again (continuing the straight line of the charge). Your total movement for the round can't exceed double your mounted speed. You and your mount do not provoke an attack of opportunity from the opponent that you attack.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Mounted Combat" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Skill("Ride").ranks >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_RideByAttack"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Scribe Scroll",
  Key="Sorcerer Bloodline Feat ~ Scribe Scroll",
  Category="Internal",
  Description={
    Format="You can create magic scrolls.",
  },
  SourcePage="p.132",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Scribe Scroll",
      },
    },
  },
  Benefits={
    {
      FormatString="You can create a scroll of any spell that you know. Scribing a scroll takes 2 hours if its base price is 250 gp or less, otherwise scribing a scroll takes 1 day for each 1,000 gp in its base price. To scribe a scroll, you must use up raw materials costing half of this base price. See the magic item creation rules in Chapter 15 for more information.",
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.CountSpellCastingClasses(1))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_ScribeScroll"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Silent Spell",
  Key="Sorcerer Bloodline Feat ~ Silent Spell",
  Category="Internal",
  Description={
    Format="You can cast your spells without making any sound.",
  },
  SourcePage="p.133",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Silent Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="A silent spell can be cast with no verbal components. Spells without verbal components are not affected. A silent spell uses up a spell slot one level higher than the spell's actual level.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SilentSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Acrobatics)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Acrobatics)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Acrobatics skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Acrobatics)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusAcrobatics"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Bluff)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Bluff)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Bluff skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Bluff)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusBluff"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Craft)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Craft)",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSkill(function (character, skill)
      return ((skill.IsType("Craft")))
    end),
  },
  Description={
    Format="You are particularly adept at your chosen Craft skill.",
  },
  SourcePage="p.134",
  Stackable=false,
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (%LIST)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusCraft"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Fly)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Fly)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Fly skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Fly)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusFly"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Intimidate)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Intimidate)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Intimidate skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Intimidate)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusIntimidate"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [Arcana])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (Arcana))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (Arcana) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (Arcana))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgeArcana"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [Dungeoneering])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (Dungeoneering))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (dungeoneering) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (Dungeoneering))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgeDungeoneering"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [Engineering])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (Engineering))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (engineering) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (Engineering))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgeEngineering"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [History])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (History))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (History) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (History))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgeHistory"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [Nature])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (Nature))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (Nature) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (Nature))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgeNature"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [Planes])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (Planes))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (Planes) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (Planes))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgePlanes"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Knowledge [Religion])",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Knowledge (Religion))",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Knowledge (Religion) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Knowledge (Religion))",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusKnowledgeReligion"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Perception)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Perception)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Skill Focus (Perception) skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Perception)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusPerception"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Perform)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Perform)",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSkill(function (character, skill)
      return ((skill.IsType("Perform")))
    end),
  },
  Description={
    Format="You are particularly adept at the Perform skill.",
  },
  SourcePage="p.134",
  Stackable=false,
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (%LIST)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusPerform"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Sense Motive)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Sense Motive)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Sense Motive skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Sense Motive)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusSenseMotive"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Stealth)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Stealth)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Stealth skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Stealth)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusStealth"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Skill Focus (Swim)",
  Key="Sorcerer Bloodline Feat ~ Skill Focus (Swim)",
  Category="Internal",
  Description={
    Format="You are particularly adept at the Swim skill.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Skill Focus (Swim)",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +3 bonus on all checks involving the chosen skill. If you have 10 or more ranks in that skill, this bonus increases to +6.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SkillFocusSwim"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Spell Focus",
  Key="Sorcerer Bloodline Feat ~ Spell Focus",
  Category="Internal",
  Description={
    Format="Any spells you cast of your chosen school of magic are more difficult to resist.",
  },
  SourcePage="p.134",
  Benefits={
    {
      FormatString="Add +1 to the Difficulty Class for all saving throws against spells from the school of magic you select.",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Spell Focus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SpellFocus"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Spell Focus (Enchantment)",
  Key="Sorcerer Bloodline Feat ~ Spell Focus (Enchantment)",
  Category="Internal",
  Description={
    Format="Any spells you cast of your chosen school of magic are more difficult to resist.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Spell Focus (Enchantment)",
      },
    },
  },
  Benefits={
    {
      FormatString="Add +1 to the Difficulty Class for all saving throws against spells from the school of magic you select.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SpellFocusEnchantment"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Spell Focus (Necromancy)",
  Key="Sorcerer Bloodline Feat ~ Spell Focus (Necromancy)",
  Category="Internal",
  Description={
    Format="Any spells you cast of your chosen school of magic are more difficult to resist.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Spell Focus (Necromancy)",
      },
    },
  },
  Benefits={
    {
      FormatString="Add +1 to the Difficulty Class for all saving throws against spells from the school of magic you select.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SpellFocusNecromancy"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Spell Penetration",
  Key="Sorcerer Bloodline Feat ~ Spell Penetration",
  Category="Internal",
  Description={
    Format="Your spells break through spell resistance more easily than most.",
  },
  SourcePage="p.134",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Spell Penetration",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on caster level checks (1d20 + caster level) made to overcome a creature's spell resistance.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_SpellPenetration"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Stealthy",
  Key="Sorcerer Bloodline Feat ~ Stealthy",
  Category="Internal",
  Description={
    Format="You are good at avoiding attention and slipping out of bonds.",
  },
  SourcePage="p.135",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Stealthy",
      },
    },
  },
  Benefits={
    {
      FormatString="You get a +2 bonus on all Escape Artist and Stealth skill checks. If you have 10 or more ranks in one of these skills, the bonus increases to +4 for that skill.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Stealthy"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Still Spell",
  Key="Sorcerer Bloodline Feat ~ Still Spell",
  Category="Internal",
  Description={
    Format="You can cast spells without moving.",
  },
  SourcePage="p.135",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Still Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="A stilled spell can be cast with no somatic components. Spells without somatic components are not affected. A stilled spell uses up a spell slot one level higher than the spell's actual level.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_StillSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Toughness",
  Key="Sorcerer Bloodline Feat ~ Toughness",
  Category="Internal",
  Description={
    Format="You have enhanced physical stamina.",
  },
  SourcePage="p.135",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Toughness",
      },
    },
  },
  Benefits={
    {
      FormatString="You gain +%1 hit points.",
      Arguments={
        "max(3,TL)",
      },
    },
    {
      FormatString="You gain +1 hit points whenever you gain a Hit Die (such as when you gain a level).",
      Conditions={
        function (character, item, sources)
          return character.HitDie >= 3
        end,
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_Toughness"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Weapon Finesse",
  Key="Sorcerer Bloodline Feat ~ Weapon Finesse",
  Category="Internal",
  Description={
    Format="You are trained in using your agility in melee combat, as opposed to brute strength.",
  },
  SourcePage="p.136",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Weapon Finesse",
      },
    },
  },
  Benefits={
    {
      FormatString="With a light weapon, rapier, whip, or spiked chain made for a creature of your size category, you may use your Dexterity modifier instead of your Strength modifier on attack rolls. If you carry a shield, its armor check penalty applies to your attack rolls.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_WeaponFinesse"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Weapon Focus",
  Key="Sorcerer Bloodline Feat ~ Weapon Focus",
  Category="Internal",
  Description={
    Format="You are especially good at using your chosen weapon.",
  },
  SourcePage="p.136",
  Benefits={
    {
      FormatString="You gain a +1 bonus on all attack rolls you make using the selected weapon.",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Weapon Focus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.TotalAttackBonus >= 1
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_WeaponFocus"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Widen Spell",
  Key="Sorcerer Bloodline Feat ~ Widen Spell",
  Category="Internal",
  Description={
    Format="You can cast your spells so that they occupy a larger space.",
  },
  SourcePage="p.137",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Widen Spell",
      },
    },
  },
  Benefits={
    {
      FormatString="You can alter a burst, emanation, or spread-shaped spell to increase its area. Any numeric measurements of the spell's area increase by 100%%. A widened spell uses up a spell slot three levels higher than the spell's actual level. Spells that do not have an area of one of these four sorts are not affected by this feat.",
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_WidenSpell"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Wind Stance",
  Key="Sorcerer Bloodline Feat ~ Wind Stance",
  Category="Internal",
  Description={
    Format="Your erratic movements make it difficult for enemies to pinpoint your location.",
  },
  SourcePage="p.137",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Wind Stance",
      },
    },
  },
  Benefits={
    {
      FormatString="If you move more than 5 feet this turn, you gain 20%% concealment for 1 round against ranged attacks.",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "FEAT" then return false end
        if ability.Name == "Dodge" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["PreStatScore_DEX"] >= 15) or (character.Variables["FeatDexRequirement"] >= 15)
    end,
    function (character, item, sources)
      return character.TotalAttackBonus >= 6
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_BloodlineFeat_WindStance"] >= 1)
    end,
  },
  Types={
    "Sorcerer Bloodline Feat",
  },
})
DefineAbility({
  Name="Alarm",
  Key="Sorcerer Bonus Spell L1 ~ Alarm",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Alarm_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Alarm",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Animate Dead",
  Key="Sorcerer Bonus Spell L4 ~ Animate Dead",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_AnimateDead_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Animate Dead",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Animate Objects",
  Key="Sorcerer Bonus Spell L6 ~ Animate Objects",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_AnimateObjects_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Animate Objects",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Animate Plants",
  Key="Sorcerer Bonus Spell L8 ~ Animate Plants",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_AnimatePlants_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Animate Plants",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Astral Projection",
  Key="Sorcerer Bonus Spell L9 ~ Astral Projection",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_AstralProjection_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Astral Projection",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Augury",
  Key="Sorcerer Bonus Spell L2 ~ Augury",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Augury_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Augury",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Banishment",
  Key="Sorcerer Bonus Spell L7 ~ Banishment",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Banishment_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Banishment",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Barkskin",
  Key="Sorcerer Bonus Spell L2 ~ Barkskin",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Barkskin_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Barkskin",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Beast Shape IV",
  Key="Sorcerer Bonus Spell L6 ~ Beast Shape IV",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BeastShapeIV_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Beast Shape IV",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Bestow Curse",
  Key="Sorcerer Bonus Spell L4 ~ Bestow Curse",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BestowCurse_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Bestow Curse",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Black Tentacles",
  Key="Sorcerer Bonus Spell L4 ~ Black Tentacles",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BlackTentacles_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Black Tentacles",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Bless",
  Key="Sorcerer Bonus Spell L1 ~ Bless",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Bless_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Bless",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Blight",
  Key="Sorcerer Bonus Spell L5 ~ Blight",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Blight_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Blight",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Blink",
  Key="Sorcerer Bonus Spell L3 ~ Blink",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Blink_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Blink",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Blur",
  Key="Sorcerer Bonus Spell L2 ~ Blur",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Blur_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Blur",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Break Enchantment",
  Key="Sorcerer Bonus Spell L5 ~ Break Enchantment",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BreakEnchantment_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Break Enchantment",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Bull's Strength",
  Key="Sorcerer Bonus Spell L2 ~ Bull's Strength",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BullsStrength_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Bull's Strength",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Burning Hands",
  Key="Sorcerer Bonus Spell L1 ~ Burning Hands",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BurningHands_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Burning Hands (Acid)",
  Key="Sorcerer Bonus Spell L1 ~ Burning Hands (Acid)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BurningHandsAcid_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands (Acid)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Burning Hands (Cold)",
  Key="Sorcerer Bonus Spell L1 ~ Burning Hands (Cold)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BurningHandsCold_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands (Cold)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Burning Hands (Electricity)",
  Key="Sorcerer Bonus Spell L1 ~ Burning Hands (Electricity)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_BurningHandsElectricity_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands (Electricity)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Cause Fear",
  Key="Sorcerer Bonus Spell L1 ~ Cause Fear",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_CauseFear_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cause Fear",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Chain Lightning",
  Key="Sorcerer Bonus Spell L6 ~ Chain Lightning",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ChainLightning_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Chain Lightning",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Charm Monster",
  Key="Sorcerer Bonus Spell L4 ~ Charm Monster",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_CharmMonster_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Charm Monster",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Chill Touch",
  Key="Sorcerer Bonus Spell L1 ~ Chill Touch",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ChillTouch_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Chill Touch",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Circle of Death",
  Key="Sorcerer Bonus Spell L6 ~ Circle of Death",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_CircleofDeath_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Circle of Death",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Cloudkill",
  Key="Sorcerer Bonus Spell L5 ~ Cloudkill",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Cloudkill_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Cloudkill",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Command (Greater)",
  Key="Sorcerer Bonus Spell L5 ~ Command (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_CommandGreater_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Command (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Command Plants",
  Key="Sorcerer Bonus Spell L4 ~ Command Plants",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_CommandPlants_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Command Plants",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Cone of Cold",
  Key="Sorcerer Bonus Spell L5 ~ Cone of Cold",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ConeofCold_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Cone of Cold",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Confusion",
  Key="Sorcerer Bonus Spell L4 ~ Confusion",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Confusion_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Confusion",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Confusion, Lesser",
  Key="Sorcerer Bonus Spell L1 ~ Confusion (Lesser)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ConfusionLesser_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Confusion (Lesser)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Contagion",
  Key="Sorcerer Bonus Spell L4 ~ Contagion",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Contagion_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Contagion",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Control Undead",
  Key="Sorcerer Bonus Spell L7 ~ Control Undead",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ControlUndead_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Control Undead",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Control Water",
  Key="Sorcerer Bonus Spell L5 ~ Control Water",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ControlWater_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Control Water",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Control Weather",
  Key="Sorcerer Bonus Spell L7 ~ Control Weather",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ControlWeather_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Control Weather",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Darkvision",
  Key="Sorcerer Bonus Spell L2 ~ Darkvision",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Darkvision_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Darkvision",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Deep Slumber",
  Key="Sorcerer Bonus Spell L3 ~ Deep Slumber",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DeepSlumber_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Deep Slumber",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Deeper Darkness",
  Key="Sorcerer Bonus Spell L3 ~ Deeper Darkness",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DeeperDarkness_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Deeper Darkness",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Delay Poison",
  Key="Sorcerer Bonus Spell L2 ~ Delay Poison",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DelayPoison_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Delay Poison",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Delayed Blast Fireball",
  Key="Sorcerer Bonus Spell L7 ~ Delayed Blast Fireball",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DelayedBlastFireball_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Delayed Blast Fireball",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dimension Door",
  Key="Sorcerer Bonus Spell L4 ~ Dimension Door",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DimensionDoor_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Dimension Door",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dimensional Lock",
  Key="Sorcerer Bonus Spell L8 ~ Dimensional Lock",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DimensionalLock_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Dimensional Lock",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Disguise Self",
  Key="Sorcerer Bonus Spell L1 ~ Disguise Self",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DisguiseSelf_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Disguise Self",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Disintegrate",
  Key="Sorcerer Bonus Spell L6 ~ Disintegrate",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Disintegrate_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Disintegrate",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dismissal",
  Key="Sorcerer Bonus Spell L5 ~ Dismissal",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Dismissal_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Dismissal",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dispel Magic",
  Key="Sorcerer Bonus Spell L3 ~ Dispel Magic",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DispelMagic_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Dispel Magic",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dispel Magic, Greater",
  Key="Sorcerer Bonus Spell L6 ~ Dispel Magic (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DispelMagicGreater_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Dispel Magic (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Divination",
  Key="Sorcerer Bonus Spell L4 ~ Divination",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Divination_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Divination",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dominate Monster",
  Key="Sorcerer Bonus Spell L9 ~ Dominate Monster",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DominateMonster_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Dominate Monster",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dominate Person",
  Key="Sorcerer Bonus Spell L5 ~ Dominate Person",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_DominatePerson_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Dominate Person",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Dream",
  Key="Sorcerer Bonus Spell L5 ~ Dream",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Dream_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Dream",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Eagle's Splendor",
  Key="Sorcerer Bonus Spell L2 ~ Eagle's Splendor",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_EaglesSplendor_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Eagle's Splendor",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Earthquake",
  Key="Sorcerer Bonus Spell L8 ~ Earthquake",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Earthquake_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Earthquake",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Elemental Body I",
  Key="Sorcerer Bonus Spell L4 ~ Elemental Body I",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ElementalBodyI_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Elemental Body I",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Elemental Body II",
  Key="Sorcerer Bonus Spell L5 ~ Elemental Body II",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ElementalBodyII_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Elemental Body II",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Elemental Body III",
  Key="Sorcerer Bonus Spell L6 ~ Elemental Body III",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ElementalBodyIII_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Elemental Body III",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Elemental Body IV",
  Key="Sorcerer Bonus Spell L7 ~ Elemental Body IV",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ElementalBodyIV_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Elemental Swarm",
  Key="Sorcerer Bonus Spell L9 ~ Elemental Swarm",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ElementalSwarm_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Endure Elements",
  Key="Sorcerer Bonus Spell L1 ~ Endure Elements",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_EndureElements_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Endure Elements",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Energy Drain",
  Key="Sorcerer Bonus Spell L9 ~ Energy Drain",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_EnergyDrain_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Energy Drain",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Enlarge Person",
  Key="Sorcerer Bonus Spell L1 ~ Enlarge Person",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_EnlargePerson_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Enlarge Person",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Entangle",
  Key="Sorcerer Bonus Spell L1 ~ Entangle",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Entangle_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entangle",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Entropic Shield",
  Key="Sorcerer Bonus Spell L1 ~ Entropic Shield",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_EntropicShield_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entropic Shield",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Ethereal Jaunt",
  Key="Sorcerer Bonus Spell L6 ~ Ethereal Jaunt",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_EtherealJaunt_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Ethereal Jaunt",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Etherealness",
  Key="Sorcerer Bonus Spell L9 ~ Etherealness",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Etherealness_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Etherealness",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Explosive Runes",
  Key="Sorcerer Bonus Spell L3 ~ Explosive Runes",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ExplosiveRunes_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Explosive Runes",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Eyebite",
  Key="Sorcerer Bonus Spell L6 ~ Eyebite",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Eyebite_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Eyebite",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Fabricate",
  Key="Sorcerer Bonus Spell L5 ~ Fabricate",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Fabricate_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Fabricate",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="False Life",
  Key="Sorcerer Bonus Spell L2 ~ False Life",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FalseLife_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "False Life",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Fear",
  Key="Sorcerer Bonus Spell L4 ~ Fear",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Fear_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Fear",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Feeblemind",
  Key="Sorcerer Bonus Spell L5 ~ Feeblemind",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Feeblemind_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Feeblemind",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Finger of Death",
  Key="Sorcerer Bonus Spell L7 ~ Finger of Death",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FingerofDeath_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Finger of Death",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Fire Shield (warm)",
  Key="Sorcerer Bonus Spell L4 ~ Fire Shield (warm)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FireShieldwarm_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Fire Shield (warm)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Fireball",
  Key="Sorcerer Bonus Spell L3 ~ Fireball",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Fireball_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Fireball",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Flame Strike",
  Key="Sorcerer Bonus Spell L5 ~ Flame Strike",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FlameStrike_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Fly",
  Key="Sorcerer Bonus Spell L3 ~ Fly",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Fly_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Fly",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Foresight",
  Key="Sorcerer Bonus Spell L9 ~ Foresight",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Foresight_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Foresight",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Form of the Dragon I",
  Key="Sorcerer Bonus Spell L6 ~ Form of the Dragon I",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FormoftheDragonI_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Form of the Dragon I",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Form of the Dragon II",
  Key="Sorcerer Bonus Spell L7 ~ Form of the Dragon II",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FormoftheDragonII_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Form of the Dragon II",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Form of the Dragon III",
  Key="Sorcerer Bonus Spell L8 ~ Form of the Dragon III",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FormoftheDragonIII_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Form of the Dragon III",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Freedom of Movement",
  Key="Sorcerer Bonus Spell L4 ~ Freedom of Movement",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_FreedomofMovement_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Freedom of Movement",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Gaseous Form",
  Key="Sorcerer Bonus Spell L3 ~ Gaseous Form",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_GaseousForm_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Gaseous Form",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Gate",
  Key="Sorcerer Bonus Spell L9 ~ Gate",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Gate_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Gate",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Giant Form I",
  Key="Sorcerer Bonus Spell L7 ~ Giant Form I",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_GiantFormI_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Giant Form I",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Giant Form II",
  Key="Sorcerer Bonus Spell L8 ~ Giant Form II",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_GiantFormII_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Giant Form II",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Glitterdust",
  Key="Sorcerer Bonus Spell L2 ~ Glitterdust",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Glitterdust_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Glitterdust",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Guards and Wards",
  Key="Sorcerer Bonus Spell L6 ~ Guards and Wards",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_GuardsandWards_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Guards and Wards",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Gust of Wind",
  Key="Sorcerer Bonus Spell L2 ~ Gust of Wind",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_GustofWind_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Gust of Wind",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Heroism",
  Key="Sorcerer Bonus Spell L3 ~ Heroism",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Heroism_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Heroism",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Heroism, Greater",
  Key="Sorcerer Bonus Spell L6 ~ Heroism (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_HeroismGreater_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Heroism (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Hideous Laughter",
  Key="Sorcerer Bonus Spell L2 ~ Hideous Laughter",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_HideousLaughter_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Hideous Laughter",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Hold Monster",
  Key="Sorcerer Bonus Spell L5 ~ Hold Monster",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_HoldMonster_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Hold Monster",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Horrid Wilting",
  Key="Sorcerer Bonus Spell L8 ~ Horrid Wilting",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_HorridWilting_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Horrid Wilting",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Hypnotism",
  Key="Sorcerer Bonus Spell L1 ~ Hypnotism",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Hypnotism_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Hypnotism",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Identify",
  Key="Sorcerer Bonus Spell L1 ~ Identify",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Identify_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Identify",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Imprisonment",
  Key="Sorcerer Bonus Spell L9 ~ Imprisonment",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Imprisonment_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Imprisonment",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Insanity",
  Key="Sorcerer Bonus Spell L7 ~ Insanity",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Insanity_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Insanity",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Insect Plague",
  Key="Sorcerer Bonus Spell L5 ~ Insect Plague",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_InsectPlague_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Insect Plague",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Invisibility",
  Key="Sorcerer Bonus Spell L2 ~ Invisibility",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Invisibility_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Invisibility",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Iron Body",
  Key="Sorcerer Bonus Spell L8 ~ Iron Body",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_IronBody_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Iron Body",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Irresistible Dance",
  Key="Sorcerer Bonus Spell L8 ~ Irresistible Dance",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_IrresistibleDance_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Irresistible Dance",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Lightning Bolt",
  Key="Sorcerer Bonus Spell L3 ~ Lightning Bolt",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_LightningBolt_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Lightning Bolt",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Mage Armor",
  Key="Sorcerer Bonus Spell L1 ~ Mage Armor",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MageArmor_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Mage Armor",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Magic Circle against Evil",
  Key="Sorcerer Bonus Spell L3 ~ Magic Circle against Evil",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MagicCircleagainstEvil_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Evil",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Magic Vestment",
  Key="Sorcerer Bonus Spell L3 ~ Magic Vestment",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MagicVestment_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Magic Weapon",
  Key="Sorcerer Bonus Spell L1 ~ Magic Weapon",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MagicWeapon_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Weapon",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Magic Weapon, Greater",
  Key="Sorcerer Bonus Spell L3 ~ Magic Weapon (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MagicWeaponGreater_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Magic Weapon (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Major Creation",
  Key="Sorcerer Bonus Spell L5 ~ Major Creation",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MajorCreation_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Major Creation",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Make Whole",
  Key="Sorcerer Bonus Spell L2 ~ Make Whole",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MakeWhole_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Make Whole",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Meteor Swarm",
  Key="Sorcerer Bonus Spell L9 ~ Meteor Swarm",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MeteorSwarm_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Meteor Swarm",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Mind Blank",
  Key="Sorcerer Bonus Spell L8 ~ Mind Blank",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MindBlank_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Mind Blank",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Minor Creation",
  Key="Sorcerer Bonus Spell L4 ~ Minor Creation",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MinorCreation_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Minor Creation",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Mislead",
  Key="Sorcerer Bonus Spell L6 ~ Mislead",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Mislead_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Moment of Prescience",
  Key="Sorcerer Bonus Spell L8 ~ Moment of Prescience",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MomentofPrescience_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Moment of Prescience",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Move Earth",
  Key="Sorcerer Bonus Spell L6 ~ Move Earth",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_MoveEarth_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Move Earth",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Obscuring Mist",
  Key="Sorcerer Bonus Spell L1 ~ Obscuring Mist",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ObscuringMist_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Overland Flight",
  Key="Sorcerer Bonus Spell L5 ~ Overland Flight",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_OverlandFlight_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Overland Flight",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Persistent Image",
  Key="Sorcerer Bonus Spell L5 ~ Persistent Image",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PersistentImage_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Persistent Image",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Phase Door",
  Key="Sorcerer Bonus Spell L7 ~ Phase Door",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PhaseDoor_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Phase Door",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Planar Binding",
  Key="Sorcerer Bonus Spell L6 ~ Planar Binding",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PlanarBinding_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Planar Binding",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Planar Binding (Devils and Fiendish Creatures Only)",
  Key="Sorcerer Bonus Spell L6 ~ Planar Binding (Devils and Fiendish Creatures Only)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PlanarBindingDevilsAndFiendishCreaturesOnly_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Planar Binding (Devils and Fiendish Creatures Only)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Planar Binding, Greater",
  Key="Sorcerer Bonus Spell L8 ~ Planar Binding (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PlanarBindingGreater_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Planar Binding (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Plane Shift",
  Key="Sorcerer Bonus Spell L7 ~ Plane Shift",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PlaneShift_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Plane Shift",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Plant Shape III",
  Key="Sorcerer Bonus Spell L7 ~ Plant Shape III",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PlantShapeIII_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Plant Shape III",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Poison",
  Key="Sorcerer Bonus Spell L4 ~ Poison",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Poison_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Poison",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Polar Ray",
  Key="Sorcerer Bonus Spell L8 ~ Polar Ray",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PolarRay_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Polar Ray",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Polymorph Any Object",
  Key="Sorcerer Bonus Spell L8 ~ Polymorph Any Object",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PolymorphAnyObject_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Polymorph Any Object",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Polymorph, Greater",
  Key="Sorcerer Bonus Spell L7 ~ Polymorph (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PolymorphGreater_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Polymorph (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Power Word Blind",
  Key="Sorcerer Bonus Spell L7 ~ Power Word Blind",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PowerWordBlind_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Power Word Blind",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Power Word Stun",
  Key="Sorcerer Bonus Spell L8 ~ Power Word Stun",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PowerWordStun_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Power Word Stun",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Protection from Energy",
  Key="Sorcerer Bonus Spell L3 ~ Protection from Energy",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ProtectionfromEnergy_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Protection from Good",
  Key="Sorcerer Bonus Spell L1 ~ Protection from Good",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ProtectionfromGood_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Good",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Prying Eyes, Greater",
  Key="Sorcerer Bonus Spell L8 ~ Prying Eyes (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_PryingEyesGreater_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Prying Eyes (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Rage",
  Key="Sorcerer Bonus Spell L3 ~ Rage",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Rage_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Rage",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Ray of Enfeeblement",
  Key="Sorcerer Bonus Spell L1 ~ Ray of Enfeeblement",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_RayofEnfeeblement_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Ray of Enfeeblement",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Ray of Exhaustion",
  Key="Sorcerer Bonus Spell L3 ~ Ray of Exhaustion",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_RayofExhaustion_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Ray of Exhaustion",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Remove Curse",
  Key="Sorcerer Bonus Spell L4 ~ Remove Curse",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_RemoveCurse_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Remove Curse",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Repel Metal or Stone",
  Key="Sorcerer Bonus Spell L7 ~ Repel Metal or Stone",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_RepelMetalorStone_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Repel Metal or Stone",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Repulsion",
  Key="Sorcerer Bonus Spell L6 ~ Repulsion",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Repulsion_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Repulsion",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Resist Energy",
  Key="Sorcerer Bonus Spell L2 ~ Resist Energy",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ResistEnergy_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Resist Energy",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Reverse Gravity",
  Key="Sorcerer Bonus Spell L7 ~ Reverse Gravity",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ReverseGravity_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Reverse Gravity",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Scorching Ray",
  Key="Sorcerer Bonus Spell L2 ~ Scorching Ray",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ScorchingRay_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Scorching Ray (Acid)",
  Key="Sorcerer Bonus Spell L2 ~ Scorching Ray (Acid)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ScorchingRayAcid_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray (Acid)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Scorching Ray (Cold)",
  Key="Sorcerer Bonus Spell L2 ~ Scorching Ray (Cold)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ScorchingRayCold_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray (Cold)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Scorching Ray (Electricity)",
  Key="Sorcerer Bonus Spell L2 ~ Scorching Ray (Electricity)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ScorchingRayElectricity_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray (Electricity)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="See Invisibility",
  Key="Sorcerer Bonus Spell L2 ~ See Invisibility",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SeeInvisibility_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "See Invisibility",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shades",
  Key="Sorcerer Bonus Spell L9 ~ Shades",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Shades_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Shades",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shadow Conjuration",
  Key="Sorcerer Bonus Spell L4 ~ Shadow Conjuration",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShadowConjuration_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Shadow Conjuration",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shadow Evocation",
  Key="Sorcerer Bonus Spell L5 ~ Shadow Evocation",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShadowEvocation_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Shadow Evocation",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shadow Evocation, Greater",
  Key="Sorcerer Bonus Spell L8 ~ Shadow Evocation (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShadowEvocationGreater_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Shadow Evocation (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shadow Walk",
  Key="Sorcerer Bonus Spell L6 ~ Shadow Walk",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShadowWalk_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Shadow Walk",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shambler",
  Key="Sorcerer Bonus Spell L9 ~ Shambler",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Shambler_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Shambler",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shapechange",
  Key="Sorcerer Bonus Spell L9 ~ Shapechange",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Shapechange_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shocking Grasp",
  Key="Sorcerer Bonus Spell L1 ~ Shocking Grasp",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShockingGrasp_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Shocking Grasp",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shout",
  Key="Sorcerer Bonus Spell L4 ~ Shout",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Shout_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Shout",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shout, Greater",
  Key="Sorcerer Bonus Spell L8 ~ Shout (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShoutGreater_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Shout (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Shrink Item",
  Key="Sorcerer Bonus Spell L3 ~ Shrink Item",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_ShrinkItem_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Shrink Item",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Sleep",
  Key="Sorcerer Bonus Spell L1 ~ Sleep",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Sleep_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Sleep",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Soul Bind",
  Key="Sorcerer Bonus Spell L9 ~ Soul Bind",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SoulBind_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Soul Bind",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Speak with Plants",
  Key="Sorcerer Bonus Spell L3 ~ Speak with Plants",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SpeakwithPlants_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Speak with Plants",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Spell Resistance",
  Key="Sorcerer Bonus Spell L5 ~ Spell Resistance",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SpellResistance_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Spell Turning",
  Key="Sorcerer Bonus Spell L7 ~ Spell Turning",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SpellTurning_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Spike Stones",
  Key="Sorcerer Bonus Spell L5 ~ Spike Stones",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SpikeStones_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Spike Stones",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Stone Tell",
  Key="Sorcerer Bonus Spell L6 ~ Stone Tell",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_StoneTell_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Stone Tell",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Stoneskin",
  Key="Sorcerer Bonus Spell L4 ~ Stoneskin",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Stoneskin_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Stoneskin",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Storm of Vengeance",
  Key="Sorcerer Bonus Spell L9 ~ Storm of Vengeance",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_StormofVengeance_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Storm of Vengeance",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Suggestion",
  Key="Sorcerer Bonus Spell L3 ~ Suggestion",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Suggestion_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Suggestion",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Suggestion, Mass",
  Key="Sorcerer Bonus Spell L6 ~ Suggestion (Mass)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SuggestionMass_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Suggestion (Mass)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Summon Monster IX",
  Key="Sorcerer Bonus Spell L9 ~ Summon Monster IX",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SummonMonsterIX_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Summon Monster VII",
  Key="Sorcerer Bonus Spell L7 ~ Summon Monster VII",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SummonMonsterVII_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Summon Monster VII",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Summon Monster VIII (Elementals Only)",
  Key="Sorcerer Bonus Spell L8 ~ Summon Monster VIII (Elementals Only)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_SummonMonsterVIIIElementalsOnly_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Summon Monster VIII (Elementals Only)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Sunburst",
  Key="Sorcerer Bonus Spell L8 ~ Sunburst",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Sunburst_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Sunburst",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Teleport, Greater",
  Key="Sorcerer Bonus Spell L7 ~ Teleport (Greater)",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TeleportGreater_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Tongues",
  Key="Sorcerer Bonus Spell L3 ~ Tongues",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Tongues_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Tongues",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Touch of Idiocy",
  Key="Sorcerer Bonus Spell L2 ~ Touch of Idiocy",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TouchofIdiocy_L2"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 5)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Touch of Idiocy",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Transformation",
  Key="Sorcerer Bonus Spell L6 ~ Transformation",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Transformation_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Transformation",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Transmute Rock to Mud",
  Key="Sorcerer Bonus Spell L5 ~ Transmute Rock to Mud",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TransmuteRocktoMud_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Transmute Rock to Mud",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Transport via Plants",
  Key="Sorcerer Bonus Spell L6 ~ Transport via Plants",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TransportviaPlants_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Transport via Plants",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Trap the Soul",
  Key="Sorcerer Bonus Spell L8 ~ Trap the Soul",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TraptheSoul_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Trap the Soul",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Tree Stride",
  Key="Sorcerer Bonus Spell L5 ~ Tree Stride",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TreeStride_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Tree Stride",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="True Seeing",
  Key="Sorcerer Bonus Spell L6 ~ True Seeing",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TrueSeeing_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "True Seeing",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="True Strike",
  Key="Sorcerer Bonus Spell L1 ~ True Strike",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_TrueStrike_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "True Strike",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Undeath to Death",
  Key="Sorcerer Bonus Spell L6 ~ Undeath to Death",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_UndeathToDeath_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Undeath to Death",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Unholy Aura",
  Key="Sorcerer Bonus Spell L8 ~ Unholy Aura",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_UnholyAura_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Unholy Aura",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Unseen Servant",
  Key="Sorcerer Bonus Spell L1 ~ Unseen Servant",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_UnseenServant_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Unseen Servant",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Vampiric Touch",
  Key="Sorcerer Bonus Spell L3 ~ Vampiric Touch",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_VampiricTouch_L3"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 7)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Vampiric Touch",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Veil",
  Key="Sorcerer Bonus Spell L6 ~ Veil",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Veil_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Veil",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Ventriloquism",
  Key="Sorcerer Bonus Spell L1 ~ Ventriloquism",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Ventriloquism_L1"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 3)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Ventriloquism",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Vision",
  Key="Sorcerer Bonus Spell L7 ~ Vision",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Vision_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Vision",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wail of the Banshee",
  Key="Sorcerer Bonus Spell L9 ~ Wail of the Banshee",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WailoftheBanshee_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Wail of the Banshee",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wall of Fire",
  Key="Sorcerer Bonus Spell L4 ~ Wall of Fire",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WallofFire_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Wall of Fire",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wall of Ice",
  Key="Sorcerer Bonus Spell L4 ~ Wall of Ice",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WallOfIce_L4"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 9)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Wall of Ice",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wall of Iron",
  Key="Sorcerer Bonus Spell L6 ~ Wall of Iron",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WallofIron_L6"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 13)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Wall of Iron",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wall of Stone",
  Key="Sorcerer Bonus Spell L5 ~ Wall of Stone",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WallofStone_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Wall of Stone",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wall Of Thorns",
  Key="Sorcerer Bonus Spell L5 ~ Wall Of Thorns",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WallOfThorns_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Wall of Thorns",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Waves of Exhaustion",
  Key="Sorcerer Bonus Spell L7 ~ Waves of Exhaustion",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WavesofExhaustion_L7"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 15)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Waves of Exhaustion",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Waves Of Fatigue",
  Key="Sorcerer Bonus Spell L5 ~ Waves Of Fatigue",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_WavesOfFatigue_L5"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 11)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Waves of Fatigue",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Whirlwind",
  Key="Sorcerer Bonus Spell L8 ~ Whirlwind",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Whirlwind_L8"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 17)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Wish",
  Key="Sorcerer Bonus Spell L9 ~ Wish",
  Category="Internal",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Sorcerer_BonusSpell_Wish_L9"] >= 1)
    end,
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 19)
    end,
  },
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Wish",
          },
        },
      },
    },
  },
  Types={
    "Sorcerer Bloodline Bonus Spell",
  },
})
DefineAbility({
  Name="Standard Bloodline",
  Key="Sorcerer ~ Standard Bloodline Selection",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseAbilitySelection(function (character, ability)
      if ability.Category ~= "Sorcerer Bloodline" then
        return false
      end
      return ((not (character.HasAbility(ability))) and (character.IsQualifiedFor(ability) and (((ability.IsType("SorcererBloodlineChoice"))))))
    end),
  },
  Stackable=false,
  Abilities={
    {
      Category="Sorcerer Bloodline",
      Nature="AUTOMATIC",
      Names={
        "%LIST",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer ~ Standard Bloodline" then return true end
        return false
      end)
    end,
  },
  Types={
    "Bloodline Selection",
  },
})
DefineAbility({
  Name="Aberrant Bloodline",
  Key="Sorcerer Bloodline ~ Aberrant",
  Category="Special Ability",
  Description={
    Format="There is a taint in your blood, one that is alien and bizarre. You tend to think in odd ways, approaching problems from an angle that most would not expect. Over time, this taint manifests itself in your physical form.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Aberrant_Description"] == 0)
      end,
    },
  },
  SourcePage="p.72",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Knowledge (Dungeoneering)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aberrant Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aberrant Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Aberrant Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Aberrant Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Aberrant Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Aberrant Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Aberrant Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Aberrant Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Aberrant",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Aberrant_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Aberrant_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Aberrant_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Aberrant_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Aberrant_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Aberrant Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Aberrant Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Aberrant",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Aberrant_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Aberrant_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Aberrant_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Aberrant_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Aberrant_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Aberrant_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Aberrant_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Aberrant_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Aberrant Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_CombatCasting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedDisarm",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedGrapple",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedInitiative",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedUnarmedStrike",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_IronWill",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SilentSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeDungeoneering",
      },
    },
  },
})
DefineAbility({
  Name="Aberrant Bloodline ~ Bonus Spells",
  Category="Special Ability",
  Visible=false,
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Enlarge Person",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "See Invisibility",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Tongues",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Black Tentacles",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Feeblemind",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Veil",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Plane Shift",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Mind Blank",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Aberrant Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you cast a spell of the polymorph subschool, increase the duration of the spell by 50%% (minimum 1 round). This bonus does not stack with the increase granted by the Extend Spell feat.",
  },
  SourcePage="p.72",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+50%% duration on polymorph spells)",
    },
  },
  Types={
    "Sorcerer Bloodline Arcana",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Aberrant Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="Aberrant sorcerers show increasing signs of their tainted heritage as they increase in level, although they are only visible when used.",
  },
  SourcePage="p.72",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="AberrantBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Acidic Ray",
  Key="Aberrant Bloodline ~ Acidic Ray",
  Category="Special Ability",
  Description={
    Format="points of acid damage. You can use this ability %1 times per day.",
    Arguments={
      Formula("Sorcerer_Aberrant_BloodlinePower1Times"),
    },
  },
  SourcePage="p.72",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6 acid)",
      Arguments={
        "Sorcerer_AcidicRay_DamageBonus",
        "Sorcerer_Aberrant_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_AcidicRay_DamageBonus"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6+%1 acid)",
      Arguments={
        "Sorcerer_AcidicRay_DamageBonus",
        "Sorcerer_Aberrant_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_AcidicRay_DamageBonus"] > 0)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Aberrant_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="AberrantBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Aberrant_BloodlinePower1LVL/2"),
      Variables={
        "Sorcerer_AcidicRay_DamageBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Aberrant" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Aberrant_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Aberrant Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Long Limbs",
  Key="Aberrant Bloodline ~ Long Limbs",
  Category="Special Ability",
  Description={
    Format="Your reach increases by %1 feet whenever you are making a melee touch attack. This ability does not otherwise increase your threatened area.",
    Arguments={
      Formula("Sorcerer_LongLimbs_Reach"),
    },
  },
  SourcePage="p.72",
  Aspects={
    {
      Name="CombatBonus",
      FormatString="Your reach increases by %1 feet whenever you are making a melee touch attack.",
      Arguments={
        "Sorcerer_LongLimbs_Reach",
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(+%1 ft.)",
      Arguments={
        "Sorcerer_LongLimbs_Reach",
      },
    },
    {
      Name="ChildAbility",
      FormatString="AberrantBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5"),
      Variables={
        "Sorcerer_LongLimbs_Reach",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower3LVL"] >= 11)
        end,
      },
      Variables={
        "Sorcerer_LongLimbs_Reach",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower3LVL"] >= 17)
        end,
      },
      Variables={
        "Sorcerer_LongLimbs_Reach",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Aberrant" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Aberrant_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Aberrant Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Unusual Anatomy",
  Key="Aberrant Bloodline ~ Unusual Anatomy",
  Category="Special Ability",
  Description={
    Format="Your anatomy changes, giving you a %1%% chance to ignore any critical hit or sneak attack scored against you, treating it as a normal hit instead.",
    Arguments={
      Formula("Sorcerer_UnusualAnatomy_PercentChance"),
    },
  },
  SourcePage="p.72",
  Aspects={
    {
      Name="CombatBonus",
      FormatString="You have a %1%% chance to ignore critical hits and sneak attacks.",
      Arguments={
        "Sorcerer_UnusualAnatomy_PercentChance",
      },
      Conditions={
        function (character, item, sources)
          return not (2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Critical Hits" then return true end
            if ability.Name == "Immunity to Sneak Attacks" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1%%)",
      Arguments={
        "Sorcerer_UnusualAnatomy_PercentChance",
      },
      Conditions={
        function (character, item, sources)
          return not (2 <= character.CountAbilities(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Critical Hits" then return true end
            if ability.Name == "Immunity to Sneak Attacks" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="ChildAbility",
      FormatString="AberrantBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("25"),
      Variables={
        "Sorcerer_UnusualAnatomy_PercentChance",
      },
    },
    {
      Category="VAR",
      Formula=Formula("25"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Aberrant_BloodlinePower9LVL"] >= 13)
        end,
      },
      Variables={
        "Sorcerer_UnusualAnatomy_PercentChance",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Aberrant" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Aberrant_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Aberrant Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Alien Resistance",
  Key="Aberrant Bloodline ~ Alien Resistance",
  Category="Special Ability",
  Description={
    Format="You gain spell resistance %1.",
    Arguments={
      Formula("Sorcerer_AlienResistance_SR"),
    },
  },
  SourcePage="p.72",
  SpellResistance=Formula("Sorcerer_AlienResistance_SR"),
  Aspects={
    {
      Name="ChildAbility",
      FormatString="AberrantBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+Sorcerer_Aberrant_BloodlinePower15LVL"),
      Variables={
        "Sorcerer_AlienResistance_SR",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Aberrant" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Aberrant_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Aberrant Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Aberrant Form",
  Key="Aberrant Bloodline ~ Aberrant Form",
  Category="Special Ability",
  DamageReduction={
    Value="5/-",
  },
  Description={
    Format="Your body becomes truly unnatural. You are immune to critical hits and sneak attacks. In addition, you gain blindsight with a range of 60 feet and damage reduction 5/--.",
  },
  SourcePage="p.72",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Critical Hits",
        "Immunity to Sneak Attacks",
      },
    },
  },
  Aspects={
    {
      Name="CombatBonus",
      FormatString="You are immune to critical hits and sneak attacks.",
    },
    {
      Name="ChildAbility",
      FormatString="AberrantBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("60"),
      Type={
        Name="Base",
      },
      Variables={
        "BlindsightRange",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Aberrant" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Aberrant_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Aberrant Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Abyssal Bloodline",
  Key="Sorcerer Bloodline ~ Abyssal",
  Category="Special Ability",
  Description={
    Format="Generations ago, a demon spread its filth into your heritage. While it does not manifest in all of your kin, for you it is particularly strong. You might sometimes have urges to chaos or evil, but your destiny (and alignment) is up to you.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Abyssal_Description"] == 0)
      end,
    },
  },
  SourcePage="p.72",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Knowledge (Planes)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Abyssal Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Abyssal Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Abyssal Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Abyssal Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Abyssal Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Abyssal Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Abyssal Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Abyssal Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Abyssal",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Abyssal_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Abyssal_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Abyssal_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Abyssal_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Abyssal_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Abyssal Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bloodline Feat Tracker ~ Abyssal",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Abyssal",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Abyssal_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Abyssal_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Abyssal_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Abyssal_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Abyssal_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Abyssal_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Abyssal_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Abyssal_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Bloodline Feat Tracker ~ Abyssal",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_AugmentSummoning",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Cleave",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_EmpowerSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_GreatFortitude",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedBullRush",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedSunder",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_PowerAttack",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgePlanes",
      },
    },
  },
})
DefineAbility({
  Name="Abyssal Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cause Fear",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Bull's Strength",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Rage",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Stoneskin",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Dismissal",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Transformation",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Unholy Aura",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Abyssal Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you cast a spell of the summoning subschool, the creatures summoned gain DR %1/good. This does not stack with any DR the creature might have.",
    Arguments={
      Formula("Sorcerer_AbyssalBloodlineArcana_SummonDR"),
    },
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(summoned creatures gain DR %1/good)",
      Arguments={
        "Sorcerer_AbyssalBloodlineArcana_SummonDR",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(Sorcerer_Abyssal_BloodlineLVL/2,1)"),
      Variables={
        "Sorcerer_AbyssalBloodlineArcana_SummonDR",
      },
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Abyssal Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="While some would say that you are possessed, you know better. The demonic influence in your blood grows as you gain power.",
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="AbyssalBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Claws",
  Key="Abyssal Bloodline ~ Claws",
  Category="Special Ability",
  Description={
    Format="You can use your claws for %1 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("Sorcerer_Abyssal_BloodlinePower1Times"),
    },
  },
  SourcePage="p.73",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(2, 1d4+%1, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Abyssal_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] < 5)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d4+%1, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Abyssal_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] < 7)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Abyssal_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] >= 7)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] < 11)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1 plus 1d6 fire, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Abyssal_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlineProgressionLVL"] >= 11)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Abyssal_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
    {
      Name="ChildAbility",
      FormatString="AbyssalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] >= 7)
        end,
      },
      Variables={
        "Sorcerer_GenericClaws_SizeBonus",
      },
    },
    {
      Category="WEAPONPROF=Claw",
      Formula=Formula("Sorcerer_GenericClaws_SizeBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Abyssal_BloodlinePower1LVL"] >= 7)
        end,
      },
      Variables={
        "DAMAGESIZE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Abyssal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Abyssal_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Abyssal Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Demon Resistances",
  Key="Abyssal Bloodline ~ Demon Resistances",
  Category="Special Ability",
  Description={
    Format="You gain resist electricity %1 and a +%2 bonus on saving throws made against poison.",
    Arguments={
      Formula("Sorcerer_AbyssalDemonResistances_ResistanceBonus"),
      Formula("Sorcerer_AbyssalDemonResistances_SaveBonus"),
    },
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+%1 vs. poison",
      Arguments={
        "Sorcerer_AbyssalDemonResistances_SaveBonus",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Poison" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="ChildAbility",
      FormatString="AbyssalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Abyssal_BloodlinePower3LVL+3)/6),2)*5"),
      Variables={
        "Sorcerer_AbyssalDemonResistances_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Abyssal_BloodlinePower3LVL+3)/6),2)*2"),
      Variables={
        "Sorcerer_AbyssalDemonResistances_SaveBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_AbyssalDemonResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Abyssal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Abyssal_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Abyssal Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Strength of the Abyss",
  Key="Abyssal Bloodline ~ Strength of the Abyss",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 inherent bonus to your Strength.",
    Arguments={
      Formula("Sorcerer_AbyssalStrengthOfTheAbyss_StrBonus*2"),
    },
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="AbyssalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("Sorcerer_AbyssalStrengthOfTheAbyss_StrBonus*2"),
      Type={
        Name="Inherent",
      },
      Variables={
        "STR",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(max(0,(Sorcerer_Abyssal_BloodlinePower9LVL-5)/4),3)"),
      Variables={
        "Sorcerer_AbyssalStrengthOfTheAbyss_StrBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Abyssal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Abyssal_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Abyssal Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Added Summonings",
  Key="Abyssal Bloodline ~ Added Summonings",
  Category="Special Ability",
  Description={
    Format="Whenever you summon a creature with the demon subtype or the fiendish template using a summon monster spell, you summon one additional creature of the same kind.",
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="AbyssalBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Abyssal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Abyssal_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Abyssal Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Demonic Might",
  Key="Abyssal Bloodline ~ Demonic Might",
  Category="Special Ability",
  Description={
    Format="The power of the Abyss flows through you. You gain immunity to electricity and poison. You also gain resistance to acid %1, cold %1, and fire %1, and gain telepathy with a range of 60 feet (allowing you to communicate with any creature that can speak a language).",
    Arguments={
      Formula("Sorcerer_AbyssalDemonicMight_ResistanceBonus"),
    },
  },
  SourcePage="p.73",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Electricity",
        "Immunity to Poison",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Telepathy",
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="AbyssalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Variables={
        "Sorcerer_AbyssalDemonicMight_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_AbyssalDemonicMight_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ColdResistanceBonus",
        "FireResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-40"),
      Variables={
        "TelepathyRange",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Abyssal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Abyssal_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Abyssal Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Arcane Bloodline",
  Key="Sorcerer Bloodline ~ Arcane",
  Category="Special Ability",
  Description={
    Format="Your family has always been skilled in the eldritch art of magic. While many of your relatives were accomplished wizards, your powers developed without the need for study and practice.",
  },
  SourcePage="p.73",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Arcane Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Arcane Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Arcane Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Arcane Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Arcane Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Arcane",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_BloodlineClassSkill1"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Arcane_Description"] == 0)
        end,
      },
      Variables={
        "Knowledge Class Skill",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Arcane_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Arcane_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Arcane_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Arcane_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Arcane_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Arcane Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Arcane Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Arcane",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Arcane_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Arcane_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Arcane_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Arcane_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Arcane_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Arcane_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Arcane_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Arcane Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_CombatCasting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedCounterspell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedInitiative",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_IronWill",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ScribeScroll",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeArcana",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SpellFocus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_StillSpell",
      },
    },
  },
})
DefineAbility({
  Name="Arcane Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Identify",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Invisibility",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Dispel Magic",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Dimension Door",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Overland Flight",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "True Seeing",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Power Word Stun",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Wish",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Arcane Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you apply a metamagic feat to a spell that increases the slot used by at least one level, increase the spell's DC by +1. This bonus does not stack with itself and does not apply to spells modified by the Heighten Spell feat.",
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+1 DC for metamagic spells that increase spell level)",
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Arcane Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="Magic comes naturally to you, but as you gain levels you must take care to prevent the power from overwhelming you.",
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="ArcaneBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Arcane Bond",
  Key="Arcane Bloodline ~ Arcane Bond",
  Category="Special Ability",
  Description={
    Format="You gain an arcane bond, as a wizard equal to your sorcerer level. Your sorcerer levels stack with any wizard levels you possess when determining the powers of your familiar or bonded object. This ability does not allow you to have both a familiar and a bonded item. Once per day, your bonded item allows you to cast any one of your spells known (unlike a wizard's bonded item, which allows him to cast any one spell in his spellbook).",
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="ArcaneBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Arcane Bond",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Arcane_BloodlinePower1LVL"),
      Variables={
        "ArcaneBondLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Arcane" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Arcane_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Arcane Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Metamagic Adept",
  Key="Arcane Bloodline ~ Metamagic Adept",
  Category="Special Ability",
  Description={
    Format="You can apply any one metamagic feat you know to a spell you are about to cast without increasing the casting time. You must still expend a higher-level spell slot to cast this spell. You can use this ability %1 times per day.",
    Arguments={
      Formula("Sorcerer_ArcaneMetamagicAdept_Times"),
    },
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "Sorcerer_ArcaneMetamagicAdept_Times",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Arcane Bloodline ~ Arcane Apotheosis" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_ArcaneMetamagicAdept_Times",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Arcane Bloodline ~ Arcane Apotheosis" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Arcane Bloodline ~ Arcane Apotheosis" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="ChildAbility",
      FormatString="ArcaneBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("floor((Sorcerer_Arcane_BloodlinePower3LVL+1)/4)"),
      Variables={
        "Sorcerer_ArcaneMetamagicAdept_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Arcane" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Arcane_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Arcane Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="New Arcana",
  Key="Arcane Bloodline ~ New Arcana",
  Category="Special Ability",
  Description={
    Format="You can add any %1 spells from the sorcerer/wizard spell list to your list of spells known. This spell must be of a level that you are capable of casting.",
    Arguments={
      Formula("Sorcerer_NewArcana_Number"),
    },
  },
  SourcePage="p.73",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="ArcaneBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("Sorcerer_NewArcana_Number"),
      Variables={
        "New Arcana",
      },
    },
    {
      Category="VAR",
      Formula=Formula("floor((Sorcerer_Arcane_BloodlinePower9LVL-5)/4)"),
      Variables={
        "Sorcerer_NewArcana_Number",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Arcane" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Arcane_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Arcane Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="School Power",
  Key="Arcane Bloodline ~ School Power",
  Category="Special Ability",
  Description={
    Format="Pick one school of magic. The DC for any spells you cast from that school increases by +2. This bonus stacks with the bonus granted by Spell Focus.",
  },
  SourcePage="p.74",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Arcane Bloodline School Power",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Arcane" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Arcane_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Arcane Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
  },
})
DefineAbility({
  Name="School Power",
  Key="Arcane Bloodline ~ School Power Choice",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSchool(function (character, school)
      return ((true))
    end),
  },
  Description={
    Format="The DC for any spells you cast from the %1 school increases by +2. This bonus stacks with the bonus granted by Spell Focus.",
    Arguments={
      Formula("%LIST"),
    },
  },
  Selections=Formula("1"),
  SourcePage="p.74",
  Stackable=false,
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+2 DC for %1 spells)",
      Arguments={
        "&LIST",
      },
    },
    {
      Name="ChildAbility",
      FormatString="ArcaneBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="DC",
      Formula=Formula("2"),
      Type={
        Name="SchoolPower",
      },
      Variables={
        "SCHOOL.%LIST",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Arcane" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Arcane_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Arcane Apotheosis",
  Key="Arcane Bloodline ~ Arcane Apotheosis",
  Category="Special Ability",
  Description={
    Format="Your body surges with arcane power. You can add any metamagic feats that you know to your spells without increasing their casting time, although you must still expend higher-level spell slots. Whenever you use magic items that require charges, you can instead expend spell slots to power the item. For every three levels of spell slots that you expend, you consume one less charge when using a magic item that expends charges.",
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="ArcaneBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "Sorcerer_Arcane_BloodlinePower3",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Arcane" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Arcane_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Arcane Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Sorcerer Level 1",
  Key="New Arcana ~ Level 1",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=1",
      },
    },
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 2",
  Key="New Arcana ~ Level 2",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=2",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 4)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 3",
  Key="New Arcana ~ Level 3",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=3",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 6)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 4",
  Key="New Arcana ~ Level 4",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=4",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 8)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 5",
  Key="New Arcana ~ Level 5",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=5",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 10)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 6",
  Key="New Arcana ~ Level 6",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=6",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 12)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 7",
  Key="New Arcana ~ Level 7",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=7",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 14)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 8",
  Key="New Arcana ~ Level 8",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=8",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 16)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Sorcerer Level 9",
  Key="New Arcana ~ Level 9",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseNothing(),
  },
  Stackable=true,
  Bonuses={
    {
      Category="SPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Sorcerer;LEVEL=9",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["BloodlineCasterLVL"] >= 18)
    end,
  },
  Types={
    "SorcererNewArcana",
  },
})
DefineAbility({
  Name="Celestial Bloodline",
  Key="Sorcerer Bloodline ~ Celestial",
  Category="Special Ability",
  Description={
    Format="Your bloodline is blessed by a celestial power, either from a celestial ancestor or through divine intervention. Although this power drives you along the path of good, your fate (and alignment) is your own to determine.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Celestial_Description"] == 0)
      end,
    },
  },
  SourcePage="p.74",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Heal",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Celestial Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Celestial Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Celestial Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Celestial Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Celestial Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Celestial Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Celestial Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Celestial Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Celestial_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Celestial",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Celestial Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Celestial Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Celestial",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Celestial_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Celestial_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Celestial_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Celestial_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Celestial_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Celestial_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Celestial_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Celestial_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Celestial Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Dodge",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ExtendSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_IronWill",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Mobility",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_MountedCombat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_RideByAttack",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeReligion",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_WeaponFinesse",
      },
    },
  },
})
DefineAbility({
  Name="Celestial Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Bless",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Resist Energy",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Evil",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Remove Curse",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Dispel Magic (Greater)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Banishment",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Sunburst",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Gate",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Celestial Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you cast a spell of the summoning subschool, the creatures summoned gain DR %1/evil. This does not stack with any DR the creature might have.",
    Arguments={
      Formula("Sorcerer_CelestialBloodlineArcana_SummonDR"),
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(summoned creatures gain DR %1/evil)",
      Arguments={
        "Sorcerer_CelestialBloodlineArcana_SummonDR",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(Sorcerer_Celestial_BloodlineLVL/2,1)"),
      Variables={
        "Sorcerer_CelestialBloodlineArcana_SummonDR",
      },
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Celestial Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="Your celestial heritage grants you a great many powers, but they come at a price. The lords of the higher planes are watching you and your actions closely.",
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="CelestialBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Heavenly Fire",
  Key="Celestial Bloodline ~ Heavenly Fire",
  Category="Special Ability",
  Description={
    Format="points of damage. A good creature cannot benefit from your heavenly fire more than once per day. Neutral creatures are neither harmed nor healed by this effect. You can use this ability %1 times per day.",
    Arguments={
      Formula("Sorcerer_Celestial_BloodlinePower1Times"),
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6 divine energy)",
      Arguments={
        "Sorcerer_CelestialHeaventlyFire_DamageBonus",
        "Sorcerer_Celestial_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CelestialHeaventlyFire_DamageBonus"] <= 0)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6+%1 divine energy)",
      Arguments={
        "Sorcerer_CelestialHeaventlyFire_DamageBonus",
        "Sorcerer_Celestial_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CelestialHeaventlyFire_DamageBonus"] > 0)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Celestial_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="CelestialBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlinePower1LVL/2"),
      Variables={
        "Sorcerer_CelestialHeaventlyFire_DamageBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Celestial" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Celestial_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Celestial Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Celestial Resistances",
  Key="Celestial Bloodline ~ Celestial Resistances",
  Category="Special Ability",
  Description={
    Format="You gain resist acid %1 and resist cold %1.",
    Arguments={
      Formula("Sorcerer_CelestialCelestialResistances_ResistanceBonus"),
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="CelestialBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Celestial_BloodlinePower3LVL+3)/6),2)*5"),
      Variables={
        "Sorcerer_CelestialCelestialResistances_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_CelestialCelestialResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
        "ColdResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Celestial" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Celestial_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Celestial Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Wings of Heaven",
  Key="Celestial Bloodline ~ Wings of Heaven",
  Category="Special Ability",
  Description={
    Format="You can sprout feathery wings and fly with a speed of 60 feet and good maneuverability.",
    Conditions={
      function (character, item, sources)
        return character.HasAnyAbility(function (ability)
          if ability.Category ~= "Special Ability" then return false end
          if ability.Name == "Celestial Bloodline ~ Ascension" then return true end
          return false
        end)
      end,
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 minutes/day)",
      Arguments={
        "Sorcerer_CelestialWingsOfHeaven_TimeMinutes",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Celestial Bloodline ~ Ascension" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_CelestialWingsOfHeaven_TimeMinutes",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Celestial Bloodline ~ Ascension" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="0",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Celestial Bloodline ~ Ascension" then return true end
            return false
          end)
        end,
      },
    },
    {
      Name="CheckType",
      FormatString="Minutes per Day",
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Celestial Bloodline ~ Ascension" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="CheckType",
      FormatString="At Will",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Celestial Bloodline ~ Ascension" then return true end
            return false
          end)
        end,
      },
    },
    {
      Name="ChildAbility",
      FormatString="CelestialBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Celestial_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_CelestialWingsOfHeaven_TimeMinutes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Celestial" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Celestial_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Celestial Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Conviction",
  Key="Celestial Bloodline ~ Conviction",
  Category="Special Ability",
  Description={
    Format="You can reroll any one ability check, attack roll, skill check, or saving throw you just made. You must decide to use this ability after the die is rolled, but before the results are revealed by the GM. You must take the second result, even if it is worse. You can use this ability once per day.",
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "Sorcerer_CelestialConviction_Times",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_CelestialConviction_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="CelestialBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_CelestialConviction_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Celestial" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Celestial_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Celestial Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Ascension",
  Key="Celestial Bloodline ~ Ascension",
  Category="Special Ability",
  Description={
    Format="You become infused with the power of the heavens. You gain immunity to acid, cold, and petrification. You also gain resist electricity 10, resist fire 10, and a +4 racial bonus on saves against poison. You also gain unlimited use of the wings of heaven ability. Finally, you gain the ability to speak with any creature that has a language (as per the tongues spell).",
  },
  SourcePage="p.74",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Acid",
        "Immunity to Cold",
        "Immunity to Petrification",
        "Tongues",
      },
    },
  },
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+%1 vs. poison",
      Arguments={
        "Sorcerer_CelestialAscension_SaveBonus",
      },
    },
    {
      Name="ChildAbility",
      FormatString="CelestialBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10"),
      Variables={
        "Sorcerer_CelestialAscension_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="Racial",
      },
      Variables={
        "Sorcerer_CelestialAscension_SaveBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_CelestialAscension_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "FireResistanceBonus",
        "ElectricityResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Celestial" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Celestial_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Templates={
    "Celestial Bloodline ~ Wings of Heaven",
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Celestial Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Destined Bloodline",
  Key="Sorcerer Bloodline ~ Destined",
  Category="Special Ability",
  Description={
    Format="Your family is destined for greatness in some way. Your birth could have been foretold in prophecy, or perhaps it occurred during an especially auspicious event, such as a solar eclipse. Regardless of your bloodline's origin, you have a great future ahead.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Destined_Description"] == 0)
      end,
    },
  },
  SourcePage="p.74",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Knowledge (History)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Destined Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Destined Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Destined Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Destined Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Destined Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Destined Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Destined Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Destined Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Destined_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Destined",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Destined_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Destined_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Destined_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Destined_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Destined_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Destined_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Destined_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Destined_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Destined_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Destined_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Destined Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Destined Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Destined",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Destined_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Destined_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Destined_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Destined_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Destined_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Destined_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Destined_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Destined_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Destined Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ArcaneStrike",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Diehard",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Endurance",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Leadership",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_LightningReflexes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_MaximizeSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeHistory",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_WeaponFocus",
      },
    },
  },
})
DefineAbility({
  Name="Destined Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Alarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Blur",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Freedom of Movement",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Break Enchantment",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Moment of Prescience",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Foresight",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Destined Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you cast a spell with a range of \"personal,\" you gain a luck bonus equal to the spell's level on all your saving throws for 1 round.",
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(gain luck bonus to saves when casting personal-range spells)",
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Destined Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="You are destined for great things, and the powers that you gain serve to protect you.",
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="DestinedBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Touch of Destiny",
  Key="Destined Bloodline ~ Touch of Destiny",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action, giving it a +%1 insight bonus on attack rolls, skill checks, ability checks, and saving throws for 1 round. You can use this ability %2 times per day.",
    Arguments={
      Formula("Sorcerer_DestinedTouchOfDestiny_Bonus"),
      Formula("Sorcerer_Destined_BloodlinePower1Times"),
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+%1)",
      Arguments={
        "Sorcerer_DestinedTouchOfDestiny_Bonus",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Destined_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="DestinedBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(Sorcerer_Destined_BloodlinePower1LVL/2,1)"),
      Variables={
        "Sorcerer_DestinedTouchOfDestiny_Bonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Destined" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Destined_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Destined Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Fated",
  Key="Destined Bloodline ~ Fated",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 luck bonus on all of your saving throws and to your AC during surprise rounds and when you are otherwise unaware of an attack.",
    Arguments={
      Formula("Sorcerer_DestinedFated_LuckBonus"),
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "Sorcerer_DestinedFated_LuckBonus",
      },
    },
    {
      Name="ChildAbility",
      FormatString="DestinedBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("floor((Sorcerer_Destined_BloodlinePower3LVL+1)/4)"),
      Variables={
        "Sorcerer_DestinedFated_LuckBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Destined" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Destined_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Destined Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Supernatural",
    "Defensive",
  },
})
DefineAbility({
  Name="It Was Meant To Be",
  Key="Destined Bloodline ~ It Was Meant To Be",
  Category="Special Ability",
  Description={
    Format="You can use this ability twice per day.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_DestinedItWasMeantToBe_Times"] > 1)
      end,
    },
  },
  SourcePage="p.74",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "Sorcerer_DestinedItWasMeantToBe_Times",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_DestinedItWasMeantToBe_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="DestinedBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("floor((Sorcerer_Destined_BloodlinePower9LVL-1)/8)"),
      Variables={
        "Sorcerer_DestinedItWasMeantToBe_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Destined" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Destined_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Destined Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Within Reach",
  Key="Destined Bloodline ~ Within Reach",
  Category="Special Ability",
  Description={
    Format="Your ultimate destiny is drawing near. Once per day, when an attack or spell that causes damage would result in your death, you may attempt a DC 20 Will save. If successful, you are instead reduced to -1 hit points and are automatically stabilized. The bonus from your fated ability applies to this save.",
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1/day",
      Arguments={
        "Sorcerer_Destined_WithinReach_Times",
      },
    },
    {
      Name="ChildAbility",
      FormatString="DestinedBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_Destined_WithinReach_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Destined" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Destined_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Destined Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Supernatural",
    "Defensive",
  },
})
DefineAbility({
  Name="Destiny Realized",
  Key="Destined Bloodline ~ Destiny Realized",
  Category="Special Ability",
  Description={
    Format="Your moment of destiny is at hand. Any critical threats made against you only confirm if the second roll results in a natural 20 on the die. Any critical threats you score with a spell are automatically confirmed. Once per day, you can automatically succeed at one caster level check made to overcome spell resistance. You must use this ability before making the roll.",
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "Sorcerer_DestinedDestinyRealized_Times",
      },
    },
    {
      Name="ChildAbility",
      FormatString="DestinedBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DestinedDestinyRealized_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Destined" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Destined_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Destined Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Draconic Bloodline",
  Key="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Description={
    Format="At some point in your family's history, a dragon interbred with your bloodline, and now its ancient power flows through your veins.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Draconic_Description"] == 0)
      end,
    },
  },
  SourcePage="p.75",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Perception",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Draconic Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Draconic Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Draconic Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Draconic Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Draconic Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Draconic",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Draconic Bloodline Type",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Draconic Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Draconic",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Draconic_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Draconic_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Draconic Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_BlindFight",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_GreatFortitude",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedInitiative",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_PowerAttack",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_QuickenSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusFly",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeArcana",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Toughness",
      },
    },
  },
})
DefineAbility({
  Name="Draconic Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Mage Armor",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Resist Energy",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Fly",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Fear",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Form of the Dragon I",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Form of the Dragon II",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Form of the Dragon III",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Wish",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
    {
      Kind="Class",
      Name="PRESPELLTYPE:1,Arcane",
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Draconic Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="descriptor, that spell deals +1 point of damage per die rolled.",
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(acid spells deal +1 damage per die)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Acid"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(cold spells deal +1 damage per die)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Cold"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(electricity spells deal +1 damage per die)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Electricity"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(fire spells deal +1 damage per die)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Fire"] >= 1)
        end,
      },
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Draconic Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. You must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type.",
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="DraconicBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Claws",
  Key="Draconic Bloodline ~ Claws",
  Category="Special Ability",
  Description={
    Format="You can use your claws for %1 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("Sorcerer_Draconic_BloodlinePower1Times"),
    },
  },
  SourcePage="p.75",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Claw",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(2, 1d4+%1, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] < 5)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d4+%1, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] < 7)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] >= 7)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] < 11)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1 plus 1d6 acid, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Acid"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 11)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1 plus 1d6 cold, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Cold"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 11)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1 plus 1d6 electricity, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Electricity"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 11)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(2, 1d6+%1 plus 1d6 fire, treated as magic weapons, %2 rounds/day)",
      Arguments={
        "STR",
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Fire"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 11)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Draconic_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
    {
      Name="ChildAbility",
      FormatString="DraconicBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] >= 7)
        end,
      },
      Variables={
        "Sorcerer_GenericClaws_SizeBonus",
      },
    },
    {
      Category="WEAPONPROF=Claw",
      Formula=Formula("Sorcerer_GenericClaws_SizeBonus"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower1LVL"] >= 7)
        end,
      },
      Variables={
        "DAMAGESIZE",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Draconic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Draconic Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Dragon Resistances",
  Key="Draconic Bloodline ~ Dragon Resistances",
  Category="Special Ability",
  Description={
    Format="and a +%1 natural armor bonus.",
    Arguments={
      Formula("Sorcerer_DraconicDragonResistances_NaturalArmorBonus"),
    },
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="DraconicBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("Sorcerer_DraconicDragonResistances_NaturalArmorBonus"),
      Type={
        Name="NaturalArmor",
        Stack=true,
      },
      Variables={
        "AC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Draconic_BloodlinePower3LVL-3)/6)+1,2)*5"),
      Variables={
        "Sorcerer_DraconicDragonResistances_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Draconic_BloodlinePower3LVL-3)/6)+1,3)"),
      Variables={
        "Sorcerer_DraconicDragonResistances_NaturalArmorBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower3LVL"] >= 15)
        end,
      },
      Variables={
        "Sorcerer_DraconicDragonResistances_NaturalArmorBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_DraconicDragonResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Acid"] >= 1)
        end,
      },
      Variables={
        "AcidResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_DraconicDragonResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Electricity"] >= 1)
        end,
      },
      Variables={
        "ElectricityResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_DraconicDragonResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Fire"] >= 1)
        end,
      },
      Variables={
        "FireResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_DraconicDragonResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Cold"] >= 1)
        end,
      },
      Variables={
        "ColdResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Draconic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Draconic Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Draconic Bloodline ~ Breath Weapon",
  Category="Special Ability",
  Description={
    Format="You can use this ability %1 times per day.",
    Arguments={
      Formula("Sorcerer_DraconicBreathWeapon_Times"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_DraconicBreathWeapon_Times"] >= 4)
      end,
    },
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(60 ft. line, %2d6 acid, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Line"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Acid"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(60 ft. line, %2d6 cold, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Line"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Cold"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(60 ft. line, %2d6 electricity, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Line"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Electricity"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(60 ft. line, %2d6 fire, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Line"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Fire"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(30 ft. cone, %2d6 acid, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Cone"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Acid"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(30 ft. cone, %2d6 cold, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Cone"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Cold"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(30 ft. cone, %2d6 electricity, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Cone"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Electricity"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(30 ft. cone, %2d6 fire, DC %3, %1/day)",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
        "Sorcerer_DraconicBreathWeapon_Dice",
        "Sorcerer_DraconicBreathWeapon_DC",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBreathWeapon_Cone"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Fire"] >= 1)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_DraconicBreathWeapon_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
    {
      Name="ChildAbility",
      FormatString="DraconicBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Dice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(Sorcerer_Draconic_BloodlinePower9LVL/2)+CHA"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(floor((Sorcerer_Draconic_BloodlinePower9LVL-11)/3),1)"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlinePower9LVL"] >= 9)
        end,
      },
      Variables={
        "Sorcerer_DraconicBreathWeapon_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Draconic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Draconic Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Wings",
  Key="Draconic Bloodline ~ Wings",
  Category="Special Ability",
  Description={
    Format="Leathery dragon wings grow from your back as a standard action, giving you a fly speed of 60 feet with average maneuverability. You can dismiss the wings as a free action.",
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="DraconicBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "Maneuverability",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Draconic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Draconic Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
  Movement={
    Fly=60,
  },
})
DefineAbility({
  Name="Power of Wyrms",
  Key="Draconic Bloodline ~ Power of Wyrms",
  Category="Special Ability",
  Description={
    Format="damage. You also gain blindsense 60 feet.",
  },
  SourcePage="p.75",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Paralysis",
        "Immunity to Sleep",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Cold"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Fire",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Fire"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Acid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Acid"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Electricity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicDamageType_Electricity"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="DraconicBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("60"),
      Type={
        Name="Base",
      },
      Variables={
        "BlindsenseRange",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Draconic" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Draconic Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline",
    },
  },
})
DefineAbility({
  Name="Black",
  Key="Draconic Bloodline Choice ~ Black",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Black dragons are associated with the acid energy type and have a 60-foot line breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Black",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Line",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Acid",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Black)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Black"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Black)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Black"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Blue",
  Key="Draconic Bloodline Choice ~ Blue",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Blue dragons are associated with the electricity energy type and have a 60-foot line breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Blue",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Line",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Electricity",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Blue)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Blue"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Blue)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Blue"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Green",
  Key="Draconic Bloodline Choice ~ Green",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Green dragons are associated with the acid energy type and have a 30-foot cone breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Green",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Cone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Acid",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Green)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Green"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Green)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Green"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Red",
  Key="Draconic Bloodline Choice ~ Red",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Red dragons are associated with the fire energy type and have a 30-foot cone breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Red",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Cone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Fire",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Red)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Red"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Red)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Red"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="White",
  Key="Draconic Bloodline Choice ~ White",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. White dragons are associated with the cold energy type and have a 30-foot cone breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_White",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Cone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Cold",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (White)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_White"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (White)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_White"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Brass",
  Key="Draconic Bloodline Choice ~ Brass",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Brass dragons are associated with the fire energy type and have a 60-foot line breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Brass",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Line",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Fire",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Brass)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Brass"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Brass)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Brass"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Bronze",
  Key="Draconic Bloodline Choice ~ Bronze",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Bronze dragons are associated with the electricity energy type and have a 60-foot line breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Bronze",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Line",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Electricity",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Bronze)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Bronze"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Bronze)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Bronze"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Copper",
  Key="Draconic Bloodline Choice ~ Copper",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Copper dragons are associated with the acid energy type and have a 60-foot line breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Copper",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Line",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Acid",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Copper)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Copper"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Copper)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Copper"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Gold",
  Key="Draconic Bloodline Choice ~ Gold",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Gold dragons are associated with the fire energy type and have a 30-foot cone breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Gold",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Cone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Fire",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Gold)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Gold"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Gold)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Gold"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Silver",
  Key="Draconic Bloodline Choice ~ Silver",
  Category="Special Ability",
  Description={
    Format="The power of dragons flows through you and manifests in a number of ways. At 1st level, you must select one of the chromatic or metallic dragon types (see the Pathfinder RPG Bestiary). This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your dragon type. Silver dragons are associated with the cold energy type and have a 30-foot cone breath shape.",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBloodlineChoice_Silver",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicBreathWeapon_Cone",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_DraconicDamageType_Cold",
      },
    },
  },
  Types={
    "Sorcerer Draconic Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Draconic",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Draconic Bloodline (Silver)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Silver"] == 1)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Draconic (Silver)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_DraconicBloodlineChoice_Silver"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Elemental Bloodline",
  Key="Sorcerer Bloodline ~ Elemental",
  Category="Special Ability",
  Description={
    Format="The power of the elements resides in you, and at times you can hardly control its fury. This influence comes from an elemental outsider in your family history or a time when you or your relatives were exposed to a powerful elemental force.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Elemental_Description"] == 0)
      end,
    },
  },
  SourcePage="p.75",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Knowledge (Planes)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Elemental Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Elemental Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Elemental Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Elemental Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Elemental Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Elemental_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Elemental",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Elemental Bloodline Type",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Elemental Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Elemental",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Elemental_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Elemental_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Elemental_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Elemental_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Elemental_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Elemental_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Elemental_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Elemental Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Dodge",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_EmpowerSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_GreatFortitude",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedInitiative",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_LightningReflexes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_PowerAttack",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgePlanes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_WeaponFinesse",
      },
    },
  },
})
DefineAbility({
  Name="Elemental Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands (Acid)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands (Cold)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands (Electricity)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray (Acid)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray (Cold)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray (Electricity)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Elemental Body I",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Elemental Body II",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Elemental Body III",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Elemental Body IV",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Summon Monster VIII (Elementals Only)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Elemental Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="fire.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
      end,
    },
  },
  SourcePage="p.75",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(change energy damage spells to acid)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(change energy damage spells to cold)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(change energy damage spells to electricity)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(change energy damage spells to fire)",
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Elemental Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="One of the four elements infuses your being, and you can draw upon its power in times of need. You must select one of the four elements: air, earth, fire, or water. This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your element.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="ElementalBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Elemental Ray",
  Key="Elemental Bloodline ~ Elemental Ray",
  Category="Special Ability",
  Description={
    Format="points of damage. You can use this ability %1 times per day.",
    Arguments={
      Formula("Sorcerer_Elemental_BloodlinePower1Times"),
    },
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6 acid)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] <= 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6 cold)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] <= 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6 electricity)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] <= 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6 fire)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] <= 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6+%1 acid)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] > 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6+%1 cold)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] > 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6+%1 electricity)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] > 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%2/day (1d6+%1 fire)",
      Arguments={
        "Sorcerer_ElementalElementalRay_DamageBonus",
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalElementalRay_DamageBonus"] > 0)
        end,
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Elemental_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="ElementalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlinePower1LVL/2"),
      Variables={
        "Sorcerer_ElementalElementalRay_DamageBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Elemental" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Elemental_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Elemental Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Elemental Resistance",
  Key="Elemental Bloodline ~ Elemental Resistance",
  Category="Special Ability",
  Description={
    Format="fire.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
      end,
    },
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="ElementalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Elemental_BloodlinePower3LVL+3)/6),2)*10"),
      Variables={
        "Sorcerer_ElementalElementalResistance_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_ElementalElementalResistance_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
      Variables={
        "AcidResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_ElementalElementalResistance_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
      Variables={
        "ColdResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_ElementalElementalResistance_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
      Variables={
        "ElectricityResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_ElementalElementalResistance_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
      Variables={
        "FireResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Elemental" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Elemental_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Elemental Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Elemental Blast",
  Key="Elemental Bloodline ~ Elemental Blast",
  Category="Special Ability",
  Description={
    Format="This power has a range of 60 feet.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%3/day (%1d6 acid, DC %2)",
      Arguments={
        "Sorcerer_ElementalElementalBlast_Dice",
        "Sorcerer_ElementalElementalBlast_DC",
        "Sorcerer_ElementalElementalBlast_Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%3/day (%1d6 cold, DC %2)",
      Arguments={
        "Sorcerer_ElementalElementalBlast_Dice",
        "Sorcerer_ElementalElementalBlast_DC",
        "Sorcerer_ElementalElementalBlast_Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%3/day (%1d6 electricity, DC %2)",
      Arguments={
        "Sorcerer_ElementalElementalBlast_Dice",
        "Sorcerer_ElementalElementalBlast_DC",
        "Sorcerer_ElementalElementalBlast_Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="%3/day (%1d6 fire, DC %2)",
      Arguments={
        "Sorcerer_ElementalElementalBlast_Dice",
        "Sorcerer_ElementalElementalBlast_DC",
        "Sorcerer_ElementalElementalBlast_Times",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_ElementalElementalBlast_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="ElementalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Elemental_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_ElementalElementalBlast_Dice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(Sorcerer_Elemental_BloodlinePower9LVL/2)+CHA"),
      Variables={
        "Sorcerer_ElementalElementalBlast_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(floor((Sorcerer_Elemental_BloodlinePower9LVL-11)/3),1)"),
      Variables={
        "Sorcerer_ElementalElementalBlast_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Elemental" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Elemental_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Elemental Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Elemental Movement",
  Key="Elemental Bloodline ~ Elemental Movement",
  Category="Special Ability",
  Description={
    Format="You gain a swim speed of 60 feet.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
      end,
    },
  },
  SourcePage="p.76",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Elemental Movement (Air)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Elemental Movement (Earth)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Elemental Movement (Fire)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Elemental Bloodline ~ Elemental Movement (Water)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="ElementalBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Elemental" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Elemental_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Elemental Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Elemental Body",
  Key="Elemental Bloodline ~ Elemental Body",
  Category="Special Ability",
  Description={
    Format="fire.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
      end,
    },
  },
  SourcePage="p.76",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Critical Hits",
        "Immunity to Sneak Attacks",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Acid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Earth"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Water"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Electricity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Air"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Fire",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_ElementalBloodlineChoice_Fire"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="ElementalBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Elemental" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Elemental_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Elemental Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Air",
  Key="Sorcerer Elemental Bloodline (Air)",
  Category="Special Ability",
  Description={
    Format="One of the four elements infuses your being, and you can draw upon its power in times of need. At first level, you must select one of the four elements: air, earth, fire, or water. This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your element. Air is associate with the Electricity energy type and the flight movement type (Fly 60 feet (average)).",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_ElementalBloodlineChoice_Air",
      },
    },
  },
  Types={
    "Sorcerer Elemental Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Elemental",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Elemental Bloodline (Air)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Air)" then return true end
            return false
          end)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Elemental (Air)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Air)" then return true end
            return false
          end)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Earth",
  Key="Sorcerer Elemental Bloodline (Earth)",
  Category="Special Ability",
  Description={
    Format="One of the four elements infuses your being, and you can draw upon its power in times of need. At first level, you must select one of the four elements: air, earth, fire, or water. This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your element. Earth is associate with the Acid energy type and the burrow movement type (Burrow 30 feet).",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_ElementalBloodlineChoice_Earth",
      },
    },
  },
  Types={
    "Sorcerer Elemental Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Elemental",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Elemental Bloodline (Earth)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Earth)" then return true end
            return false
          end)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Elemental (Earth)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Earth)" then return true end
            return false
          end)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Fire",
  Key="Sorcerer Elemental Bloodline (Fire)",
  Category="Special Ability",
  Description={
    Format="One of the four elements infuses your being, and you can draw upon its power in times of need. At first level, you must select one of the four elements: air, earth, fire, or water. This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your element. Fire is associate with the Fire energy type and the base movement type (+30 feet base speed).",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_ElementalBloodlineChoice_Fire",
      },
    },
  },
  Types={
    "Sorcerer Elemental Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Elemental",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Elemental Bloodline (Fire)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Fire)" then return true end
            return false
          end)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Elemental (Fire)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Fire)" then return true end
            return false
          end)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Water",
  Key="Sorcerer Elemental Bloodline (Water)",
  Category="Special Ability",
  Description={
    Format="One of the four elements infuses your being, and you can draw upon its power in times of need. At first level, you must select one of the four elements: air, earth, fire, or water. This choice cannot be changed. A number of your abilities grant resistances and deal damage based on your element. Water is associate with the Cold energy type and the swim movement type (Swim 60 feet).",
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_ElementalBloodlineChoice_Water",
      },
    },
  },
  Types={
    "Sorcerer Elemental Bloodline Choice",
  },
})
ModifyAbility({
  Name="Sorcerer Bloodline ~ Elemental",
  Category="Special Ability",
  Aspects={
    {
      Name="NAME",
      FormatString="Elemental Bloodline (Water)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Water)" then return true end
            return false
          end)
        end,
      },
    },
    {
      Name="Bloodline",
      FormatString="Elemental (Water)",
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Sorcerer Elemental Bloodline (Water)" then return true end
            return false
          end)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Elemental Bloodline ~ Elemental Movement (Earth)",
  Category="Internal",
  SourcePage="p.76",
  Movement={
    Burrow=30,
  },
})
DefineAbility({
  Name="Elemental Bloodline ~ Elemental Movement (Water)",
  Category="Internal",
  SourcePage="p.76",
  Movement={
    Swim=60,
  },
})
DefineAbility({
  Name="Elemental Bloodline ~ Elemental Movement (Air)",
  Category="Internal",
  SourcePage="p.76",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Type={
        Name="Base",
      },
      Variables={
        "Maneuverability",
      },
    },
  },
  Movement={
    Fly=60,
  },
})
DefineAbility({
  Name="Elemental Bloodline ~ Elemental Movement (Fire)",
  Category="Internal",
  SourcePage="p.76",
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("30"),
      Variables={
        "TYPE.Walk",
      },
    },
  },
})
DefineAbility({
  Name="Fey Bloodline",
  Key="Sorcerer Bloodline ~ Fey",
  Category="Special Ability",
  Description={
    Format="The capricious nature of the fey runs in your family due to some intermingling of fey blood or magic. You are more emotional than most, prone to bouts of joy and rage.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Fey_Description"] == 0)
      end,
    },
  },
  SourcePage="p.76",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Knowledge (Nature)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fey Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fey Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fey Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Fey Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Fey Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Fey Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Fey Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Fey Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Fey_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Fey",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Fey_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Fey_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Fey_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Fey_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Fey_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Fey Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Fey Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Fey",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Fey_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Fey_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Fey_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Fey_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Fey_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Fey_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Fey_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Fey_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Fey Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Dodge",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedInitiative",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_LightningReflexes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Mobility",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_PointBlankShot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_PreciseShot",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_QuickenSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeNature",
      },
    },
  },
})
DefineAbility({
  Name="Fey Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entangle",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Hideous Laughter",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Deep Slumber",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Poison",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Tree Stride",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Phase Door",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Irresistible Dance",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Fey Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you cast a spell of the compulsion subschool, increase the spell's DC by +2.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+2 DC for compulsion spells)",
    },
  },
  Bonuses={
    {
      Category="DC",
      Formula=Formula("2"),
      Variables={
        "SUBSCHOOL.Compulsion",
      },
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Fey Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="You have always had a tie to the natural world, and as your power increases, so does the influence of the fey over your magic.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="FeyBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Laughing Touch",
  Key="Fey Bloodline ~ Laughing Touch",
  Category="Special Ability",
  Description={
    Format="You can cause a creature to burst out laughing for 1 round as a melee touch attack. A laughing creature can only take a move action but can defend itself normally. Once a creature has been affected by laughing touch, it is immune to its effects for 24 hours. You can use this ability %1 times per day. This is a mind-affecting effect.",
    Arguments={
      Formula("Sorcerer_Fey_BloodlinePower1Times"),
    },
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Fey_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="FeyBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Fey" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Fey_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Fey Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Woodland Stride",
  Key="Fey Bloodline ~ Woodland Stride",
  Category="Special Ability",
  Description={
    Format="You can move through any sort of undergrowth (such as natural thorns, briars, overgrown areas, and similar terrain) at your normal speed and without taking damage or suffering any other impairment. Thorns, briars, and overgrown areas that have been magically manipulated to impede motion, however, still affect you.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="FeyBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Fey" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Fey_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Fey Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Fleeting Glance",
  Key="Fey Bloodline ~ Fleeting Glance",
  Category="Special Ability",
  Description={
    Format="You can turn invisible for %1 rounds per day. This ability functions as greater invisibility. These rounds need not be consecutive.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_FeyFleetingGlance_Time",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
    {
      Name="ChildAbility",
      FormatString="FeyBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_FeyFleetingGlance_Time",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Fey" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Fey_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Fey Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Fey Magic",
  Key="Fey Bloodline ~ Fey Magic",
  Category="Special Ability",
  Description={
    Format="You may reroll any caster level check made to overcome spell resistance. You must decide to use this ability before the results are revealed by the GM. You must take the second result, even if it is worse. You can use this ability at will.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="FeyBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Fey" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Fey_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Fey Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "Special Attack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Soul of the Fey",
  Key="Fey Bloodline ~ Soul of the Fey",
  Category="Special Ability",
  DamageReduction={
    Value="10/Cold Iron",
  },
  Description={
    Format="Your soul becomes one with the world of the fey. You gain immunity to poison and DR 10/cold iron. Creatures of the animal type do not attack you unless compelled to do so through magic. Once per day, you can cast shadow walk as a spell-like ability with a caster level of %1.",
    Arguments={
      Formula("Sorcerer_FeySoulOfTheFey_CasterLevel"),
    },
  },
  SourcePage="p.76",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Poison",
      },
    },
  },
  Aspects={
    {
      Name="ChildAbility",
      FormatString="FeyBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Fey_BloodlinePower20LVL"),
      Variables={
        "Sorcerer_FeySoulOfTheFey_CasterLevel",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Fey" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Fey_BloodlineProgressionLVL"] >= 20)
    end,
  },
  SpellLikeAbilities={
    {
      Name="Shadow Walk",
      SpellBookName="Sorcerer",
      Times="1",
      TimeUnit="Day",
      DC="16+CHA",
      CasterLevel="Sorcerer_FeySoulOfTheFey_CasterLevel",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Fey Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Infernal Bloodline",
  Key="Sorcerer Bloodline ~ Infernal",
  Category="Special Ability",
  Description={
    Format="Somewhere in your family's history, a relative made a deal with a devil, and that pact has influenced your family line ever since. In you, it manifests in direct and obvious ways, granting you powers and abilities. While your fate is still your own, you can't help but wonder if your ultimate reward is bound to the Pit.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Infernal_Description"] == 0)
      end,
    },
  },
  SourcePage="p.76",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Diplomacy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Infernal Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Infernal Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Infernal Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Infernal Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Infernal Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Infernal Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Infernal Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Infernal Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Infernal_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Infernal",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Infernal Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Infernal Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Infernal",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Infernal_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Infernal_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Infernal_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Infernal_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Infernal_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Infernal_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Infernal_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Infernal_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Infernal Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_BlindFight",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_CombatExpertise",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Deceitful",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ExtendSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_ImprovedDisarm",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_IronWill",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgePlanes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SpellPenetration",
      },
    },
  },
})
DefineAbility({
  Name="Infernal Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Good",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "Scorching Ray",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Suggestion",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Charm Monster",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Dominate Person",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Planar Binding (Devils and Fiendish Creatures Only)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Power Word Stun",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Meteor Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Infernal Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Whenever you cast a spell of the charm subschool, increase the spell's DC by +2.",
  },
  SourcePage="p.76",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+2 DC for charm spells)",
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Infernal Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="You can draw upon the power of Hell, although you must be wary of its corrupting influence. Such power does not come without a price.",
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="InfernalBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Corrupting Touch",
  Key="Infernal Bloodline ~ Corrupting Touch",
  Category="Special Ability",
  Description={
    Format="You can cause a creature to become shaken as a melee touch attack. This effect persists for %1 rounds. Creatures shaken by this ability radiate an aura of evil, as if they were an evil outsider. Multiple touches do not stack, but they do add to the duration. You can use this ability %2 times per day.",
    Arguments={
      Formula("Sorcerer_InfernalCorruptingTouch_Duration"),
      Formula("Sorcerer_Infernal_BloodlinePower1Times"),
    },
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 round)",
      Arguments={
        "Sorcerer_InfernalCorruptingTouch_Duration",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_InfernalCorruptingTouch_Duration"] <= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds)",
      Arguments={
        "Sorcerer_InfernalCorruptingTouch_Duration",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_InfernalCorruptingTouch_Duration"] > 1)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Infernal_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="InfernalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(Sorcerer_Infernal_BloodlinePower1LVL/2,1)"),
      Variables={
        "Sorcerer_InfernalCorruptingTouch_Duration",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Infernal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Infernal_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Infernal Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Infernal Resistances",
  Key="Infernal Bloodline ~ Infernal Resistances",
  Category="Special Ability",
  Description={
    Format="You gain resist fire %1 and a +%2 bonus on saving throws made against poison.",
    Arguments={
      Formula("Sorcerer_InfernalInfernalResistances_ResistanceBonus"),
      Formula("Sorcerer_InfernalInfernalResistances_SaveBonus"),
    },
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+%1 vs. poison",
      Arguments={
        "Sorcerer_InfernalInfernalResistances_SaveBonus",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Immunity to Poison" then return true end
            return false
          end))
        end,
      },
    },
    {
      Name="ChildAbility",
      FormatString="InfernalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Infernal_BloodlinePower3LVL+3)/6),2)*5"),
      Variables={
        "Sorcerer_InfernalInfernalResistances_ResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Infernal_BloodlinePower3LVL+3)/6),2)*2"),
      Variables={
        "Sorcerer_InfernalInfernalResistances_SaveBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_InfernalInfernalResistances_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "FireResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Infernal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Infernal_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Infernal Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Hellfire",
  Key="Infernal Bloodline ~ Hellfire",
  Category="Special Ability",
  Description={
    Format="This power has a range of 60 feet.",
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%3/day (%1d6 fire, DC %2)",
      Arguments={
        "Sorcerer_InfernalHellfire_Dice",
        "Sorcerer_InfernalHellfire_DC",
        "Sorcerer_InfernalHellfire_Times",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_InfernalHellfire_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="InfernalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_InfernalHellfire_Dice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Infernal_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_InfernalHellfire_Duration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+(Sorcerer_Infernal_BloodlinePower9LVL/2)+CHA"),
      Variables={
        "Sorcerer_InfernalHellfire_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(floor((Sorcerer_Infernal_BloodlinePower9LVL-11)/3),1)"),
      Variables={
        "Sorcerer_InfernalHellfire_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Infernal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Infernal_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Infernal Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="On Dark Wings",
  Key="Infernal Bloodline ~ On Dark Wings",
  Category="Special Ability",
  Description={
    Format="You can grow fearsome bat wings as a standard action, giving you a fly speed of 60 feet with average maneuverability. The wings can be dismissed as a free action.",
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="InfernalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Variables={
        "Maneuverability",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Infernal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Infernal_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Infernal Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
  Movement={
    Fly=60,
  },
})
DefineAbility({
  Name="Power of the Pit",
  Key="Infernal Bloodline ~ Power of the Pit",
  Category="Special Ability",
  Description={
    Format="Your form becomes infused with vile power. You gain immunity to fire and poison. You also gain resistance to acid 10 and cold 10, and the ability to see perfectly in darkness of any kind to a range of 60 feet.",
  },
  SourcePage="p.77",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Fire",
        "Immunity to Poison",
        "See in Darkness",
      },
    },
  },
  Aspects={
    {
      Name="Vision",
      FormatString="See in Darkness %1 ft.",
      Arguments={
        "Sorcerer_InfernalPowerOfThePit_VisionDistance",
      },
    },
    {
      Name="ChildAbility",
      FormatString="InfernalBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("60"),
      Variables={
        "Sorcerer_InfernalPowerOfThePit_VisionDistance",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ColdResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Infernal" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Infernal_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Infernal Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Supernatural",
  },
  Visions={
    {
      Kind={
        "See in Darkness (Sorcerer_InfernalPowerOfThePit_VisionDistance)",
      },
    },
  },
})
DefineAbility({
  Name="Undead Bloodline",
  Key="Sorcerer Bloodline ~ Undead",
  Category="Special Ability",
  Description={
    Format="The taint of the grave runs through your family. Perhaps one of your ancestors became a powerful lich or vampire, or maybe you were born dead before suddenly returning to life. Either way, the forces of death move through you and touch your every action.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["Sorcerer_Undead_Description"] == 0)
      end,
    },
  },
  SourcePage="p.77",
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Knowledge (Religion)",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlineClassSkill1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Undead Bloodline ~ Bloodline Arcana",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlineArcana1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Undead Bloodline ~ Bonus Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlineSpells1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Undead Bloodline ~ Bloodline Powers",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlinePowers"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Undead Bloodline ~ Power LVL 01",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlinePower1"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Undead Bloodline ~ Power LVL 03",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlinePower3"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Undead Bloodline ~ Power LVL 09",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlinePower9"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Undead Bloodline ~ Power LVL 15",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlinePower15"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Types={
        "Undead Bloodline ~ Power LVL 20",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Undead_BloodlinePower20"] >= 1)
        end,
      },
    },
  },
  Aspects={
    {
      Name="Bloodline",
      FormatString="Undead",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlineLVL+BloodlinePower1LVLBonus"),
      Variables={
        "Sorcerer_Undead_BloodlinePower1LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlineLVL+BloodlinePower3LVLBonus"),
      Variables={
        "Sorcerer_Undead_BloodlinePower3LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlineLVL+BloodlinePower9LVLBonus"),
      Variables={
        "Sorcerer_Undead_BloodlinePower9LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlineLVL+BloodlinePower15LVLBonus"),
      Variables={
        "Sorcerer_Undead_BloodlinePower15LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlineLVL+BloodlinePower20LVLBonus"),
      Variables={
        "Sorcerer_Undead_BloodlinePower20LVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "SpecialQuality",
    "ClassSpecialization",
    "Sorcerer Bloodline",
  },
})
DefineAbility({
  Name="Undead Bloodline",
  Category="Sorcerer Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Undead Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Undead",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BloodlineFeatCount"),
      Variables={
        "Sorcerer Bloodline Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineLVL"),
      Variables={
        "Sorcerer_Undead_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlineProgressionLVL"),
      Variables={
        "Sorcerer_Undead_BloodlineProgressionLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineArcana==0,1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineSpells==0,1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlineClassSkill==0,1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePowers==0,1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlinePowers",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(Sorcerer_CF_BloodlinePower1==0,1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Undead_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Undead_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Undead_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Undead_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Undead_BloodlinePower20",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BloodlinePowerTimes+BloodlinePower1TimesBonus"),
      Type={
        Name="Base",
      },
      Variables={
        "Sorcerer_Undead_BloodlinePower1Times",
      },
    },
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Undead Bloodline ~ Feat Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_CombatCasting",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Diehard",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Endurance",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_IronWill",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SkillFocusKnowledgeReligion",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_SpellFocus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_StillSpell",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_BloodlineFeat_Toughness",
      },
    },
  },
})
DefineAbility({
  Name="Undead Bloodline ~ Bonus Spells",
  Category="Special Ability",
  SpellsKnown={
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Chill Touch",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell1"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 3)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=2,
          Spells={
            "False Life",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell2"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 5)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=3,
          Spells={
            "Vampiric Touch",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell3"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 7)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=4,
          Spells={
            "Animate Dead",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell4"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 9)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=5,
          Spells={
            "Waves of Fatigue",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell5"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 11)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=6,
          Spells={
            "Undeath to Death",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell6"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 13)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=7,
          Spells={
            "Finger of Death",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell7"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 15)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=8,
          Spells={
            "Horrid Wilting",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell8"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 17)
        end,
      },
    },
    {
      Kind="Class",
      Name="Sorcerer",
      Levels={
        {
          SpellLevel=9,
          Spells={
            "Energy Drain",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_CF_BloodlineSpell9"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["BloodlineCasterLVL"] >= 19)
        end,
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Bloodline Arcana",
  Key="Undead Bloodline ~ Bloodline Arcana",
  Category="Special Ability",
  Description={
    Format="Some undead are susceptible to your mind-affecting spells. Corporeal undead that were once humanoids are treated as humanoids for the purposes of determining which spells affect them.",
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(corporeal undead affected by humanoid-affecting spells)",
    },
  },
  Types={
    "Sorcerer Class Feature",
    "Sorcerer Bloodline Arcana",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Bloodline Powers",
  Key="Undead Bloodline ~ Bloodline Powers",
  Category="Special Ability",
  Description={
    Format="You can call upon the foul powers of the afterlife. Unfortunately, the more you draw upon them, the closer you come to joining them.",
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="MasterAbility",
      FormatString="UndeadBloodlinePowers",
    },
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
  },
})
DefineAbility({
  Name="Grave Touch",
  Key="Undead Bloodline ~ Grave Touch",
  Category="Special Ability",
  Description={
    Format="You can make a melee touch attack as a standard action that causes a living creature to become shaken for %1 rounds. If you touch a shaken creature with this ability, it becomes frightened for 1 round if it has fewer than %2 Hit Dice. You can use this ability %3 times per day.",
    Arguments={
      Formula("Sorcerer_UndeadGraveTouch_Duration"),
      Formula("Sorcerer_UndeadGraveTouch_AffectedHD"),
      Formula("Sorcerer_Undead_BloodlinePower1Times"),
    },
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 round)",
      Arguments={
        "Sorcerer_UndeadGraveTouch_Duration",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_UndeadGraveTouch_Duration"] <= 1)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds)",
      Arguments={
        "Sorcerer_UndeadGraveTouch_Duration",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_UndeadGraveTouch_Duration"] > 1)
        end,
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_Undead_BloodlinePower1Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="UndeadBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(Sorcerer_Undead_BloodlinePower1LVL/2,1)"),
      Variables={
        "Sorcerer_UndeadGraveTouch_Duration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlinePower1LVL"),
      Variables={
        "Sorcerer_UndeadGraveTouch_AffectedHD",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Undead" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Undead_BloodlineProgressionLVL"] >= 1)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Undead Bloodline ~ Power LVL 01",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Death's Gift",
  Key="Undead Bloodline ~ Death's Gift",
  Category="Special Ability",
  DamageReduction={
    Value="Sorcerer_UndeadDeathsGift_DR/Lethal",
    Conditions={
      function (character, item, sources)
        return not (character.HasAnyAbility(function (ability)
          if ability.Category ~= "Special Ability" then return false end
          if ability.Name == "Undead Bloodline ~ One of Us" then return true end
          return false
        end))
      end,
    },
  },
  Description={
    Format="You gain resist cold %1 and DR %2/-- against nonlethal damage.",
    Arguments={
      Formula("Sorcerer_UndeadDeathsGift_ResistanceBonus"),
      Formula("Sorcerer_UndeadDeathsGift_DR"),
    },
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="ChildAbility",
      FormatString="UndeadBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("min(floor((Sorcerer_Undead_BloodlinePower3LVL+3)/6),2)*5"),
      Variables={
        "Sorcerer_UndeadDeathsGift_ResistanceBonus",
        "Sorcerer_UndeadDeathsGift_DR",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_UndeadDeathsGift_ResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ColdResistanceBonus",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Undead" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Undead_BloodlineProgressionLVL"] >= 3)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Undead Bloodline ~ Power LVL 03",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Grasp of the Dead",
  Key="Undead Bloodline ~ Grasp of the Dead",
  Category="Special Ability",
  Description={
    Format="This power has a range of 60 feet.",
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%3/day (%1d6 slashing, DC %2)",
      Arguments={
        "Sorcerer_UndeadGraspOfTheDead_Dice",
        "Sorcerer_UndeadGraspOfTheDead_DC",
        "Sorcerer_UndeadGraspOfTheDead_Times",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_UndeadGraspOfTheDead_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="UndeadBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlinePower9LVL"),
      Variables={
        "Sorcerer_UndeadGraspOfTheDead_Dice",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+Sorcerer_Undead_BloodlinePower9LVL/2+CHA"),
      Variables={
        "Sorcerer_UndeadGraspOfTheDead_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(floor((Sorcerer_Undead_BloodlinePower9LVL-11)/3),1)"),
      Variables={
        "Sorcerer_UndeadGraspOfTheDead_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Undead" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Undead_BloodlineProgressionLVL"] >= 9)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Undead Bloodline ~ Power LVL 09",
    "Sorcerer Bloodline Power",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Incorporeal Form",
  Key="Undead Bloodline ~ Incorporeal Form",
  Category="Special Ability",
  Description={
    Format="You can become incorporeal for %1 rounds. While in this form, you gain the incorporeal subtype. You only take half damage from corporeal sources as long as they are magic (you take no damage from non-magic weapons and objects). Likewise, your spells deal only half damage to corporeal creatures. Spells and other effects that do not deal damage function normally. You can use this ability once per day.",
    Arguments={
      Formula("Sorcerer_UndeadIncorporealForm_Duration"),
    },
  },
  SourcePage="p.77",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds)",
      Arguments={
        "Sorcerer_UndeadIncorporealForm_Duration",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "Sorcerer_UndeadIncorporealForm_Times",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
    {
      Name="ChildAbility",
      FormatString="UndeadBloodlinePowers",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Undead_BloodlinePower15LVL"),
      Variables={
        "Sorcerer_UndeadIncorporealForm_Duration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "Sorcerer_UndeadIncorporealForm_Times",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Undead" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Undead_BloodlineProgressionLVL"] >= 15)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Undead Bloodline ~ Power LVL 15",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="One of Us",
  Key="Undead Bloodline ~ One of Us",
  Category="Special Ability",
  DamageReduction={
    Value="5/-",
  },
  Description={
    Format="Your form begins to rot (the appearance of this decay is up to you) and undead see you as one of them. You gain immunity to cold, nonlethal damage, paralysis, and sleep. You also gain DR 5/--. Unintelligent undead do not notice you unless you attack them. You receive a +4 morale bonus on saving throws made against spells and spell-like abilities cast by undead.",
  },
  SourcePage="p.77",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
        "Immunity to Nonlethal Damage",
        "Immunity to Paralysis",
        "Immunity to Sleep",
      },
    },
  },
  Aspects={
    {
      Name="SaveBonus",
      FormatString="+4 morale bonus vs. undead spells and spell-like abilities",
    },
    {
      Name="ChildAbility",
      FormatString="UndeadBloodlinePowers",
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Sorcerer Bloodline ~ Undead" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return (character.Variables["Sorcerer_Undead_BloodlineProgressionLVL"] >= 20)
    end,
  },
  Types={
    "Class Feature",
    "Sorcerer Class Feature",
    "Undead Bloodline ~ Power LVL 20",
    "Sorcerer Bloodline Power",
    "SpecialQuality",
    "Special Quality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Class Skills",
  Key="Wizard ~ Class Skills",
  Category="Special Ability",
  Description={
    Format="The wizard's class skills are Appraise (Int), Craft (Int), Fly (Dex), Knowledge (all) (Int), Linguistics (Int), Profession (Wis), and Spellcraft (Int).&nl;Skill Ranks per Level: 2 + Int modifier.",
  },
  SourcePage="p.78",
  Visible=true,
  Abilities={
    {
      Category="Class Skill",
      Nature="AUTOMATIC",
      Names={
        "Appraise",
        "Craft",
        "Fly",
        "Knowledge",
        "Linguistics",
        "Profession",
        "Spellcraft",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Wizard ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Wizards are proficient with the club, dagger, heavy crossbow, light crossbow, and quarterstaff, but not with any type of armor or shield. Armor interferes with a wizard's movements, which can cause his spells with somatic components to fail.",
  },
  SourcePage="p.78",
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Club",
        "Dagger",
        "Crossbow (Heavy)",
        "Crossbow (Light)",
        "Quarterstaff",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
  },
})
DefineAbility({
  Name="Spells",
  Key="Wizard ~ Spells",
  Category="Special Ability",
  Description={
    Format="A wizard casts arcane spells drawn from the sorcerer/wizard spell list presented in Chapter 10. A wizard must choose and prepare his spells ahead of time.&nl;To learn, prepare, or cast a spell, the wizard must have an Intelligence score equal to at least 10 + the spell level. The Difficulty Class for a saving throw against a wizard's spell is 10 + the spell level + the wizard's Intelligence modifier.&nl;A wizard can cast only a certain number of spells of each spell level per day. His base daily spell allotment is given on Table 3-16. In addition, he receives bonus spells per day if he has a high Intelligence score (see Table 1-3).&nl;A wizard may know any number of spells. He must choose and prepare his spells ahead of time by getting 8 hours of sleep and spending 1 hour studying his spellbook. While studying, the wizard decides which spells to prepare.",
  },
  SourcePage="p.78",
  Types={
    "Class Feature",
    "Wizard Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Bonus Languages",
  Key="Wizard ~ Bonus Languages",
  Category="Special ability",
  Description={
    Format="A wizard may substitute Draconic for one of the bonus languages available to the character because of his race.",
  },
  SourcePage="p.78",
  Visible=true,
  Templates={
    "Race Bonus Language ~ Draconic",
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
  },
})
DefineAbility({
  Name="Arcane Bond",
  Key="Wizard ~ Arcane Bond",
  Category="Special Ability",
  Description={
    Format="(You have selected to establish a powerful arcane bond with a creature.)",
    Conditions={
      function (character, item, sources)
        return character.HasAnyAbility(function (ability)
          if ability.Category ~= "Special Ability" then return false end
          if ability.Name == "Arcane Bond ~ Familiar" then return true end
          return false
        end)
      end,
    },
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Arcane Bond",
      },
    },
    {
      Category="VAR",
      Formula=Formula("WizardLVL"),
      Variables={
        "ArcaneBondLVL",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
    "SpecialQuality",
    "Supernatural or Extraordinary",
  },
})
DefineAbility({
  Name="Arcane School",
  Key="Wizard ~ Arcane School",
  Category="Special Ability",
  Description={
    Format="A wizard can choose to specialize in one school of magic, gaining additional spells and powers based on that school. This choice must be made at 1st level, and once made, it cannot be changed. A wizard that does not select a school receives the universalist school instead.&nl;A wizard that chooses to specialize in one school of magic must select two other schools as his opposition schools, representing knowledge sacrificed in one area of arcane lore to gain mastery in another. A wizard who prepares spells from his opposition schools must use two spell slots of that level to prepare the spell. In addition, a specialist takes a -4 penalty on any skill checks made when crafting a magic item that has a spell from one of his opposition schools as a prerequisite. A universalist wizard can prepare spells from any school without restriction.&nl;Each arcane school gives the wizard a number of school powers. In addition, specialist wizards receive an additional spell slot of each spell level he can cast, from 1st on up. Each day, a wizard can prepare a spell from his specialty school in that slot. This spell must be in the wizard's spellbook. A wizard can select a spell modified by a metamagic feat to prepare in his school slot, but it uses up a higher-level spell slot. Wizards with the universalist school do not receive a school slot.",
  },
  SourcePage="p.78",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Arcane School Tracker",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
    "SpecialQuality",
    "Arcane School",
  },
})
DefineAbility({
  Name="Cantrips",
  Key="Wizard ~ Cantrips",
  Category="Special Ability",
  Description={
    Format="Wizards can prepare a number of cantrips, or 0-level spells, each day. These spells are cast like any other spell, but they are not expended when cast and may be used again. A wizard can prepare a cantrip from an opposed school, but it uses up two of his available slots.",
  },
  SourcePage="p.79",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["OppositionalSchool"] == 0)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Scribe Scroll",
  Key="Wizard ~ Scribe Scroll",
  Category="Special ability",
  Description={
    Format="At 1st level, a wizard gains Scribe Scroll as a bonus feat.",
  },
  SourcePage="p.79",
  Visible=true,
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Scribe Scroll",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
  },
})
DefineAbility({
  Name="Bonus Feats",
  Key="Wizard ~ Bonus Feats",
  Category="Special Ability",
  Description={
    Format="At 5th, 10th, 15th, and 20th level, a wizard gains a bonus feat. At each such opportunity, he can choose a metamagic feat, an item creation feat, or Spell Mastery. The wizard must still meet all prerequisites for a bonus feat, including caster level minimums. These bonus feats are in addition to the feats that a character of any class gets from advancing levels. The wizard is not limited to the categories of item creation feats, metamagic feats, or Spell Mastery when choosing those feats.",
  },
  SourcePage="p.79",
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("WizardLvl/5"),
      Variables={
        "Wizard Bonus Feat",
      },
    },
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
  },
})
DefineAbility({
  Name="Spellbooks",
  Key="Wizard ~ Spellbooks",
  Category="Special Ability",
  Description={
    Format="A wizard must study his spellbook each day to prepare his spells. He cannot prepare any spell not recorded in his spellbook, except for read magic, which all wizards can prepare from memory.&nl;A wizard begins play with a spellbook containing all 0-level wizard spells (except those from his opposed schools, if any; see Arcane Schools) plus three 1st-level spells of his choice. The wizard also selects a number of additional 1st-level spells equal to his Intelligence modifier to add to the spellbook. At each new wizard level, he gains two new spells of any spell level or levels that he can cast (based on his new wizard level) for his spellbook. At any time, a wizard can also add spells found in other wizards' spellbooks to his own.",
  },
  SourcePage="p.79",
  StartingKitCount=1,
  Visible=true,
  StartingKitChoices={
    "Wizard Spellbook",
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
  },
})
DefineAbility({
  Name="Familiar",
  Key="Arcane Bond ~ Familiar",
  Category="Special Ability",
  Description={
    Format="A familiar is an animal chosen by a spellcaster to aid him in his study of magic. It retains the appearance, Hit Dice, base attack bonus, base save bonuses, skills, and feats of the normal animal it once was, but is now a magical beast for the purpose of effects that depend on its type. Only a normal, unmodified animal may become a familiar. An animal companion cannot also function as a familiar.&nl;A familiar grants special abilities to its master, as given on the table below. These special abilities apply only when the master and familiar are within 1 mile of each other.&nl;Levels of different classes that are entitled to familiars stack for the purpose of determining any familiar abilities that depend on the master's level.&nl;If a familiar is dismissed, lost, or dies, it can be replaced 1 week later through a specialized ritual that costs 200 gp per wizard level. The ritual takes 8 hours to complete.",
  },
  DisplayName="Arcane Bond (Familiar)",
  SourcePage="p.82",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Standard Familiar List",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneBondLVL"),
      Type={
        Name="Base",
      },
      Variables={
        "FamiliarMasterLVL",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_Familiar"] == 0)
    end,
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
    "ArcaneBond",
    "SpecialQuality",
    "Special Quality",
    "Familiar",
  },
  Followers={
    Familiar=1,
  },
})
DefineAbility({
  Name="Bonded Object",
  Key="Arcane Bond ~ Bonded Object",
  Category="Special Ability",
  Description={
    Format="Wizards who select a bonded object begin play with one at no cost. Objects that are the subject of an arcane bond must fall into one of the following categories: amulet, ring, staff, wand, or weapon. These objects are always masterwork quality. Weapons acquired at 1st level are not made of any special material. If the object is an amulet or ring, it must be worn to have effect, while staves, wands, and weapons must be held in one hand. If a wizard attempts to cast a spell without his bonded object worn or in hand, he must make a concentration check or lose the spell. The DC for this check is equal to 20 + the spell's level. If the object is a ring or amulet, it occupies the ring or neck slot accordingly.&nl;A bonded object can be used once per day to cast any one spell that the wizard has in his spellbook and is capable of casting, even if the spell is not prepared. This spell is treated like any other spell cast by the wizard, including casting time, duration, and other effects dependent on the wizard's level. This spell cannot be modified by metamagic feats or other abilities. The bonded object cannot be used to cast spells from the wizard's opposition schools (see arcane school).&nl;A wizard can add additional magic abilities to his bonded object as if he has the required item creation feats and if he meets the level prerequisites of the feat. If the bonded object is a wand, it loses its wand abilities when its last charge is consumed, but it is not destroyed and it retains all of its bonded object properties and can be used to craft a new wand. The magic properties of a bonded object, including any magic abilities added to the object, only function for the wizard who owns it. If a bonded object's owner dies, or the item is replaced, the object reverts to being an ordinary masterwork item of the appropriate type.&nl;If a bonded object is damaged, it is restored to full hit points the next time the wizard prepares his spells. If the object of an arcane bond is lost or destroyed, it can be replaced after 1 week in a special ritual that costs 200 gp per wizard level plus the cost of the masterwork item. This ritual takes 8 hours to complete. Items replaced in this way do not possess any of the additional enchantments of the previous bonded item. A wizard can designate an existing magic item as his bonded item. This functions in the same way as replacing a lost or destroyed item except that the new magic item retains its abilities while gaining the benefits and drawbacks of becoming a bonded item.",
  },
  DisplayName="Arcane Bond (Object)",
  SourcePage="p.78",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_BondedObject"] == 0)
    end,
  },
  Types={
    "Class Feature",
    "Wizard Class Feature",
    "ArcaneBond",
    "SpecialQuality",
    "Special Quality",
  },
})
ModifyAbility({
  Name="Wizard ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["WizardLvl"] >= 5)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BonusFeat5"] == 1)
        end,
      },
      Variables={
        "Wizard Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Wizard ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["WizardLvl"] >= 10)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BonusFeat10"] == 1)
        end,
      },
      Variables={
        "Wizard Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Wizard ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["WizardLvl"] >= 15)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BonusFeat15"] == 1)
        end,
      },
      Variables={
        "Wizard Bonus Feat",
      },
    },
  },
})
ModifyAbility({
  Name="Wizard ~ Bonus Feats",
  Category="Special Ability",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["WizardLvl"] >= 20)
        end,
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BonusFeat20"] == 1)
        end,
      },
      Variables={
        "Wizard Bonus Feat",
      },
    },
  },
})
DefineAbility({
  Name="Arcane School Tracker",
  Category="Internal",
})
ModifyAbility({
  Name="Arcane School Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WizardLVL"),
      Variables={
        "ArcaneSchoolLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Arcane School Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WizardLVL"),
      Variables={
        "ArcaneSchoolProgressionLVL",
      },
    },
  },
})
ModifyAbility({
  Name="Arcane School Tracker",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("INT+3"),
      Variables={
        "ArcaneSchoolPowerTimes",
      },
    },
  },
})
DefineAbility({
  Name="Abjuration School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in abjuration spells.",
  },
  SourcePage="p.79",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Abjuration School ~ Resistance",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_Resistance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] >= 1)
        end,
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] < 20)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Abjuration School ~ Protective Ward",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ProtectiveWard"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Abjuration School ~ Energy Absorption",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_EnergyAbsorption"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] >= 6)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Abjurer;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "AbjurationSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "AbjurationProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Conjuration School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in conjuration spells.",
  },
  SourcePage="p.80",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Conjuration School ~ Summoner's Charm",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_SummonersCharm"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["ConjurationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Conjuration School ~ Acid Dart",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_AcidDart"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["ConjurationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Conjuration School ~ Dimensional Steps",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_DimensionalSteps"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["ConjurationProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Conjurer;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "ConjurationSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "ConjurationProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Divination School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in divination spells.",
  },
  SourcePage="p.80",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Divination School ~ Forwarned",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_Forwarned"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["DivinationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Divination School ~ Diviner's Fortune",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_DivinersFortune"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["DivinationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Divination School ~ Scrying Adept",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ScryingAdept"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["DivinationProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Diviner;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "DivinationSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "DivinationProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Enchantment School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in enchantment spells.",
  },
  SourcePage="p.81",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Enchantment School ~ Enchanting Smile",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_EnchantingSmile"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["EnchantmentProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Enchantment School ~ Dazing Touch",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_DazingTouch"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["EnchantmentProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Enchantment School ~ Aura of Despair",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_AuraOfDespair"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["EnchantmentProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Enchanter;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "EnchantmentSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "EnchantmentProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Evocation School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in evocation spells.",
  },
  SourcePage="p.81",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evocation School ~ Intense Spells",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_IntenseSpells"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["EvocationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evocation School ~ Force Missile",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ForceMissile"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["EvocationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evocation School ~ Elemental Wall",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ElementalWall"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["EvocationProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Evoker;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "EvocationSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "EvocationProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Illusion School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in illusion spells.",
  },
  SourcePage="p.81",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Illusion School ~ Extended Illusion",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ExtendedIllusion"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["IllusionProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Illusion School ~ Blinding Ray",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_BlindingRay"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["IllusionProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Illusion School ~ Invisibility Field",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_InvisibilityField"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["IllusionProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Illusionist;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "IllusionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "IllusionProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Necromancy School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in necromancy spells.",
  },
  SourcePage="p.81",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Necromancy School ~ Power Over Undead",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_PowerOverUndead"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["NecromancyProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Necromancy School ~ Grave Touch",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_GraveTouch"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["NecromancyProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Necromancy School ~ Life Sight",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_LifeSight"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["NecromancyProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Necromancer;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "NecromancySchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "NecromancyProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Transmutation School",
  Category="Special Ability",
  Description={
    Format="You have chosen to specialize in transmutation spells.",
  },
  SourcePage="p.82",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Transmutation School ~ Physical Enhancement",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_PhysicalEnhancement"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["TransmutationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Transmutation School ~ Telekinetic Fist",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_TelekineticFist"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["TransmutationProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Transmutation School ~ Change Shape",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_ChangeShape"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["TransmutationProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("2"),
      Variables={
        "Arcane Opposition School",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=1",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=2",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=3",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=4",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=5",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=6",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=7",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=8",
      },
    },
    {
      Category="SPECIALTYSPELLKNOWN",
      Formula=Formula("1"),
      Variables={
        "CLASS=Transmuter;LEVEL=9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "TransmutationSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "TransmutationProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "DisallowWizardArcaneSchoolArchetype",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneSchool",
  },
})
DefineAbility({
  Name="Universal School",
  Category="Special Ability",
  Description={
    Format="You have chosen not to specialize in a single school of spells.",
  },
  SourcePage="p.82",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Universal School ~ Hand of the Apprentice",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_HandOfTheApprentice"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["UniversalProgressionSchoolLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Universal School ~ Metamagic Mastery",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Wizard_CF_MetamagicMastery"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["UniversalProgressionSchoolLVL"] >= 8)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolLVL"),
      Variables={
        "UniversalSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolProgressionLVL"),
      Variables={
        "UniversalProgressionSchoolLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
  },
})
DefineAbility({
  Name="Abjuration Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen abjuration spells as an opposition school. Preparing an abjuration spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an abjuration spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Abjuration School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_AbjurationOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Conjuration Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen conjuration spells as an opposition school. Preparing an conjuration spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an conjuration spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Conjuration School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_ConjurationOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Divination Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen divination spells as an opposition school. Preparing an divination spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an divination spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Divination School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_DivinationOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Enchantment Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen enchantment spells as an opposition school. Preparing an enchantment spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an enchantment spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Enchantment School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_EnchantmentOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Evocation Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen evocation spells as an opposition school. Preparing an evocation spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an evocation spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Evocation School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_EvocationOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Illusion Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen illusion spells as an opposition school. Preparing an illusion spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an illusion spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Illusion School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_IllusionOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Necromancy Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen necromancy spells as an opposition school. Preparing an necromancy spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an necromancy spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Necromancy School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_NecromancyOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Transmutation Opposition School",
  Category="Special Ability",
  Description={
    Format="You have chosen transmutation spells as an opposition school. Preparing an transmutation spell takes up two spell slots of the same level. You take a -4 penalty on any skill checks made when crafting a magic item that has an transmutation spell as a prerequisite.",
  },
  SourcePage="p.78",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-1"),
      Variables={
        "OppositionalSchool",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Transmutation School" then return true end
        return false
      end))
    end,
    function (character, item, sources)
      return (character.Variables["Wizard_CF_TransmutationOppositionSchool"] == 0)
    end,
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "ClassSpecialization",
    "ArcaneOppositionSchool",
  },
})
DefineAbility({
  Name="Wizard Spells",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Abjuration Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Abjuration Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Conjuration Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Conjuration Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Divination Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Divination Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Enchantment Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Enchantment Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Evocation Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Evocation Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Illusion Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Illusion Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Necromancy Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Necromancy Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Transmutation Wizard Spells",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Transmutation Opposition School" then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Universal Wizard Spells",
      },
    },
  },
})
DefineAbility({
  Name="Abjuration Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Resistance",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Conjuration Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Acid Splash",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Divination Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Detect Magic",
            "Detect Poison",
            "Read Magic",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Enchantment Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Daze",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Evocation Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Dancing Lights",
            "Flare",
            "Light",
            "Ray of Frost",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Illusion Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Ghost Sound",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Necromancy Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Bleed",
            "Disrupt Undead",
            "Touch of Fatigue",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Transmutation Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Mage Hand",
            "Mending",
            "Message",
            "Open/Close",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Universal Wizard Spells",
  Category="Internal",
  SpellsKnown={
    {
      Kind="Class",
      Name="Wizard",
      Levels={
        {
          SpellLevel=0,
          Spells={
            "Arcane Mark",
            "Prestidigitation",
          },
        },
      },
    },
  },
})
DefineAbility({
  Name="Resistance",
  Key="Abjuration School ~ Resistance",
  Category="Special Ability",
  Description={
    Format="You gain immunity to an energy type of your choice, chosen when you prepare spells. This immunity can be changed each day.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["AbjurationProgressionSchoolLVL"] >= 20)
      end,
    },
  },
  SourcePage="p.79",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "AbjurationResistanceBonus",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] < 20)
        end,
      },
    },
    {
      Name="Ability Benefit",
      FormatString="Immunity",
      Conditions={
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("5"),
      Variables={
        "AbjurationResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("5"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["AbjurationProgressionSchoolLVL"] >= 11)
        end,
      },
      Variables={
        "AbjurationResistanceBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Protective Ward",
  Key="Abjuration School ~ Protective Ward",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can create a 10-foot-radius field of protective magic centered on you that lasts %1 rounds. All allies in this area (including you) receive a +%2 deflection bonus to their AC. You can use this ability %3 times a day.",
    Arguments={
      Formula("AbjurationProtectiveWardDuration"),
      Formula("AbjurationProtectiveWardBonus"),
      Formula("AbjurationProtectiveWardTimes"),
    },
  },
  SourcePage="p.80",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "AbjurationProtectiveWardBonus",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AbjurationProtectiveWardTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "AbjurationProtectiveWardTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("INT"),
      Variables={
        "AbjurationProtectiveWardDuration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(AbjurationSchoolLVL/5)+1"),
      Variables={
        "AbjurationProtectiveWardBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
    "Aura",
  },
})
DefineAbility({
  Name="Energy Absorption",
  Key="Abjuration School ~ Energy Absorption",
  Category="Special Ability",
  Description={
    Format="You gain energy absorption %1 per day. Whenever you take energy damage, apply resistance and immunity first and apply the rest to this absorption, reducing your daily total by that amount. Any damage in excess of your absorption is applied to you normally.",
    Arguments={
      Formula("AbjurationEnergyAbsorption"),
    },
  },
  SourcePage="p.80",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1",
      Arguments={
        "AbjurationEnergyAbsorption",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AbjurationSchoolLVL*3"),
      Variables={
        "AbjurationEnergyAbsorption",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
  },
})
DefineAbility({
  Name="Summoner's Charm",
  Key="Conjuration School ~ Summoner's Charm",
  Category="Special Ability",
  Description={
    Format="You can change the duration of all Summon Monster spells to permanent. You can have no more than one Summon Monster spell made permanent in this way at one time. If you designate another Summon Monster spell as permanent, the previous spell immediately ends.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["ConjurationProgressionSchoolLVL"] >= 20)
      end,
    },
  },
  SourcePage="p.80",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(1,ConjurationSchoolLVL/2)"),
      Variables={
        "ConjurationSummonersCharmBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Acid Dart",
  Key="Conjuration School ~ Acid Dart",
  Category="Special Ability",
  Description={
    Format="You can use this ability %1 times per day.",
    Arguments={
      Formula("ConjurationAcidDartTimes"),
    },
  },
  SourcePage="p.80",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ConjurationAcidDartTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ConjurationSchoolLVL/2"),
      Variables={
        "ConjurationAcidDartDamageBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "ConjurationAcidDartTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Dimensional Steps",
  Key="Conjuration School ~ Dimensional Steps",
  Category="Special Ability",
  Description={
    Format="You can use this ability to teleport up to %1 feet per day as a standard action. This teleportation must be used in 5-foot increments and such movement does not provoke an attack of opportunity. You can bring other willing creatures with you, but you must expend an equal amount of distance for each creature brought with you.",
    Arguments={
      Formula("ConjurationDimensionalSteps"),
    },
  },
  SourcePage="p.80",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ConjurationDimensionalSteps/5",
      },
    },
    {
      Name="CheckType",
      FormatString="5-ft. increments",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ConjurationSchoolLVL*30"),
      Variables={
        "ConjurationDimensionalSteps",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "ArcaneSchoolPower",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Forwarned",
  Key="Divination School ~ Forwarned",
  Category="Special Ability",
  Description={
    Format="Anytime you roll initiative, assume the roll resulted in a natural 20.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["DivinationProgressionSchoolLVL"] >= 20)
      end,
    },
  },
  SourcePage="p.80",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("DivinationForwarnedBonus"),
      Variables={
        "INITIATIVE",
      },
    },
    {
      Category="VAR",
      Formula=Formula("max(1,DivinationSchoolLVL/2)"),
      Variables={
        "DivinationForwarnedBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Diviner's Fortune",
  Key="Divination School ~ Diviner's Fortune",
  Category="Special Ability",
  Description={
    Format="When you activate this school power, you can touch any creature as a standard action to give it an insight bonus on all of its attack rolls, skill checks, ability checks, and saving throws equal to %1 for one round. You can use this ability %2 times per day.",
    Arguments={
      Formula("DivinationDivinersFortuneBonus"),
      Formula("DivinationDivinersFortuneTimes"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DivinationDivinersFortuneTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(1,DivinationSchoolLVL/2)"),
      Variables={
        "DivinationDivinersFortuneBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "DivinationDivinersFortuneTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Scrying Adept",
  Key="Divination School ~ Scrying Adept",
  Category="Special Ability",
  Description={
    Format="You are always aware when you are being observed via magic, as if you had a permanent Detect Scrying. In addition, whenever you scry on a subject, treat the subject as one step more familiar to you. Very familiar subjects get a -10 penalty on their save to avoid your scrying attempts.",
  },
  SourcePage="p.81",
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "Sense",
  },
})
DefineAbility({
  Name="Enchanting Smile",
  Key="Enchantment School ~ Enchanting Smile",
  Category="Special Ability",
  Description={
    Format="Whenever you succeed at a saving throw against a spell of the enchantment school, that spell is reflected back at its caster, as per Spell Turning.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["EnchantmentProgressionSchoolLVL"] >= 20)
      end,
    },
  },
  SourcePage="p.81",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("EnchantmentEnchantingSmileBonus"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "Bluff",
        "Diplomacy",
        "Intimidate",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(6,EnchantmentSchoolLVL/5+2)"),
      Variables={
        "EnchantmentEnchantingSmileBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Dazing Touch",
  Key="Enchantment School ~ Dazing Touch",
  Category="Special Ability",
  Description={
    Format="You can cause a living creature to become dazed for 1 round as a melee touch attack. Creatures with more than %1 hit dice are unaffected. You may use this ability %2 times per day.",
    Arguments={
      Formula("EnchantmentDazingTouchLimit"),
      Formula("EnchantmentDazingTouchTimes"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "EnchantmentDazingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("EnchantmentSchoolLVL"),
      Variables={
        "EnchantmentDazingTouchLimit",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "EnchantmentDazingTouchTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Aura of Despair",
  Key="Enchantment School ~ Aura of Despair",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of despair for %1 rounds per day. Enemies within this aura take a -2 penalty on ability checks, attack rolls, damage rolls, saving throws, and skill checks. These rounds do not need to be consecutive. This is a mind-affecting effect.",
    Arguments={
      Formula("EnchantmentSchoolLVL"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "EnchantmentAuraOfDespairRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("EnchantmentSchoolLVL"),
      Variables={
        "EnchantmentAuraOfDespairRounds",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "Aura",
  },
})
DefineAbility({
  Name="Intense Spells",
  Key="Evocation School ~ Intense Spells",
  Category="Special Ability",
  Description={
    Format="Whenever you cast an evocation spell you can roll twice to penetrate a creature's spell resistance and take the better result.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["EvocationProgressionSchoolLVL"] >= 20)
      end,
    },
  },
  SourcePage="p.81",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(1,EvocationSchoolLVL/2)"),
      Variables={
        "EvocationIntenseSpellsBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
    "AttackOption",
  },
})
DefineAbility({
  Name="Force Missile",
  Key="Evocation School ~ Force Missile",
  Category="Special Ability",
  Description={
    Format="As a standard action you can unleash a force missile that automatically strikes a foe, as Magic Missile. The force missile deals 1d4+%1 points of damage. This is a force effect. You can use this ability %2 times per day.",
    Arguments={
      Formula("EvocationIntenseSpellsBonus"),
      Formula("EvocationForceMissileTimes"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(1d4+%1, %2/day)",
      Arguments={
        "max(1,EvocationSchoolLVL/2)",
        "EvocationForceMissileTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "EvocationForceMissileTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+INT"),
      Variables={
        "EvocationForceMissileTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Elemental Wall",
  Key="Evocation School ~ Elemental Wall",
  Category="Special Ability",
  Description={
    Format="You can create a wall of energy that lasts for %1 rounds per day. These rounds do not need to be consecutive. This wall deals acid, cold, electricity, or fire damage, determined when you create it. The elemental wall otherwise functions like Wall of Fire.",
    Arguments={
      Formula("EvocationElementalWallRounds"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "EvocationElementalWallRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("EvocationSchoolLVL"),
      Variables={
        "EvocationElementalWallRounds",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
  },
})
DefineAbility({
  Name="Extended Illusion",
  Key="Illusion School ~ Extended Illusion",
  Category="Special Ability",
  Description={
    Format="You can make one illusion spell with a duration of \"Concentration\" become permanent. You can have no more than one illusion made permanent in this way at one time. If you designate another illusion as permanent, the previous permanent illusion ends.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["IllusionProgressionSchoolLVL"] >= 20)
      end,
    },
  },
  SourcePage="p.81",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(1,IllusionSchoolLVL/2)"),
      Variables={
        "IllusionExtendedIllusionBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Blinding Ray",
  Key="Illusion School ~ Blinding Ray",
  Category="Special Ability",
  Description={
    Format="As a standard action you can fire a shimmering ray at any foe within 30 feet as a ranged touch attack. The ray causes creatures to be blinded for 1 round. Creatures with more than %1 Hit Dice are dazzled for 1 round instead. This ability can be used %2 times per day.",
    Arguments={
      Formula("IllusionBlindingRayLimit"),
      Formula("IllusionBlindingRayTimes"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "IllusionBlindingRayTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("IllusionSchoolLVL"),
      Variables={
        "IllusionBlindingRayLimit",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "IllusionBlindingRayTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Invisibility Field",
  Key="Illusion School ~ Invisibility Field",
  Category="Special Ability",
  Description={
    Format="You can make yourself invisible as a swift action for %1 rounds per day. These rounds do not need to be consecutive. This otherwise functions as Greater Invisibility.",
    Arguments={
      Formula("IllusionInvisibilityFieldRounds"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "IllusionInvisibilityFieldRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("IllusionSchoolLVL"),
      Variables={
        "IllusionInvisibilityFieldRounds",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "ArcaneSchoolPower",
    "Aura",
  },
})
DefineAbility({
  Name="Power Over Undead",
  Key="Necromancy School ~ Power Over Undead",
  Category="Special Ability",
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "PowerOverUndeadTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Necromancer Channeling",
      },
    },
    {
      Category="VAR",
      Formula=Formula("3+INT"),
      Variables={
        "PowerOverUndeadTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("NecromancySchoolLVL"),
      Variables={
        "PowerOverUndeadLVL",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Grave Touch",
  Key="Necromancy School ~ Grave Touch",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can make a melee touch attack that causes a living creature to become shaken for %1 rounds. If you touch a shaken creature with this ability, it becomes frightened for 1 round if it has fewer that %2 Hit Dice. You can use this ability %3 times per day.",
    Arguments={
      Formula("NecromancyGraveTouchDuration"),
      Formula("NecromancyGraveTouchLimit"),
      Formula("NecromancyGraveTouchTimes"),
    },
  },
  SourcePage="p.81",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "NecromancyGraveTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("max(1,NecromancySchoolLVL/2)"),
      Variables={
        "NecromancyGraveTouchDuration",
      },
    },
    {
      Category="VAR",
      Formula=Formula("NecromancySchoolLVL"),
      Variables={
        "NecromancyGraveTouchLimit",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "NecromancyGraveTouchTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Life Sight",
  Key="Necromancy School ~ Life Sight",
  Category="Special Ability",
  Description={
    Format="You gain blindsight to a range of %1 feet for %2 rounds per day. This ability only allows you to detect living creatures and undead creatures. This sight also tells you whether a creature is living or undead. These rounds do not need to be consecutive.",
    Arguments={
      Formula("NecromancyLifeSightRange"),
      Formula("NecromancyLifeSightRounds"),
    },
  },
  SourcePage="p.82",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "NecromancyLifeSightRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+10*((NecromancySchoolLVL-8)/4)"),
      Variables={
        "NecromancyLifeSightRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("NecromancySchoolLVL"),
      Variables={
        "NecromancyLifeSightRounds",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "Sense",
  },
})
DefineAbility({
  Name="Power Over Undead ~ Command Undead",
  Category="Special Ability",
  Description={
    Format="Undead cannot add their channel resistance to the save against your Command Undead ability.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["PowerOverUndeadLVL"] >= 20)
      end,
    },
  },
  ServesAs={
    Ability="Special Ability",
    Names={
      "Channel Negative Energy",
    },
  },
  SourcePage="p.81",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Command Undead",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+PowerOverUndeadLVL/2+CHA"),
      Variables={
        "PowerOverUndeadCommandDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PowerOverUndeadLVL"),
      Variables={
        "PowerOverUndeadCommandHD",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "NecromancerChanneling",
  },
})
DefineAbility({
  Name="Power Over Undead ~ Turn Undead",
  Category="Special Ability",
  Description={
    Format="Undead cannot add their channel resistance to the save against your Turn ability.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["PowerOverUndeadLVL"] >= 20)
      end,
    },
  },
  ServesAs={
    Ability="Special Ability",
    Names={
      "Channel Positive Energy",
    },
  },
  SourcePage="p.81",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Turn Undead",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+PowerOverUndeadLVL/2+CHA"),
      Variables={
        "PowerOverUndeadTurnDC",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "NecromancerChanneling",
  },
})
DefineAbility({
  Name="Physical Enhancement",
  Key="Transmutation School ~ Physical Enhancement",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 enhancement bonus to two physical ability scores (Strength, Dexterity, or Constitution). You can change this bonus to new ability scores when you prepare spells.",
    Arguments={
      Formula("TransmutationPhysicalEnhancementBonus"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["TransmutationProgressionSchoolLVL"] == 20)
      end,
    },
  },
  SourcePage="p.82",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Physical Enhancement ~ Constitution",
        "Physical Enhancement ~ Dexterity",
        "Physical Enhancement ~ Strength",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "TransmutationPhysicalEnhancementProgression",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["TransmutationProgressionSchoolLVL"] >= 20)
        end,
      },
      Variables={
        "TransmutationPhysicalEnhancementProgression",
      },
    },
    {
      Category="VAR",
      Formula=Formula("min(5,(TransmutationSchoolLVL/5)+1)"),
      Variables={
        "TransmutationPhysicalEnhancementBonus",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Physical Enhancement ~ Strength",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="STAT",
      Formula=Formula("TransmutationPhysicalEnhancementBonus"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "STR",
      },
    },
    Target="PC",
  },
  TemporaryBonusDescription={
    Format="You gain an enhancement bonus to Strength. You can change this bonus to a new ability score when you prepare spells.",
  },
  Visible=false,
})
DefineAbility({
  Name="Physical Enhancement ~ Dexterity",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="STAT",
      Formula=Formula("TransmutationPhysicalEnhancementBonus"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "DEX",
      },
    },
    Target="PC",
  },
  TemporaryBonusDescription={
    Format="You gain an enhancement bonus to Dexterity. You can change this bonus to a new ability score when you prepare spells.",
  },
  Visible=false,
})
DefineAbility({
  Name="Physical Enhancement ~ Constitution",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="STAT",
      Formula=Formula("TransmutationPhysicalEnhancementBonus"),
      Type={
        Name="Enhancement",
      },
      Variables={
        "CON",
      },
    },
    Target="PC",
  },
  TemporaryBonusDescription={
    Format="You gain an enhancement bonus to Constitution. You can change this bonus to a new ability score when you prepare spells.",
  },
  Visible=false,
})
DefineAbility({
  Name="Telekinetic Fist",
  Key="Transmutation School ~ Telekinetic Fist",
  Category="Special Ability",
  Description={
    Format="You can use this ability %1 times per day.",
    Arguments={
      Formula("TransmutationTelekineticFistTimes"),
    },
  },
  SourcePage="p.82",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="1d4+%1",
      Arguments={
        "TransmutationTelekineticFistBonus",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TransmutationTelekineticFistTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("TransmutationSchoolLVL/2"),
      Variables={
        "TransmutationTelekineticFistBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "TransmutationTelekineticFistTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "ArcaneSchoolPower",
    "ArcaneSchoolPowerLVL1",
  },
})
DefineAbility({
  Name="Change Shape",
  Key="Transmutation School ~ Change Shape",
  Category="Special Ability",
  Description={
    Format="This ability otherwise functions like Beast Shape III or elemental body II.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["TransmutationProgressionSchoolLVL"] >= 12)
      end,
    },
  },
  SourcePage="p.82",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TransmutationChangeShapeRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("TransmutationSchoolLVL"),
      Variables={
        "TransmutationChangeShapeRounds",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "ArcaneSchoolPower",
  },
})
DefineAbility({
  Name="Hand of the Apprentice",
  Key="Universal School ~ Hand of the Apprentice",
  Category="Special Ability",
  Description={
    Format="You can cause your melee weapon to fly from your grasp and strike a foe before instantly returning to you. As a standard action, you can make a single attack using a melee weapon at a range of 30 feet. This attack is treated as a ranged attack with a thrown weapon, except that you add your Intelligence modifier on the attack roll instead of your Dexterity modifier (damage still relies on Strength). This ability cannot be used to perform a combat maneuver. You can use this ability %1 times per day.",
    Arguments={
      Formula("UniversalHandOfTheApprenticeTimes"),
    },
  },
  SourcePage="p.82",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "UniversalHandOfTheApprenticeTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneSchoolPowerTimes"),
      Variables={
        "UniversalHandOfTheApprenticeTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "ArcaneSchoolPower",
  },
})
DefineAbility({
  Name="Metamagic Mastery",
  Key="Universal School ~ Metamagic Mastery",
  Category="Special Ability",
  Description={
    Format="You can apply any one metamagic feat that you know to a spell you are about to cast. This does not alter the level of the spell or the casting time. You can use this ability %1 per day. Any time you use this ability to apply a metamagic feat that increases the spell level by more than 1, you must use an additional daily usage for each level above 1 that the feat adds to the spell. Even though this ability does not modify the spell's actual level, you cannot use this ability to cast a spell whose modified spell level would be above the level of the highest-level spell that you are capable of casting.",
    Arguments={
      Formula("UniversalMetamagicMasteryTimes"),
    },
  },
  SourcePage="p.82",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "UniversalMetamagicMasteryTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(UniversalSchoolLVL-8)/2+1"),
      Variables={
        "UniversalMetamagicMasteryTimes",
      },
    },
  },
  Types={
    "WizardClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "ArcaneSchoolPower",
  },
})
ModifyAbility({
  Name="Abjuration School ~ Resistance",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Abjuration School ~ Protective Ward",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Conjuration School ~ Summoner's Charm",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Conjuration School ~ Acid Dart",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Divination School ~ Forwarned",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Divination School ~ Diviner's Fortune",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Enchantment School ~ Enchanting Smile",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Enchantment School ~ Dazing Touch",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Evocation School ~ Intense Spells",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Evocation School ~ Force Missile",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Illusion School ~ Extended Illusion",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Illusion School ~ Blinding Ray",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Necromancy School ~ Power Over Undead",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Necromancy School ~ Grave Touch",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Transmutation School ~ Physical Enhancement",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Transmutation School ~ Telekinetic Fist",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Universal School ~ Hand of the Apprentice",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower1"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Abjuration School ~ Energy Absorption",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Conjuration School ~ Dimensional Steps",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Divination School ~ Scrying Adept",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Enchantment School ~ Aura of Despair",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Evocation School ~ Elemental Wall",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Illusion School ~ Invisibility Field",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Necromancy School ~ Life Sight",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Transmutation School ~ Change Shape",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
ModifyAbility({
  Name="Universal School ~ Metamagic Mastery",
  Category="Special Ability",
  Conditions={
    function (character, item, sources)
      return (character.Variables["Wizard_CF_SchoolPower8"] < 1)
    end,
  },
})
DefineAbility({
  Name="Companion ~ Animal Companion",
  Category="Internal",
  Followers={
    ['Animal Companion']=1,
  },
})
DefineAbility({
  Name="Companion ~ Special Mount",
  Category="Internal",
  Followers={
    ['Special Mount']=1,
  },
})
DefineAbility({
  Name="Expert Class Skills",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSkill(function (character, skill)
      return ((true))
    end),
  },
  SourcePage="p.450",
  Stackable=false,
  Visible=true,
  ClassSkills={
    "LIST",
  },
  Types={
    "ExpertClassSkills",
  },
})
DefineAbility({
  Name="Single Simple Weapon Proficiency",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseWeaponProficiency(function (character, weapon)
      return ((not (character.IsProficientWith(weapon)) and (((weapon.IsType("Simple"))))))
    end),
  },
  Description={
    Format="You understand how to use %1",
    Arguments={
      Formula("%LIST"),
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "%LIST",
      },
    },
  },
  Types={
    "SingleSimpleWeaponProficiency",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Martial Weapon Proficiency",
  Key="Martial Weapon Proficiency Output",
  Category="FEAT",
  Description={
    Format="You make attack rolls with all your martial weapons normally (without the non-proficient penalty).",
  },
  SourcePage="p.130",
  Visible=true,
})
DefineAbility({
  Name="Wizard / Remove Scribe Scroll",
  Category="Archetype",
  Cost=0,
  Types={
    "ACF",
  },
  Facts={
    Wizard_CF_ScribeScroll="True",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Archetype Display",
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Equipment ~ Heavy Armor Grants Gauntlet",
      },
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("ArmorProfHeavy") end))
        end,
      },
    },
  },
})
DefineAbility({
  Name="Equipment ~ Heavy Armor Grants Gauntlet",
  Category="Internal",
  AutomaticEquipment={
    {
      Names={
        "Gauntlet (Part of Armor Suit)",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "GauntletOS",
      },
    },
    {
      Category="VAR",
      Formula=Formula("GauntletOS"),
      Variables={
        "UnarmedLethal",
      },
    },
  },
})
DefineAbility({
  Name="Archetype Display",
  Category="Internal",
  Visible=false,
})
DefineAbility({
  Name="Archetype Barbarian",
  Category="Archetype",
  Visible=false,
  Types={
    "BarbarianArchetype",
  },
})
DefineAbility({
  Name="Archetype Bard",
  Category="Archetype",
  Visible=false,
  Types={
    "BardArchetype",
  },
})
DefineAbility({
  Name="Archetype Druid",
  Category="Archetype",
  Visible=false,
  Types={
    "DruidArchetype",
  },
})
DefineAbility({
  Name="Archetype Fighter",
  Category="Archetype",
  Visible=false,
  Types={
    "FighterArchetype",
  },
})
DefineAbility({
  Name="Archetype Monk",
  Category="Archetype",
  Visible=false,
  Types={
    "MonkArchetype",
  },
})
DefineAbility({
  Name="Archetype Paladin",
  Category="Archetype",
  Visible=false,
  Types={
    "PaladinArchetype",
  },
})
DefineAbility({
  Name="Archetype Ranger",
  Category="Archetype",
  Visible=false,
  Types={
    "RangerArchetype",
  },
})
DefineAbility({
  Name="Archetype Rogue",
  Category="Archetype",
  Visible=false,
  Types={
    "RogueArchetype",
  },
})
DefineAbility({
  Name="Archetype Wizard",
  Category="Archetype",
  Visible=false,
  Types={
    "WizardArchetype",
  },
})
DefineAbility({
  Name="Archetype Sorcerer",
  Category="Archetype",
  Visible=false,
  Types={
    "Sorcerer Archetype",
  },
})
DefineAbility({
  Name="Archetype Cleric",
  Category="Archetype",
  Visible=false,
  Types={
    "ClericArchetype",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Natural Attack",
      Nature="AUTOMATIC",
      Names={
        "Touch Attack (Ray)",
      },
      Conditions={
        function (character, item, sources)
          return ((character.CountSpellCastingClasses(1))) >= 1 or (character.Variables["CasterLevel_Highest"] >= 1)
        end,
        function (character, item, sources)
          return (character.SpellCount("Ray", 1)) >= 1
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
      },
      Conditions={
        function (character, item, sources)
          return ((character.CountSpellCastingClasses(1, "PC"))) >= 1
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Uncanny Dodge ~ Base",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UncannyDodgeLVL"] >= 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Touch Attack (Ray)",
  Category="Natural Attack",
  Cost=0,
  Aspects={
    {
      Name="NaturalAttackName",
      FormatString="Touch Attack (Ray)",
    },
    {
      Name="NaturalAttackToHit",
      FormatString="+%1",
      Arguments={
        "RayAttackBonus",
      },
    },
    {
      Name="NaturalAttackRange",
      FormatString="As Spell",
    },
    {
      Name="NaturalAttackType",
      FormatString="Ray",
    },
    {
      Name="NaturalAttackThreatRange",
      FormatString="%1",
      Arguments={
        "RayThreatRange",
      },
    },
    {
      Name="NaturalAttackDamage",
      FormatString="As Spell",
    },
    {
      Name="NaturalAttackCritMult",
      FormatString="/x%1",
      Arguments={
        "RayCritMult",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Spells (Ray)",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "RayCritMult",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "RayAttackRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Weapon Focus (Spells (Ray))" then return true end
            return false
          end)
        end,
      },
      Variables={
        "RayAttackBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Variables={
        "RayThreatRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Improved Critical (Spells (Ray))" then return true end
            return false
          end)
        end,
      },
      Variables={
        "RayThreatRange",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BAB+DEX+AttackBonusSize"),
      Variables={
        "RayAttackBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Conditions={
        function (character, item, sources)
          return character.Size == "F"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Conditions={
        function (character, item, sources)
          return character.Size == "D"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return character.Size == "T"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.Size == "S"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("0"),
      Conditions={
        function (character, item, sources)
          return character.Size == "M"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return character.Size == "L"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return character.Size == "H"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-4"),
      Conditions={
        function (character, item, sources)
          return character.Size == "G"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-8"),
      Conditions={
        function (character, item, sources)
          return character.Size == "C"
        end,
      },
      Variables={
        "AttackBonusSize",
      },
    },
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="Blank Weapon Block OS",
  Category="Natural Attack",
  Description={
    Format="Special Properties",
  },
  Aspects={
    {
      Name="NaturalAttackRangeIncrement",
      FormatString="10",
    },
    {
      Name="NaturalAttackCritMult",
      FormatString=" /",
    },
  },
  Types={
    "NaturalAttack",
  },
})
DefineAbility({
  Name="All Automatic Proficiencies",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "CMB Output",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Unarmed Strike",
        "Spells (Ray)",
        "Spells (Touch)",
      },
    },
  },
  Types={
    "Special",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="All Martial Weapon Proficiencies",
  Category="Special Ability",
  ServesAs={
    Ability="Feat",
    Names={
      "Martial Weapon Proficiency",
    },
  },
  Visible=false,
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Types={
        "Martial",
      },
    },
  },
  Types={
    "Special",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Bard Weapon Proficiencies",
  Category="Special Ability",
  Visible=false,
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BardWeaponProficiencies") then return true end
            return false
          end))
        end,
      },
      Names={
        "Longsword",
        "Rapier",
        "Sap",
        "Sword (Short)",
        "Shortbow",
        "Whip",
      },
    },
  },
  Types={
    "Special",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Weapon Proficiencies ~ Bard",
  Category="Internal",
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Longsword",
        "Rapier",
        "Sap",
        "Sword (Short)",
        "Shortbow",
        "Whip",
      },
      Types={
        "Auto",
      },
    },
  },
})
DefineAbility({
  Name="Weapon Proficiencies ~ Cleric",
  Category="Internal",
  AutomaticProficiencies={
    {
      DeityWeapons=true,
      Kind="Weapon",
    },
  },
})
DefineAbility({
  Name="Weapon Proficiencies ~ Druid",
  Category="Internal",
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Club",
        "Dagger",
        "Dart",
        "Quarterstaff",
        "Scimitar",
        "Scythe",
        "Sickle",
        "Shortspear",
        "Sling",
        "Spear",
      },
      Types={
        "Auto",
      },
    },
  },
})
DefineAbility({
  Name="Weapon Proficiencies ~ Monk",
  Category="Internal",
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Club",
        "Crossbow (Light)",
        "Crossbow (Heavy)",
        "Dagger",
        "Handaxe",
        "Javelin",
        "Kama",
        "Nunchaku",
        "Quarterstaff",
        "Sai",
        "Shortspear",
        "Sword (Short)",
        "Shuriken",
        "Siangham",
        "Sling",
        "Spear",
        "Flurry of Blows",
      },
      Types={
        "Auto",
      },
    },
  },
})
DefineAbility({
  Name="Weapon Proficiencies ~ Rogue",
  Category="Internal",
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Crossbow (Hand)",
        "Rapier",
        "Sap",
        "Shortbow",
        "Sword (Short)",
      },
      Types={
        "Auto",
      },
    },
  },
})
DefineAbility({
  Name="Weapon Prof ~ Auto",
  Category="Internal",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "CMB Output",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Types={
        "Auto",
      },
    },
  },
  Types={
    "WeaponProfAuto",
    "WeaponProfSimple",
    "WeaponProfMartial",
  },
})
DefineAbility({
  Name="Weapon Prof ~ Simple",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Simple Weapon Proficiency",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Types={
        "Simple",
      },
    },
  },
  Types={
    "WeaponProfSimple",
    "WeaponProfMartial",
  },
})
DefineAbility({
  Name="Weapon Prof ~ Martial",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Martial Weapon Proficiency",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Types={
        "Martial",
      },
    },
  },
  Types={
    "WeaponProfMartial",
  },
})
DefineAbility({
  Name="Armor Prof ~ Light",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Armor Proficiency (Light)",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Armor",
      Types={
        "ArmorProfLight",
      },
    },
  },
  Types={
    "ArmorProfLight",
    "ArmorProfMedium",
    "ArmorProfHeavy",
  },
})
DefineAbility({
  Name="Armor Prof ~ Medium",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Armor Proficiency (Medium)",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Armor",
      Types={
        "ArmorProfMedium",
      },
    },
  },
  Types={
    "ArmorProfMedium",
    "ArmorProfHeavy",
  },
})
DefineAbility({
  Name="Armor Prof ~ Heavy",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Armor Proficiency (Heavy)",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Armor",
      Types={
        "ArmorProfHeavy",
      },
    },
  },
  Types={
    "ArmorProfHeavy",
  },
})
DefineAbility({
  Name="Shield Prof ~ Tower",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Tower Shield Proficiency",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Shield",
      Types={
        "Tower",
      },
    },
  },
  Types={
    "ShieldProfTower",
  },
})
DefineAbility({
  Name="Shield Prof",
  Category="Internal",
  ServesAs={
    Ability="Feat",
    Names={
      "Shield Proficiency",
    },
  },
  AutomaticProficiencies={
    {
      Kind="Shield",
      Names={
        "Buckler",
        "Shield (Heavy)",
        "Shield (Light)",
      },
      Types={
        "Buckler",
        "Heavy",
        "Light",
      },
    },
  },
  Types={
    "ShieldProfTower",
    "ShieldProf",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Bard",
  Category="Special Ability",
  Description={
    Format="A bard is proficient with all simple weapons, plus the longsword, rapier, sap, short sword, shortbow, and whip. Bards are proficient with light armor and shields (except tower shields). A bard can cast bard spells while wearing light armor without incurring the normal arcane spell failure chance. However, like any other arcane spellcaster, a bard wearing medium or heavy armor or using a shield incurs a chance of arcane spell failure if the spell in question has a somatic component (most do). A multiclass bard still incurs the normal arcane spell failure chance for arcane spells received from other classes.",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
        "Weapon Prof ~ Simple",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
        "Shield Prof",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BardArmorProficiencies") then return true end
            return false
          end))
        end,
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BardWeaponProficiencies") then return true end
            return false
          end))
        end,
      },
      Names={
        "Longsword",
        "Rapier",
        "Sap",
        "Sword (Short)",
        "Shortbow",
        "Whip",
      },
    },
  },
  Types={
    "BardClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Druid",
  Category="Special Ability",
  Description={
    Format="Druids are proficient with the following weapons: club, dagger, dart, quarterstaff, scimitar, sickle, shortspear, sling, and spear. They are also proficient with all natural attacks (claw, bite, and so forth) of any form they assume with wild shape (see below). Druids are proficient with light and medium armor but are prohibited from wearing metal armor; thus, they may wear only padded, leather, or hide armor. (A druid may also wear wooden armor that has been altered by the ironwood spell so that it functions as though it were steel. See the ironwood spell description) Druids are proficient with shields (except tower shields) but must use only wooden ones. A druid who wears prohibited armor or carries a prohibited shield is unable to cast druid spells or use any of her supernatural or spell-like class abilities while doing so and for 24 hours thereafter.",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Types={
        "ArmorProfMedium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("DruidArmorProficiencies") then return true end
            return false
          end))
        end,
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Club",
        "Dagger",
        "Dart",
        "Quarterstaff",
        "Scimitar",
        "Scythe",
        "Sickle",
        "Shortspear",
        "Sling",
        "Spear",
      },
    },
  },
  Types={
    "DruidClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Fighter",
  Category="Special Ability",
  Description={
    Format="A fighter is proficient with all simple and martial weapons and with all armor (heavy, medium, and light) and shields (including tower shields).",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
        "Weapon Prof ~ Simple",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Heavy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_HeavyArmorProficiency"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Medium",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_MediumArmorProficiency"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_LightArmorProficiency"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_ShieldProficiency"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof ~ Tower",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_TowerShieldProficiency"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Fighter_CF_Proficiencies"] == 0)
        end,
      },
    },
  },
  Types={
    "FighterClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Monk",
  Category="Special Ability",
  Description={
    Format="Monks are proficient with club, crossbow (light or heavy), dagger, handaxe, javelin, kama, nunchaku, quarterstaff, sai, shuriken, siangham, and sling. Monks are not proficient with any armor or shields When wearing armor, using a shield, or carrying a medium or heavy load, a monk loses her AC bonus, as well as her fast movement and flurry of blows abilities.",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Club",
        "Crossbow (Light)",
        "Crossbow (Heavy)",
        "Dagger",
        "Handaxe",
        "Javelin",
        "Kama",
        "Nunchaku",
        "Quarterstaff",
        "Sai",
        "Shortspear",
        "Sword (Short)",
        "Shuriken",
        "Siangham",
        "Sling",
        "Spear",
        "Flurry of Blows",
      },
      Types={
        "Monk",
      },
    },
  },
  Types={
    "MonkClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Paladin",
  Category="Special Ability",
  Description={
    Format="Paladins are proficient with all simple and martial weapons, with all types of armor (heavy, medium, and light), and with shields (except tower shields).",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Simple",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_WeaponProficiencySimple"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_WeaponProficiencyMartial"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Heavy",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_ArmorProficiencyHeavy"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_ArmorProficiencyLight"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Medium",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_ArmorProficiencyMedium"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Paladin_CF_ShieldProficiency"] == 0)
        end,
      },
    },
  },
  Types={
    "PaladinClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Ranger",
  Category="Special Ability",
  Description={
    Format="A ranger is proficient with all simple and martial weapons and with light armor, medium armor, and shields (except tower shields).",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
        "Weapon Prof ~ Simple",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerArmorProficiencies", "RangerWeaponProficiency") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerArmorProficiencies", "RangerLightArmorProficiency") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Medium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerArmorProficiencies", "RangerMediumArmorProficiency") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RangerArmorProficiencies", "RangerShieldProficiency") then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "RangerClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Rogue",
  Category="Special Ability",
  Description={
    Format="Rogues are proficient with all simple weapons, plus the hand crossbow, rapier, sap, shortbow, and short sword. Rogues are proficient with light armor, but not with shields.",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Auto",
        "Weapon Prof ~ Simple",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Proficiencies ~ Rogue",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueWeaponProficiencies") then return true end
            return false
          end)) and (character.Variables["Rogue_CF_WeaponProficiencies"] == 0)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Armor Prof ~ Light",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("RogueLightArmor", "RogueArmorProficiencies") then return true end
            return false
          end)) and (character.Variables["Rogue_CF_ArmorProficiencies"] == 0)
        end,
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Crossbow (Hand)",
        "Rapier",
        "Sap",
        "Shortbow",
        "Sword (Short)",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Adept",
  Category="Special Ability",
  Description={
    Format="Adepts are skilled with all simple weapons. Adepts are not proficient with any type of armor nor with shields.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Aristocrat",
  Category="Special Ability",
  Description={
    Format="The aristocrat is proficient in the use of all simple and martial weapons and with all types of armor and shields.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Commoner",
  Category="Special Ability",
  Description={
    Format="The commoner is proficient with one simple weapon. He is not proficient with any other weapons, nor is he proficient with any type of armor or shields.",
  },
  Visible=true,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "Simple Weapon Proficiency Choice",
      },
    },
  },
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Expert",
  Category="Special Ability",
  Description={
    Format="The expert is proficient in the use of all simple weapons and with light armor but not shields.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Warrior",
  Category="Special Ability",
  Description={
    Format="The warrior is proficient in the use of all simple and martial weapons and all armor and shields.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Barbarian Core Class Skills",
  Key="Class Skills ~ Barbarian",
  Category="Internal",
  ClassSkills={
    "Acrobatics",
    "Climb",
    "TYPE=Craft",
    "Handle Animal",
    "Intimidate",
    "Knowledge (Nature)",
    "Perception",
    "Ride",
    "Survival",
    "Swim",
  },
})
DefineAbility({
  Name="Bard Core Class Skills",
  Key="Class Skills ~ Bard",
  Category="Internal",
  ClassSkills={
    "Acrobatics",
    "Appraise",
    "Bluff",
    "Climb",
    "TYPE=Craft",
    "Diplomacy",
    "Disguise",
    "Escape Artist",
    "Intimidate",
    "TYPE=Knowledge",
    "Linguistics",
    "Perception",
    "TYPE=Perform",
    "TYPE=Profession",
    "Sense Motive",
    "Sleight of Hand",
    "Spellcraft",
    "Stealth",
    "Use Magic Device",
  },
})
DefineAbility({
  Name="Cleric Core Class Skills",
  Key="Class Skills ~ Cleric",
  Category="Internal",
  ClassSkills={
    "Appraise",
    "TYPE=Craft",
    "Diplomacy",
    "Heal",
    "Knowledge (Arcana)",
    "Knowledge (History)",
    "Knowledge (Nobility)",
    "Knowledge (Planes)",
    "Knowledge (Religion)",
    "Linguistics",
    "TYPE=Profession",
    "Sense Motive",
    "Spellcraft",
  },
})
DefineAbility({
  Name="Druid Core Class Skills",
  Key="Class Skills ~ Druid",
  Category="Internal",
  ClassSkills={
    "Climb",
    "TYPE=Craft",
    "Fly",
    "Handle Animal",
    "Heal",
    "Knowledge (Geography)",
    "Knowledge (Nature)",
    "Perception",
    "TYPE=Profession",
    "Ride",
    "Spellcraft",
    "Survival",
    "Swim",
  },
})
DefineAbility({
  Name="Fighter Core Class Skills",
  Key="Class Skills ~ Fighter",
  Category="Internal",
  ClassSkills={
    "Climb",
    "TYPE=Craft",
    "Handle Animal",
    "Intimidate",
    "Knowledge (Dungeoneering)",
    "Knowledge (Engineering)",
    "TYPE=Profession",
    "Ride",
    "Survival",
    "Swim",
  },
})
DefineAbility({
  Name="Paladin Core Class Skills",
  Key="Class Skills ~ Paladin",
  Category="Internal",
  ClassSkills={
    "TYPE=Craft",
    "Diplomacy",
    "Handle Animal",
    "Heal",
    "Knowledge (Nobility)",
    "Knowledge (Religion)",
    "TYPE=Profession",
    "Ride",
    "Sense Motive",
    "Spellcraft",
  },
})
DefineAbility({
  Name="Ranger Core Class Skills",
  Key="Class Skills ~ Ranger",
  Category="Internal",
  ClassSkills={
    "Climb",
    "TYPE=Craft",
    "Handle Animal",
    "Heal",
    "Intimidate",
    "Knowledge (Dungeoneering)",
    "Knowledge (Geography)",
    "Knowledge (Nature)",
    "Perception",
    "TYPE=Profession",
    "Ride",
    "Spellcraft",
    "Stealth",
    "Survival",
    "Swim",
  },
})
DefineAbility({
  Name="Rogue Core Class Skills",
  Key="Class Skills ~ Rogue",
  Category="Internal",
  ClassSkills={
    "Acrobatics",
    "Appraise",
    "Bluff",
    "Climb",
    "TYPE=Craft",
    "Diplomacy",
    "Disable Device",
    "Disguise",
    "Escape Artist",
    "Intimidate",
    "Knowledge (Dungeoneering)",
    "Knowledge (Local)",
    "Linguistics",
    "Perception",
    "TYPE=Perform",
    "TYPE=Profession",
    "Sense Motive",
    "Sleight of Hand",
    "Stealth",
    "Swim",
    "Use Magic Device",
  },
})
DefineAbility({
  Name="Uncanny Dodge ~ Base",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Retain Dex To AC ~ Flat-footed",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UncannyDodgeLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Uncanny Dodge",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UncannyDodgeLVL"] >= 1)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Improved Uncanny Dodge",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["UncannyDodgeLVL"] >= 2)
        end,
      },
    },
  },
  Types={
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Retain Dex To AC ~ Flat-footed",
  Category="Special Ability",
  Description={
    Format="You retain your Dexterity bonus to AC even when flat-footed",
  },
  Visible=false,
  Types={
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Uncanny Dodge",
  Category="Special Ability",
  Description={
    Format="You can react to danger before your senses would normally allow you to do so. You cannot be caught flat-footed, nor do you lose your Dexterity bonus to AC if the attacker is invisible. You still lose your Dexterity bonus to AC if immobilized. You can still lose your Dexterity bonus to AC if an opponent successfully uses the feint action against you.",
  },
  Visible=true,
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Improved Uncanny Dodge",
  Category="Special Ability",
  Description={
    Format="You can no longer be flanked. This defense denies a rogue the ability to sneak attack you by flanking you, unless the attacker is a rogue of at least level %1.",
    Arguments={
      Formula("UncannyDodgeFlankingLevel"),
    },
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Type={
        Name="OnceOnly",
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Evasion",
  Category="Special Ability",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Evasion Output",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Special Ability" then return false end
            if ability.Name == "Improved Evasion" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "Internal",
    "ClassFeatures",
    "RangerClassFeatures",
    "RogueClassFeatures",
    "MonkClassFeatures",
  },
})
DefineAbility({
  Name="Evasion",
  Key="Evasion Output",
  Category="Special Ability",
  Description={
    Format="You can avoid damage from many area-effect attacks. If you make a successful Reflex saving throw against an attack that normally deals half damage on a successful save, you instead take no damage. Evasion can only be used if you are wearing light armor or no armor. If you are helpless, you do not gain the benefit of evasion.",
  },
  Visible=true,
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Improved Evasion",
  Category="Special Ability",
  Description={
    Format="You can avoid damage from many area-effect attacks. If you make a successful Reflex save against an attack that normally deals half damage on a successful save, you instead take no damage, and even on a failed saving throw you take only half damage. If you are helpless, you do not gain the benefit of improved evasion.",
  },
  Visible=true,
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
    "AdvancedRogueTalent",
    "RogueClassFeatures",
    "RangerClassFeatures",
    "MonkClassFeatures",
  },
})
DefineAbility({
  Name="Trap Sense",
  Category="Special Ability",
  Description={
    Format="You gain a +%1 bonus on Reflex saves made to avoid traps, and a +%1 dodge bonus to AC against attacks made by traps.",
    Arguments={
      Formula("TrapSenseBonus"),
    },
  },
  Visible=true,
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "TrapSenseBonus",
      },
    },
    {
      Name="SaveBonus",
      FormatString="+%1 Reflex to avoid traps",
      Arguments={
        "TrapSenseBonus",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
    "BarbarianClassFeatures",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Timeless Body",
  Category="Special Ability",
  Description={
    Format="You no longer take ability score penalties for aging and cannot be magically aged. Any penalties you may have already incurred, however, remain in place. Bonuses still accrue, and you still die of old age when your time is up.",
  },
  Visible=true,
  Types={
    "SpecialQuality",
    "Extraordinary",
    "MonkClassFeatures",
    "DruidClassFeatures",
  },
})
DefineAbility({
  Name="Wild Empathy",
  Category="Special Ability",
  Description={
    Format="You can improve the attitude of an animal. This ability functions just like Diplomacy check made to improve the attitude of a person. You roll 1d20+%1 to determine the Wild Empathy check result. The typical domestic animal has a starting attitude of indifferent, while wild animals are usually unfriendly. To use Wild Empathy, you and the animal must be within 30 feet of one another under normal circumstances. Generally, influencing an animal in this way takes 1 minute, but as with influencing people, it might take more or less time. You can use this ability to influence a magical beast with an Intelligence score of 1 or 2, but you take a -4 penalty on the check.",
    Arguments={
      Formula("WildEmpathy"),
    },
  },
  SourcePage="p.50/64",
  Visible=true,
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "WildEmpathy",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("WildEmpathyLVL+CHA"),
      Variables={
        "WildEmpathy",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "DruidClassFeatures",
    "RangerClassFeatures",
  },
})
DefineAbility({
  Name="Woodland Stride",
  Category="Special Ability",
  Description={
    Format="You may move through any sort of magical undergrowth (such as natural thorns, briars, overgrown areas, and similar terrains) at your normal speed and without taking damage or suffering any other impairment. Thorns, briars, and overgrown areas that have been magically manipulated to impede motion, however, still affect you.",
  },
  Visible=true,
  Types={
    "SpecialQuality",
    "Extraordinary",
    "ModifyMovement",
    "DruidClassFeatures",
    "RangerClassFeatures",
  },
})
DefineAbility({
  Name="Common Favored Terrain",
  Category="Special Ability",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("FavoredTerrainPool"),
      Variables={
        "Favored Terrain",
      },
    },
    {
      Category="ABILITYPOOL",
      Formula=Formula("max(0,FavoredTerrainPool-1)"),
      Variables={
        "Favored Terrain Bonus",
      },
    },
  },
  Types={
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Sneak Attack",
  Key="Sneak Attack",
  Category="Special Ability",
  Description={
    Format="If you can catch an opponent when he is unable to defend himself effectively from your attack, you can strike a vital spot for extra damage. Your attack deals %1d%2 points of extra damage anytime your target would be denied a Dexterity bonus to AC, or when you flank your target. Should you score a critical hit with a sneak attack, this extra damage is not multiplied. Ranged attacks can count as sneak attacks only if the target is within 30 feet. With a weapon that deals nonlethal damage, you can make a sneak attack that deals nonlethal damage instead of lethal damage. You cannot use a weapon that deals lethal damage to deal nonlethal damage in a sneak attack, not even with the usual -4 penalty. You must be able to see the target well enough to pick out a vital spot and must be able to reach such a spot. You cannot sneak attack while striking a creature with concealment.",
    Arguments={
      Formula("SneakAttackDice"),
      Formula("SneakAttackDieSize"),
    },
  },
  SourcePage="p.68",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="%1d%2",
      Arguments={
        "SneakAttackDice",
        "SneakAttackDieSize",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "SneakAttackDieSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(RogueSneakAttackLVL+1)/2"),
      Variables={
        "SneakAttackDice",
      },
    },
  },
  Types={
    "RogueClassFeatures",
    "AlchemistClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "AttackOption",
  },
})
DefineAbility({
  Name="Death Attack",
  Key="Death Attack",
  Category="Special Ability",
  Description={
    Format="If you study your victim for 3 rounds and then makes a sneak attack with a melee weapon that successfully deals damage, the sneak attack has the additional effect of possibly either paralyzing or killing the target (your choice). Studying the victim is a standard action. The death attack fails if the target detects the assassin or recognizes the assassin as an enemy (although the attack might still be a sneak attack if the target is denied his Dexterity bonus to his Armor Class or is flanked). If the victim of such a death attack fails a Fortitude save DC %1 against the kill effect, she dies. If the saving throw fails against the paralysis effect, the victim is rendered helpless and unable to act for 1d6+%2 rounds.",
    Arguments={
      Formula("DeathAttackDC"),
      Formula("DeathAttackDuration"),
    },
  },
  SourcePage="p.378",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "DeathAttackDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+INT"),
      Variables={
        "DeathAttackDC",
      },
    },
  },
  Types={
    "SpecialAttack",
  },
})
DefineAbility({
  Name="Slippery Mind",
  Key="Slippery Mind",
  Category="Special Ability",
  Description={
    Format=" You get %1 extra chances to succeed on your saving throw.",
    Arguments={
      Formula("SlipperymindTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["SlipperymindTimes"] >= 1)
      end,
    },
  },
  SourcePage="p.70",
  Types={
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Aura of Chaos",
  Category="Special Ability",
  Description={
    Format="You project an overwhelming chaotic aura.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["AuraChaosLVL"] >= 11)
      end,
    },
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AlignmentAuraLVL"),
      Variables={
        "AuraChaosLVL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Aura",
    "ClericClassFeatures",
    "PaladinClassFeatures",
  },
})
DefineAbility({
  Name="Aura of Evil",
  Category="Special Ability",
  Description={
    Format="You project an overwhelming evil aura.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["AuraEvilLVL"] >= 11)
      end,
    },
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AlignmentAuraLVL"),
      Variables={
        "AuraEvilLVL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Aura",
    "ClericClassFeatures",
    "PaladinClassFeatures",
  },
})
DefineAbility({
  Name="Aura of Good",
  Category="Special Ability",
  Description={
    Format="You project an overwhelming good aura.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["AuraGoodLVL"] >= 11)
      end,
    },
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AlignmentAuraLVL"),
      Variables={
        "AuraGoodLVL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Aura",
    "ClericClassFeatures",
    "PaladinClassFeatures",
  },
})
DefineAbility({
  Name="Aura of Law",
  Category="Special Ability",
  Description={
    Format="You project an overwhelming lawful aura.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["AuraLawLVL"] >= 11)
      end,
    },
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AlignmentAuraLVL"),
      Variables={
        "AuraLawLVL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Extraordinary",
    "Aura",
    "ClericClassFeatures",
    "PaladinClassFeatures",
  },
})
DefineAbility({
  Name="Channel Positive Energy",
  Category="Special Ability",
  Types={
    "Internal",
    "Channel Positive Energy",
  },
})
DefineAbility({
  Name="Channel Negative Energy",
  Category="Special Ability",
  Types={
    "Internal",
    "Channel Negative Energy",
  },
})
DefineAbility({
  Name="Prestige Class ~ Channel Energy",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("PrestigeClassChannelEnergyLVL"),
      Variables={
        "ClericChannelEnergyLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PrestigeClassChannelEnergyLVL"),
      Variables={
        "PaladinChannelLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("PrestigeClassChannelEnergyLVL"),
      Variables={
        "PowerOverUndeadLVL",
      },
    },
  },
  Types={
    "Internal",
    "ClassFeatures",
    "Channel Energy",
  },
})
DefineAbility({
  Name="Cleric Extra Channel",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "ClericChannelEnergyTimes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.GetLevelOfClass("Cleric") >= 1)) >= 1
    end,
  },
  Types={
    "ExtraChannel",
  },
})
DefineAbility({
  Name="Paladin Extra Channel",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("4"),
      Variables={
        "LayOnHandsTimes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return ((character.GetLevelOfClass("Paladin") >= 4)) >= 1
    end,
  },
  Types={
    "ExtraChannel",
  },
})
DefineAbility({
  Name="Necromancer Extra Channel",
  Category="Special Ability",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("2"),
      Variables={
        "PowerOverUndeadTimes",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Necromancy School ~ Power Over Undead" then return true end
        return false
      end)
    end,
  },
  Types={
    "ExtraChannel",
  },
})
DefineAbility({
  Name="CMB Output",
  Category="FEAT",
  Visible=false,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "CMB",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "USECMB",
      },
    },
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="CMB",
  Category="Internal",
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("STR"),
      Type={
        Name="Stat",
      },
      Conditions={
        function (character, item, sources)
          return character.Size > "T"
        end,
      },
      Variables={
        "CMB_STAT",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DEX"),
      Type={
        Name="Stat",
      },
      Conditions={
        function (character, item, sources)
          return character.Size <= "T"
        end,
        function (character, item, sources)
          return (character.Variables["DisableCMDDex"] == 0)
        end,
      },
      Variables={
        "CMB_STAT",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CHA"),
      Type={
        Name="Stat",
      },
      Conditions={
        function (character, item, sources)
          return character.Size <= "T"
        end,
        function (character, item, sources)
          return (character.Variables["UseCHAForCMDStat"] == 1)
        end,
      },
      Variables={
        "CMB_STAT",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("BAB"),
      Variables={
        "CMB_BAB",
      },
    },
    {
      Category="VAR",
      Formula=Formula("BAB"),
      Variables={
        "CMD_BAB",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("-8"),
      Conditions={
        function (character, item, sources)
          return character.Size == "F"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-4"),
      Conditions={
        function (character, item, sources)
          return character.Size == "D"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-2"),
      Conditions={
        function (character, item, sources)
          return character.Size == "T"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return character.Size == "S"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.Size == "L"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return character.Size == "H"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("4"),
      Conditions={
        function (character, item, sources)
          return character.Size == "G"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
    {
      Category="VAR",
      Formula=Formula("8"),
      Conditions={
        function (character, item, sources)
          return character.Size == "C"
        end,
      },
      Variables={
        "CM_SizeMod",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB_BAB+CMB_STAT+CM_SizeMod"),
      Variables={
        "CMB",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10+CMD_BAB+STR+DEX+CM_SizeMod+var(\"AC.CMD\")"),
      Variables={
        "CMD",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB"),
      Variables={
        "CMB_BullRush",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CMD"),
      Variables={
        "CMD_BullRush",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB"),
      Variables={
        "CMB_Disarm",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CMD"),
      Variables={
        "CMD_Disarm",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB"),
      Variables={
        "CMB_Grapple",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CMD"),
      Variables={
        "CMD_Grapple",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Weapon Focus (Grapple)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CMB_Grapple",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "FEAT" then return false end
            if ability.Name == "Greater Weapon Focus (Grapple)" then return true end
            return false
          end)
        end,
      },
      Variables={
        "CMB_Grapple",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB"),
      Variables={
        "CMB_Overrun",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CMD"),
      Variables={
        "CMD_Overrun",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB"),
      Variables={
        "CMB_Sunder",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CMD"),
      Variables={
        "CMD_Sunder",
      },
    },
  },
})
ModifyAbility({
  Name="CMB",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CMB"),
      Variables={
        "CMB_Trip",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CMD"),
      Variables={
        "CMD_Trip",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(LEGS-2)*2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["LEGS"] >= 2)
        end,
      },
      Variables={
        "CMD_Trip",
      },
    },
  },
})
DefineAbility({
  Name="No Cantrips",
  Key="No Cantrips ~ Wizard",
  Category="Special Ability",
  Bonuses={
    {
      Category="SPELLCAST",
      Formula=Formula("-3"),
      Conditions={
        function (character, item, sources)
          return ((character.GetLevelOfClass("Wizard") >= 1)) >= 1
        end,
      },
      Variables={
        "CLASS=Wizard;LEVEL=0",
      },
    },
    {
      Category="SPELLCAST",
      Formula=Formula("-1"),
      Conditions={
        function (character, item, sources)
          return ((character.GetLevelOfClass("Wizard") >= 2)) >= 1
        end,
      },
      Variables={
        "CLASS=Wizard;LEVEL=0",
      },
    },
  },
  Types={
    "Internal",
    "WizardClassFeatures",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Arcane Archer ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="An arcane archer is proficient with all simple and martial weapons, light armor, medium armor, and shields.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Enhance Arrow",
  Key="Arcane Archer ~ Enhance Arrow",
  Category="Special Ability",
  Description={
    Format="At 1st level, every nonmagical arrow an arcane archer nocks and lets fly becomes magical, gaining a +1 enhancement bonus. Unlike magic weapons created by normal means, the archer need not spend gold pieces to accomplish this task. However, an archer's magic arrows only function for him. In addition, the arcane archer's arrows gain a number of additional qualities as he gains additional levels. The elemental, elemental burst, and aligned qualities can be changed once per day, when the arcane archer prepares spells or, in the case of spontaneous spellcasters, after 8 hours of rest. At 3rd level, every nonmagical arrow fired by an arcane archer gains one of the following elemental themed weapon qualities: flaming, frost, or shock. At 5th level, every nonmagical arrow fired by an arcane archer gains the distance weapon quality. At 7th level, every nonmagical arrow fired by an arcane archer gains one of the following elemental burst weapon qualities: flaming burst, icy burst, or shocking burst. This ability replaces the ability gained at 3rd level. At 9th level, every nonmagical arrow fired by an arcane archer gains one of the following aligned weapon qualities: anarchic, axiomatic, holy, or unholy. The arcane archer cannot choose an ability that is the opposite of his alignment (for example, a lawful good arcane archer could not choose anarchic or unholy as his weapon quality). The bonuses granted by a magic bow apply as normal to arrows that have been enhanced with this ability. Only the larger enhancement bonus applies. Duplicate abilities do not stack.",
  },
  SourcePage="p.375",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "ArrowEnhancement",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(ArrowEnhancementLVL+1)/2"),
      Variables={
        "ArrowEnhancement",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneArcherLVL"),
      Variables={
        "ArrowEnhancementLVL",
      },
    },
  },
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Imbue Arrow",
  Key="Arcane Archer ~ Imbue Arrow",
  Category="Special Ability",
  Description={
    Format="At 2nd level, an arcane archer gains the ability to place an area spell upon an arrow. When the arrow is fired, the spell's area is centered where the arrow lands, even if the spell could normally be centered only on the caster. This ability allows the archer to use the bow's range rather than the spell's range. A spell cast in this way uses its standard casting time and the arcane archer can fire the arrow as part of the casting. The arrow must be fired during the round that the casting is completed or the spell is wasted. If the arrow misses, the spell is wasted.",
  },
  SourcePage="p.376",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Seeker Arrow",
  Key="Arcane Archer ~ Seeker Arrow",
  Category="Special Ability",
  Description={
    Format="At 4th level, an arcane archer can launch an arrow at a target known to him within range, and the arrow travels to the target, even around corners. Only an unavoidable obstacle or the limit of the arrow's range prevents the arrow's flight. This ability negates cover and concealment modifiers, but otherwise the attack is rolled normally. Using this ability is a standard action (and shooting the arrow is part of the action). An arcane archer can use this ability %1 per day.",
    Arguments={
      Formula("SeekerArrowTimes"),
    },
  },
  SourcePage="p.376",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "SeekerArrowTimes",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "SeekerArrowTimes",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Phase Arrow",
  Key="Arcane Archer ~ Phase Arrow",
  Category="Special Ability",
  Description={
    Format="At 6th level, an arcane archer can launch an arrow %1 per day at a target known to him within range, and the arrow travels to the target in a straight path, passing through any nonmagical barrier or wall in its way. (Any magical barrier stops the arrow.) This ability negates cover, concealment, armor, and shield modifiers, but otherwise the attack is rolled normally. Using this ability is a standard action (and shooting the arrow is part of the action).",
    Arguments={
      Formula("PhaseArrowTimes"),
    },
  },
  SourcePage="p.376",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "PhaseArrowTimes",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "PhaseArrowTimes",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Hail of Arrows",
  Key="Arcane Archer ~ Hail of Arrows",
  Category="Special Ability",
  Description={
    Format="In lieu of his regular attacks, %2 per day an arcane archer of 8th level or higher can fire an arrow at each and every target within range, to a maximum of %1 targets. Each attack uses the archer's primary attack bonus, and each enemy may only be targeted by a single arrow.",
    Arguments={
      Formula("HailArrowsTargets"),
      Formula("HailArrowsTimes"),
    },
  },
  SourcePage="p.376",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 maxium targets %2/day)",
      Arguments={
        "HailArrowsTargets",
        "HailArrowsTimes",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ArcaneArcherLVL"),
      Variables={
        "HailArrowsTargets",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Variables={
        "HailArrowsTimes",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Arrow of Death",
  Key="Arcane Archer ~ Arrow of Death",
  Category="Special Ability",
  Description={
    Format="At 10th level, an arcane archer can create a special type of slaying arrow that forces the target, if damaged by the arrow's attack, to make a Fortitude save (DC %1) or be slain immediately. It takes 1 day to make a slaying arrow, and the arrow only functions for the arcane archer who created it. The slaying arrow lasts no longer than 1 year, and the archer can only have one such arrow in existence at a time.",
    Arguments={
      Formula("ArrowOfDeathDC"),
    },
  },
  SourcePage="p.376",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(DC %1)",
      Arguments={
        "ArrowOfDeathDC",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("20+CHA"),
      Variables={
        "ArrowOfDeathDC",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Arcane Trickster ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Arcane tricksters gain no proficiency with any weapon or armor.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Ranged Legerdemain",
  Key="Arcane Trickster ~ Ranged Legerdemain",
  Category="Special Ability",
  Description={
    Format="An arcane trickster can use Disable Device and Sleight of Hand at a range of 30 feet. Working at a distance increases the normal skill check DC by 5, and an arcane trickster cannot take 10 on this check. Any object to be manipulated must weigh 5 pounds or less. She can only use this ability if she has at least 1 rank in the skill being used.",
  },
  SourcePage="p.377",
  Types={
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Impromptu Sneak Attack",
  Key="Arcane Trickster ~ Impromptu Sneak Attack",
  Category="Special Ability",
  Description={
    Format="Beginning at 3rd level, %1 per day an arcane trickster can declare one melee or ranged attack she makes to be a sneak attack (the target can be no more than 30 feet distant if the impromptu sneak attack is a ranged attack). The target of an impromptu sneak attack loses any Dexterity bonus to AC, but only against that attack. The power can be used against any target, but creatures that are not subject to critical hits take no extra damage (though they still lose any Dexterity bonus to AC against the attack). At 7th level, an arcane trickster can use this ability twice per day.",
    Arguments={
      Formula("ImpromptuSneakTimes"),
    },
  },
  SourcePage="p.377",
  Aspects={
    {
      Name="NAME",
      FormatString="Impromptu Sneak Attack %1/day",
      Arguments={
        "ImpromptuSneakTimes",
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ImpromptuSneakTimes",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(ArcaneTricksterLVL+1)/4"),
      Variables={
        "ImpromptuSneakTimes",
      },
    },
  },
  Types={
    "SpecialAttack",
    "Supernatural",
    "AttackOption",
  },
})
DefineAbility({
  Name="Tricky Spells",
  Key="Arcane Trickster ~ Tricky Spells",
  Category="Special Ability",
  Description={
    Format="Starting at 5th level, an arcane trickster can cast her spells without their somatic or verbal components, as if using the Still Spell and Silent Spell feats. Spells cast using this ability do not increase in spell level or casting time. She can use this ability 3 times per day at 5th level and one additional time per every two levels thereafter, to a maximum of 5 times per day at 9th level. The arcane trickster decides to use this ability at the time of casting.",
  },
  SourcePage="p.378",
  Aspects={
    {
      Name="NAME",
      FormatString="Tricky Spells %1/day",
      Arguments={
        "TrickySpellsTimes",
      },
    },
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TrickySpellsTimes",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTricksterLVL"] >= 5)
        end,
      },
      Variables={
        "TrickySpellsTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTricksterLVL"] >= 7)
        end,
      },
      Variables={
        "TrickySpellsTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ArcaneTricksterLVL"] >= 9)
        end,
      },
      Variables={
        "TrickySpellsTimes",
      },
    },
  },
  Types={
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Invisible Thief",
  Key="Arcane Trickster ~ Invisible Thief",
  Category="Special Ability",
  Description={
    Format="At 9th level, an arcane trickster can become invisible, as if under the effects of greater invisibility, as a free action. She can remain invisible for a number of rounds per day equal to her arcane trickster level. Her caster level for this effect is equal to her caster level. These rounds need not be consecutive.",
  },
  SourcePage="p.378",
  Types={
    "SpecialQuality",
    "Defensive",
  },
})
DefineAbility({
  Name="Surprise Spells",
  Key="Arcane Trickster ~ Surprise Spells",
  Category="Special Ability",
  Description={
    Format="At 10th level, an arcane trickster can add her sneak attack damage to any spell that deals damage, if the targets are flat-footed. This additional damage only applies to spells that deal hit point damage, and the additional damage is of the same type as the spell. If the spell allows a saving throw to negate or halve the damage, it also negates or halves the sneak attack damage.",
  },
  SourcePage="p.378",
  Types={
    "SpecialQuality",
    "AttackOption",
  },
})
DefineAbility({
  Name="Sneak Attack",
  Key="Arcane Trickster ~ Sneak Attack",
  Category="Special Ability",
  Description={
    Format="[Sneak Attack Damage %1d%2]",
    Arguments={
      Formula("SneakAttackDice"),
      Formula("SneakAttackDieSize"),
    },
  },
  SourcePage="p.176",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sneak Attack",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("6"),
      Type={
        Name="Base",
      },
      Variables={
        "SneakAttackDieSize",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ArcaneTricksterLVL/2"),
      Variables={
        "SneakAttackDice",
      },
    },
  },
  Types={
    "SpecialQuality",
    "ClassFeatures",
    "ArcaneTricksterClassFeatures",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Assassin ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Assassins are proficient with the crossbow (hand, light, or heavy), dagger (any type), dart, rapier, sap, shortbow (normal and composite), and short sword. Assassins are proficient with light armor but not with shields.",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Types={
        "ArmorProfLight",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Crossbow (Hand)",
        "Crossbow (Light)",
        "Crossbow (Heavy)",
        "Dagger",
        "Dart",
        "Rapier",
        "Sap",
        "Shortbow",
        "Sword (Short)",
      },
    },
  },
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Save against Poisons",
  Key="Assassin ~ Save against Poisons",
  Category="Special Ability",
  Description={
    Format="The assassin gains a +%1 saving throw bonus against poisons.",
    Arguments={
      Formula("AssassinPoisonSaveBonus"),
    },
  },
  SourcePage="p.379",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "AssassinPoisonSaveBonus",
      },
    },
    {
      Name="SaveBonus",
      FormatString="+%1 vs. poison",
      Arguments={
        "AssassinPoisonSaveBonus",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AssassinLVL/2"),
      Variables={
        "AssassinPoisonSaveBonus",
      },
    },
  },
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Hide in Plain Sight",
  Key="Assassin ~ Hide in Plain Sight",
  Category="Special Ability",
  Visible=false,
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "Internal",
    "ClassFeatures",
  },
})
DefineAbility({
  Name="Death Attack",
  Key="Assassin ~ Death Attack",
  Category="Special Ability",
  Description={
    Format="If an assassin studies his victim for 3 rounds and then makes a sneak attack with a melee weapon that successfully deals damage, the sneak attack has the additional effect of possibly either paralyzing or killing the target (assassin's choice). Studying the victim is a standard action. The death attack fails if the target detects the assassin or recognizes the assassin as an enemy (although the attack might still be a sneak attack if the target is denied his Dexterity bonus to his Armor Class or is flanked). If the victim of such a death attack fails a Fortitude save (DC 10 + the assassin's class level + the assassin's Int modifier) against the kill effect, she dies. If the saving throw fails against the paralysis effect, the victim is rendered helpless and unable to act for 1d6 rounds plus 1 round per level of the assassin.",
  },
  SourcePage="p.378",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Death Attack",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("AssassinLVL"),
      Variables={
        "DeathAttackDC",
        "DeathAttackDuration",
      },
    },
  },
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
  },
})
DefineAbility({
  Name="Poison Use",
  Key="Assassin ~ Poison Use",
  Category="Special Ability",
  Description={
    Format="Assassins are trained in the use of poison and cannot accidentally poison themselves when applying poison to a blade.",
  },
  SourcePage="p.379",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialAttack",
    "Extraordinary",
    "Poison Use",
  },
})
DefineAbility({
  Name="Hidden Weapons",
  Key="Assassin ~ Hidden Weapons",
  Category="Special Ability",
  Description={
    Format="At 4th level, an assassin becomes a master at hiding weapons on his body. He adds his assassin level to all Sleight of Hand skill checks made to prevent others from noticing them.",
  },
  SourcePage="p.379",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="True Death",
  Key="Assassin ~ True Death",
  Category="Special Ability",
  Description={
    Format="Starting at 4th level, anyone slain by an assassin's death attack becomes more difficult to bring back from the dead. Spellcasters attempting to bring a creature back from the dead using raise dead or similar magic must make a caster level check with a DC equal to 15 + the assassin's level or the spell fails and the material component is wasted. Casting remove curse the round before attempting to bring the creature back from the dead negates this chance. The DC of the remove curse is 10 + the assassin's level.",
  },
  SourcePage="p.379",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Quiet Death",
  Key="Assassin ~ Quiet Death",
  Category="Special Ability",
  Description={
    Format="At 6th level, whenever an assassin kills a creature using his death attack during a surprise round, he can also make a Stealth check, opposed by Perception checks of those in the vicinity to prevent them from identifying him as the assailant. If successful, those nearby might not even notice that the target is dead for a few moments, allowing the assassin to avoid detection.",
  },
  SourcePage="p.380",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Swift Death",
  Key="Assassin ~ Swift Death",
  Category="Special Ability",
  Description={
    Format="At 9th level, once per day, an assassin can make a death attack against a foe without studying the foe beforehand. He must still sneak attack his foe using a melee weapon that deals damage.",
  },
  SourcePage="p.380",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Angel of Death",
  Key="Assassin ~ Angel of Death",
  Category="Special Ability",
  Description={
    Format="At 10th level, the assassin becomes a master of death. Once per day, when the assassin makes a successful death attack, he can cause the target's body to crumble to dust. This prevents raise dead and resurrection (although true resurrection works as normal). The assassin must declare the use of this ability before the attack is made. If the attack misses or the target successfully saves against the death attack, this ability is wasted with no effect.",
  },
  SourcePage="p.380",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialAttack",
    "Supernatural",
  },
})
DefineAbility({
  Name="Hide in Plain Sight",
  Key="Assassin ~ Hide in Plain Sight",
  Category="Special Ability",
  Description={
    Format="You can use the Hide skill even while being observed.",
  },
  SourcePage="p.378",
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ModifyAC",
  },
})
DefineAbility({
  Name="Uncanny Dodge",
  Key="Assassin ~ Uncanny Dodge",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Uncanny Dodge ~ Base",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["AssassinLVL"] >= 2)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["AssassinLVL"] >= 5)
        end,
      },
      Variables={
        "UncannyDodgeLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("AssassinLVL"),
      Type={
        Name="EachClass",
        Replace=true,
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
  },
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
  },
})
DefineAbility({
  Name="Sneak Attack",
  Key="Assassin ~ Sneak Attack",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sneak Attack",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(AssassinLVL+1)/2"),
      Variables={
        "SneakAttackDice",
      },
    },
  },
  Types={
    "ClassFeatures",
    "AssassinClassFeatures",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Dragon Disciple ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Dragon disciples gain no proficiency with any weapon or armor.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Spells per Day",
  Key="Dragon Disciple ~ Spells per Day",
  Category="Special Ability",
  Description={
    Format="At the indicated levels, a dragon disciple gains new spells per day as if he had also gained a level in an arcane spellcasting class he belonged to before adding the prestige class. He does not, however, gain other benefits a character of that class would have gained, except for additional spells per day, spells known (if he is a spontaneous spellcaster), and an increased effective level of spellcasting. If a character had more than one arcane spellcasting class before becoming a dragon disciple, he must decide to which class he adds the new level for purposes of determining spells per day.",
  },
  SourcePage="p. 381",
  Visible=true,
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Blood of Dragons",
  Key="Dragon Disciple ~ Blood of Dragons",
  Category="Special Ability",
  Description={
    Format="A dragon disciple adds his level to his sorcerer levels when determining the powers gained from his bloodline. If the dragon disciple does not have levels of sorcerer, he instead gains bloodline powers of the draconic bloodline, using his dragon disciple level as his sorcerer level to determine the bonuses gained. He must choose a dragon type upon gaining his first level in this class and that type must be the same as his sorcerer type. This ability does not grant bonus spells to a sorcerer unless he possesses spell slots of an appropriate level. Such bonus spells are automatically granted if the sorcerer gains spell slots of the spell's level.",
  },
  SourcePage="p.381",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["HasSorcererBloodline"] == 0)
        end,
      },
      Variables={
        "Dragon Disciple Bloodline",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DragonDiscipleLVL"),
      Variables={
        "BloodlineCasterLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DragonDiscipleLVL"),
      Variables={
        "Sorcerer_Draconic_BloodlineLVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DragonDiscipleLVL"),
      Variables={
        "Sorcerer_Draconic_BloodlineProgressionLVL",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Natural Armor Increase",
  Key="Dragon Disciple ~ Natural Armor Increase",
  Category="Special Ability",
  Description={
    Format="As his skin thickens, a dragon disciple takes on more and more of his progenitor's physical aspect. At 1st, 4th, and 7th level, a dragon disciple gains an increase to the character's existing natural armor (if any), as indicated on Table 11-4. These armor bonuses stack.",
  },
  SourcePage="p.381",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("DragonDiscipleArmorBonus"),
      Type={
        Name="NaturalArmor",
        Stack=true,
      },
      Variables={
        "AC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 1)
        end,
      },
      Variables={
        "DragonDiscipleArmorBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 4)
        end,
      },
      Variables={
        "DragonDiscipleArmorBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 7)
        end,
      },
      Variables={
        "DragonDiscipleArmorBonus",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Ability Boost",
  Key="Dragon Disciple ~ Ability Boost",
  Category="Special Ability",
  Description={
    Format="As a dragon disciple gains levels in this prestige class, his ability scores increase as noted on Table 11-4. These increases stack and are gained as if through level advancement.",
  },
  SourcePage="p.381",
  Bonuses={
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 2)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 4)
        end,
      },
      Variables={
        "STR",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 6)
        end,
      },
      Variables={
        "CON",
      },
    },
    {
      Category="STAT",
      Formula=Formula("2"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 8)
        end,
      },
      Variables={
        "INT",
      },
    },
  },
  Types={
    "Extraordinary",
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Bloodline Feat",
  Key="Dragon Disciple ~ Bloodline Feat",
  Category="Special Ability",
  Description={
    Format="Upon reaching 2nd level, and every three levels thereafter, a dragon disciple receives one bonus feat, chosen from the draconic bloodline's bonus feat list.",
  },
  SourcePage="p.381",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DragonDiscipleLVL+1)/3"),
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Blood of Dragons Bloodline" then return false end
            if ability.IsAnyType("SorcererBloodlineChoice") then return true end
            return false
          end)
        end,
      },
      Variables={
        "BloodlineFeatCount",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Dragon Bite",
  Key="Dragon Disciple ~ Dragon Bite",
  Category="Special Ability",
  Description={
    Format="At 2nd level, whenever the dragon disciple uses his bloodline to grow claws, he also gains a bite attack. This is a primary natural attack that deals 1d6 points of damage (1d4 if the dragon disciple is small) plus 1-1/2 times the dragon disciple's Strength modifier. Upon reaching 6th level, this bite also deals 1d6 points of energy damage. The type of damage dealt is determined by the dragon disciple's bloodline.",
  },
  SourcePage="p.382",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bite",
      },
    },
  },
  Bonuses={
    {
      Category="WEAPONPROF=Bite",
      Formula=Formula("STR/2"),
      Variables={
        "DAMAGE",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialAttack",
    "Special Attack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Breath Weapon",
  Key="Dragon Disciple ~ Breath Weapon",
  Category="Special Ability",
  Description={
    Format="At 3rd level, a dragon disciple gains the breath weapon bloodline power, even if his level does not yet grant that power. Once his level is high enough to grant this ability through the bloodline, the dragon disciple gains an additional use of his breath weapon each day. The type and shape of the breath weapon depends on the type of dragon selected by the dragon disciple, as detailed under the Draconic sorcerer bloodline description (see page 75).",
  },
  SourcePage="p.382",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Breath Weapon",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Blood of Dragons Bloodline" then return false end
            if ability.IsAnyType("SorcererBloodlineChoice") then return true end
            return false
          end)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 3)
        end,
      },
      Variables={
        "Sorcerer_DraconicBreathWeapon_Times",
      },
    },
  },
  Types={
    "Supernatural",
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Blindsense",
  Key="Dragon Disciple ~ Blindsense",
  Category="Special Ability",
  Description={
    Format="At 5th level, the dragon disciple gains blindsense with a range of 30 feet. Using nonvisual senses the dragon disciple notices things he cannot see. He usually does not need to make Perception checks to notice and pinpoint the location of creatures within range of his blindsense ability, provided that he has line of effect (see page 215) to that creature. Any opponent the dragon disciple cannot see still has total concealment against him, and the dragon disciple still has the normal miss chance when attacking foes that have concealment. Visibility still affects the movement of a creature with blindsense. A creature with blindsense is still denied its Dexterity bonus to Armor Class against attacks from creatures it cannot see. At 10th level, the range of this ability increases to 60 feet.",
  },
  SourcePage="p.382",
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
    "Extraordinary",
  },
  Visions={
    {
      Conditions={
        function (character, item, sources)
          return ((character.GetLevelOfClass("Dragon Disciple") >= 10)) >= 1
        end,
      },
      Kind={
        "Blindsense (60')",
      },
    },
    {
      Conditions={
        function (character, item, sources)
          return not (((character.GetLevelOfClass("Dragon Disciple") >= 10)) >= 1)
        end,
      },
      Kind={
        "Blindsense (30')",
      },
    },
  },
})
DefineAbility({
  Name="Dragon Form",
  Key="Dragon Disciple ~ Dragon Form",
  Category="Special Ability",
  Description={
    Format="At 7th level, a dragon disciple can assume the form of a dragon. This ability works like form of the dragon I. At 10th level, this ability functions as form of the dragon II and the dragon disciple can use this ability twice per day. His caster level for this effect is equal to his effective sorcerer levels for his draconic bloodline. Whenever he casts form of the dragon, he must assume the form of a dragon of the same type as his bloodline.",
  },
  SourcePage="p.382",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DragonDiscipleLVL-4)/3"),
      Variables={
        "DragonFormTimes",
      },
    },
    {
      Category="VAR",
      Formula=Formula("Sorcerer_Draconic_BloodlineLVL"),
      Variables={
        "DragonFormCL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Form of the Dragon I",
      SpellBookName="Dragon Disciple",
      Times="DragonFormTimes",
      TimeUnit="Day",
      CasterLevel="DragonFormCL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 7)
        end,
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] < 10)
        end,
      },
    },
    {
      Name="Form of the Dragon II",
      SpellBookName="Dragon Disciple",
      Times="DragonFormTimes",
      TimeUnit="Day",
      CasterLevel="DragonFormCL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DragonDiscipleLVL"] >= 10)
        end,
      },
    },
  },
  Types={
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Wings",
  Key="Dragon Disciple ~ Wings",
  Category="Special Ability",
  Description={
    Format="At 9th level, a dragon disciple gains the wings bloodline power, even if his level does not yet grant that power. Once his level is high enough to grant this ability through the bloodline, the dragon disciple's speed increases to 90 feet.",
  },
  SourcePage="p.382",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Wings",
      },
    },
  },
  Bonuses={
    {
      Category="MOVEADD",
      Formula=Formula("DragonDisciple_Wings_SpeedBonus"),
      Variables={
        "TYPE.Fly",
      },
    },
    {
      Category="VAR",
      Formula=Formula("30"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["Sorcerer_Draconic_BloodlineProgressionLVL"] >= 15)
        end,
      },
      Variables={
        "DragonDisciple_Wings_SpeedBonus",
      },
    },
  },
  Types={
    "Supernatural",
    "ClassFeatures",
    "Dragon Disciple Class Feature",
    "SpecialQuality",
    "Special Quality",
  },
})
DefineAbility({
  Name="Draconic Bloodline",
  Key="Dragon Disciple ~ Draconic Bloodline",
  Category="Internal",
  AllowMultiple=true,
  Choice={
    Choose=ChooseAbilitySelection(function (character, ability)
      if ability.Category ~= "Blood of Dragons Bloodline" then
        return false
      end
      return ((not (character.HasAbility(ability))) and (character.IsQualifiedFor(ability) and (((ability.IsType("SorcererBloodlineChoice"))))))
    end),
  },
  Stackable=false,
  Abilities={
    {
      Category="Blood of Dragons Bloodline",
      Nature="AUTOMATIC",
      Names={
        "%LIST",
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Bloodline Tracker",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return character.HasAnyAbility(function (ability)
        if ability.Category ~= "Special Ability" then return false end
        if ability.Name == "Dragon Disciple ~ Blood of Dragons" then return true end
        return false
      end)
    end,
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Archetype" then return false end
        if ability.Name == "Sorcerer Archetype ~ Crossblooded" then return true end
        return false
      end))
    end,
  },
  Types={
    "Dragon Disciple Bloodline Choice",
  },
})
DefineAbility({
  Name="Draconic Bloodline",
  Key="Draconic Bloodline ~ Standard",
  Category="Blood of Dragons Bloodline",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline ~ Feat Tracker",
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Bloodline ~ Draconic",
      },
    },
    {
      Category="Sorcerer Bloodline",
      Nature="AUTOMATIC",
      Names={
        "Draconic Bloodline",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("if(SorcererLVL>=1,0,-1)"),
      Variables={
        "Sorcerer_Draconic_BloodlineArcana1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(SorcererLVL>=1,0,-1)"),
      Variables={
        "Sorcerer_Draconic_BloodlineSpells1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if(SorcererLVL>=1,0,-1)"),
      Variables={
        "Sorcerer_Draconic_BloodlineClassSkill1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower1==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=1),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower1",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower3==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=3),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower3",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower9==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=9),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower9",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower15==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=15),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower15",
      },
    },
    {
      Category="VAR",
      Formula=Formula("if((Sorcerer_CF_BloodlinePower20==0&&Sorcerer_Draconic_BloodlineProgressionLVL>=20),1,0)"),
      Variables={
        "Sorcerer_Draconic_BloodlinePower20",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return not (character.HasAnyAbility(function (ability)
        if ability.Category ~= "Archetype" then return false end
        if ability.Name == "Sorcerer Archetype ~ Crossblooded" then return true end
        return false
      end))
    end,
  },
  Types={
    "SorcererBloodlineChoice",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Archmage ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Archmages gain no proficiency with any weapon or armor.",
  },
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Blackguard ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Blackguards are proficient with all simple and martial weapons, with all types of armor, and with shields.",
  },
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Duelist ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="The duelist is proficient with all simple and martial weapons, but no type of armor or shield.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Canny Defense",
  Key="Duelist ~ Canny Defense",
  Category="Special Ability",
  Description={
    Format="When wearing light or no armor and not using a shield, a duelist adds 1 point of Intelligence bonus (if any) per duelist class level as a dodge bonus to her Armor Class while wielding a melee weapon. If a duelist is caught flat-footed or otherwise denied her Dexterity bonus, she also loses this bonus.",
  },
  SourcePage="p.382",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("max(0,min(INT,CannyDefenseLVL))"),
      Type={
        Name="Dodge",
      },
      Conditions={
        function (character, item, sources)
          return not ((character.HasEquipped(function (item) return stringMatch(item.Name, "ARMORTYPE=Medium") end)) or (character.HasEquipped(function (item) return stringMatch(item.Name, "ARMORTYPE=Heavy") end)) or (character.HasEquipped(function (item) return item.IsType("Shield") end))) and (character.HasEquipped(function (item) return item.IsType("Melee") end))
        end,
      },
      Variables={
        "AC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DuelistLVL"),
      Variables={
        "CannyDefenseLVL",
      },
    },
  },
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Improved Reaction",
  Key="Duelist ~ Improved Reaction",
  Category="Special Ability",
  Description={
    Format="At 2nd level, a duelist gains a +%1 bonus on initiative checks. This bonus stacks with the benefit provided by the Improved Initiative feat.",
    Arguments={
      Formula("ImprovedReaction"),
    },
  },
  SourcePage="p.383",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "ImprovedReaction",
      },
    },
  },
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("ImprovedReaction"),
      Variables={
        "INITIATIVE",
      },
    },
    {
      Category="VAR",
      Formula=Formula("floor((DuelistLVL+4)/6)*2"),
      Variables={
        "ImprovedReaction",
      },
    },
  },
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Enhanced Mobility",
  Key="Duelist ~ Enhanced Mobility",
  Category="Special Ability",
  Description={
    Format="Starting at 3rd level, when wearing light or no armor and not using a shield, a duelist gains an additional +4 bonus to AC against attacks of opportunity caused when she moves out of a threatened square.",
  },
  SourcePage="p.383",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "ModifyAC",
  },
})
DefineAbility({
  Name="Grace",
  Key="Duelist ~ Grace",
  Category="Special Ability",
  Description={
    Format="At 4th level, a duelist gains an additional +2 competence bonus on all Reflex saving throws. This ability functions for a duelist only when she is wearing light or no armor and not using a shield.",
  },
  SourcePage="p.383",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Precise Strike",
  Key="Duelist ~ Precise Strike",
  Category="Special Ability",
  Description={
    Format="A duelist gains the ability to strike precisely with a light or one-handed piercing weapon, adding her duelist level [%1] to her damage roll. When making a precise strike, a duelist cannot attack with a weapon in her other hand or use a shield. A duelist's precise strike only works against living creatures with discernible anatomies. Any creature that is immune to critical hits is also immune to a precise strike, and any item or ability that protects a creature from critical hits also protects a creature from a precise strike.",
    Arguments={
      Formula("PreciseStrikeDamage"),
    },
  },
  SourcePage="p.383",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Precise Strike ~ 1H",
        "Precise Strike ~ Light",
      },
    },
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(+%1)",
      Arguments={
        "PreciseStrikeDamage",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DuelistLVL"),
      Variables={
        "PreciseStrikeDamage",
      },
    },
  },
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialAttack",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Precise Strike (Light)",
  Key="Precise Strike ~ Light",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="WEAPON",
      Formula=Formula("PreciseStrikeDamage"),
      Variables={
        "DAMAGE",
      },
    },
    Target="EQ|Weapon,Melee,Light,Piercing",
  },
  TemporaryBonusDescription={
    Format="+1 bonus to damage rolls for each duelist level when wielding a light piercing weapon in one hand and leaving your other hand free.",
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Precise Strike (One-Handed)",
  Key="Precise Strike ~ 1H",
  Category="Special Ability",
  TemporaryBonus={
    Bonus={
      Category="WEAPON",
      Formula=Formula("PreciseStrikeDamage"),
      Variables={
        "DAMAGE",
      },
    },
    Target="EQ|Weapon,Melee,OneHanded,Piercing",
  },
  TemporaryBonusDescription={
    Format="+1 bonus to damage rolls for each duelist level when wielding a one-handed piercing weapon in one hand and leaving your other hand free.",
  },
  Types={
    "Internal",
  },
})
DefineAbility({
  Name="Acrobatic Charge",
  Key="Duelist ~ Acrobatic Charge",
  Category="Special Ability",
  Description={
    Format="At 6th level, a duelist gains the ability to charge in situations where others cannot. She may charge over difficult terrain that normally slows movement. Depending on the circumstance, she may still need to make appropriate checks to successfully move over the terrain.",
  },
  SourcePage="p.383",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Elaborate Defense",
  Key="Duelist ~ Elaborate Defense",
  Category="Special Ability",
  Description={
    Format="At 7th level and higher, if a duelist chooses to fight defensively or use total defense in melee combat, she gains an additional +%1 dodge bonus to AC for every 3 levels of duelist she has attained.",
    Arguments={
      Formula("ElaborateDefense"),
    },
  },
  SourcePage="p.384",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "ElaborateDefense",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ElaborateParryLVL/3"),
      Variables={
        "ElaborateDefense",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ElaborateDefense"),
      Variables={
        "FightingDefensivelyACBonus",
        "TotalDefenseACBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DuelistLVL"),
      Variables={
        "ElaborateParryLVL",
      },
    },
  },
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Parry",
  Key="Duelist ~ Parry",
  Category="Special Ability",
  Description={
    Format="At 2nd level, a duelist learns to parry the attacks of other creatures, causing them to miss. Whenever the duelist takes a full attack action with a light or one-handed piercing weapon, she can elect not to take one of her attacks. At any time before her next turn, she can attempt to parry an attack against her or an adjacent ally as an immediate action. To parry the attack, the duelist makes an attack roll, using the same bonuses as the attack she chose to forego during her previous action. If her attack roll is greater than the roll of the attacking creature, the attack automatically misses. For each size category that the attacking creature is larger than the duelist, the duelist takes a -4 penalty on her attack roll. The duelist also takes a -4 penalty when attempting to parry an attack made against an adjacent ally. The duelist must declare the use of this ability after the attack is announced, but before the roll is made.",
  },
  SourcePage="p.383",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Riposte",
  Key="Duelist ~ Riposte",
  Category="Special Ability",
  Description={
    Format="Starting at 5th level, a duelist can make an attack of opportunity against any creature whose attack she successfully parries, so long as the creature she is attacking is within reach.",
  },
  SourcePage="p.383",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="No Retreat",
  Key="Duelist ~ No Retreat",
  Category="Special Ability",
  Description={
    Format="At 9th level, enemies adjacent to the duelist that take a withdraw action provoke an attack of opportunity from the duelist.",
  },
  SourcePage="p.384",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Combat Reflexes",
  Key="Duelist ~ Combat Reflexes",
  Category="Special Ability",
  Description={
    Format="At 4th level, a duelist gains the benefit of the Combat Reflexes feat when using a light or one-handed piercing weapon.",
  },
  SourcePage="p.383",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Crippling Critical",
  Key="Duelist ~ Crippling Critical",
  Category="Special Ability",
  Description={
    Format="When you confirm a critical hit using a light or one-handed piercing weapon, you can apply one of the following penalties in addition to the damage dealt, reduce all of the target's speeds by 10 feet (minimum 5 feet), 1d4 points of Strength or Dexterity damage, -4 penalty on all saving throws, -4 penalty to Armor Class, or 2d6 points of bleed damage. These penalties last for 1 minute, except for ability damage, which must be healed normally, and bleed damage, which continues until the target receives magic healing or a DC 15 Heal skill check.",
  },
  SourcePage="p.384",
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Deflect Arrows",
  Key="Duelist ~ Deflect Arrows",
  Category="Special Ability",
  Description={
    Format="At 9th level, a duelist gains the benefit of the Deflect Arrows feat when using a light or one-handed piercing weapon. The duelist does not need a free hand to use this feat.",
  },
  SourcePage="p.384",
  Abilities={
    {
      Category="FEAT",
      Nature="VIRTUAL",
      Names={
        "Deflect Arrows",
      },
      Conditions={
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.IsType("Piercing") end))
        end,
        function (character, item, sources)
          return (character.HasEquipped(function (item) return item.WieldCategory == "Light" end)) or (character.HasEquipped(function (item) return item.WieldCategory == "OneHanded" end))
        end,
      },
    },
  },
  Types={
    "ClassFeatures",
    "DuelistClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Eldritch Knight",
  Category="Special Ability",
  Description={
    Format="Eldritch knights gain no proficiency with any weapon or armor.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Bonus Feat",
  Key="Eldritch Knight ~ Bonus Feat",
  Category="Special Ability",
  Description={
    Format="At 1st level, an eldritch knight may choose a bonus combat feat. This is in addition to the feats that a character of any class normally gets from advancing levels. The character must still meet any prerequisites for these bonus feats. An eldritch knight gains an additional combat feat at 5th and 9th level.",
  },
  SourcePage="p.385",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("EldritchKnightBonusFeatCount"),
      Variables={
        "Fighter Bonus Feat",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["EldritchKnightLVL"] >= 1)
        end,
      },
      Variables={
        "EldritchKnightBonusFeatCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["EldritchKnightLVL"] >= 5)
        end,
      },
      Variables={
        "EldritchKnightBonusFeatCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["EldritchKnightLVL"] >= 9)
        end,
      },
      Variables={
        "EldritchKnightBonusFeatCount",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Eldritch KnightClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Diverse Training",
  Key="Eldritch Knight ~ Diverse Training",
  Category="Special Ability",
  Description={
    Format="An eldritch knight adds his level to any levels of fighter he might have for the purpose of meeting the prerequisites for feats (if he has no fighter levels, treat his eldritch knight levels as levels of fighter). He also adds his level to any levels in an arcane spellcasting class for the purpose of meeting the prerequisites for feats.",
  },
  SourcePage="p.385",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Fighter Level Advanced Feat Tracker",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("classlevel(\"Eldritch Knight\")"),
      Variables={
        "FighterWeaponQualifyLVL",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Eldritch KnightClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Spell Critical",
  Key="Eldritch Knight ~ Spell Critical",
  Category="Special Ability",
  Description={
    Format="At 10th level, whenever an eldritch knight successfully confirms a critical hit, he can cast a spell as a swift action. The spell must include the target of the attack as one of its targets or in its area of effect. Casting this spell does not provoke an attack of opportunity. The caster must still meet all of the spell's components and must roll for arcane spell failure if necessary.",
  },
  SourcePage="p.385",
  Types={
    "ClassFeatures",
    "Eldritch KnightClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Weapon and Armor Proficiency ~ Loremaster",
  Category="Special Ability",
  Description={
    Format="Loremasters gain no proficiency with any weapon or armor.",
  },
  Visible=true,
  Types={
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Secret Lore",
  Key="Loremaster ~ Secret Lore",
  Category="Special Ability",
  Description={
    Format="At 1st level and every two levels higher than 1st (3rd, 5th, 7th, and 9th), the loremaster chooses one secret from the Loremaster Secrets table. His level plus Intelligence modifier determines which secrets he can choose. He can't choose the same secret twice.",
  },
  SourcePage="p.386",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "SecretLore",
      },
    },
    {
      Name="Ability Benefit",
      FormatString="+%1",
      Arguments={
        "SecretLore",
      },
    },
  },
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("LoremasterSecretCount"),
      Variables={
        "Loremaster Secret",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(LoreMasterLVL+1)/2"),
      Variables={
        "LoremasterSecretCount",
      },
    },
    {
      Category="VAR",
      Formula=Formula("LoremasterLVL+INT"),
      Variables={
        "LoremasterSecretsLVL",
      },
    },
  },
  Types={
    "ClassFeatures",
    "LoremasterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Greater Lore",
  Key="Loremaster ~ Greater Lore",
  Category="Special Ability",
  Description={
    Format="At 6th level, a loremaster gains the ability to understand magic items. Whenever a loremaster examines a magic item to determine its properties, he gains a +10 circumstance bonus on his Spellcraft skill check.",
  },
  SourcePage="p.386",
  Types={
    "ClassFeatures",
    "LoremasterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="True Lore",
  Key="Loremaster ~ True Lore",
  Category="Special Ability",
  Description={
    Format="At 10th level, a loremaster's knowledge becomes vast indeed. Once per day a loremaster can use his knowledge to gain the effect of a legend lore spell or an analyze dweomer spell. If used to create a legend lore effect, this ability has a casting time of 1 minute, regardless of how much information is already known about the subject in question.",
  },
  SourcePage="p.386",
  Types={
    "ClassFeatures",
    "LoremasterClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Lore",
  Key="Loremaster ~ Lore",
  Category="Special Ability",
  Description={
    Format="At 2nd level, a loremaster adds half his level to all Knowledge skill checks and may make such checks untrained. The bonuses gained from this ability stack with those gained from Bardic Knowledge.",
  },
  SourcePage="p.386",
  Bonuses={
    {
      Category="SKILL",
      Formula=Formula("LoreMasterLVL/2"),
      Variables={
        "TYPE=Knowledge",
      },
    },
  },
  Types={
    "ClassFeatures",
    "LoremasterClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Bonus Languages",
  Key="Loremaster ~ Bonus Languages",
  Category="Special Ability",
  Description={
    Format="A loremaster can learn any new language at 4th and 8th level.",
  },
  SourcePage="p.386",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("BonusLanguageCount"),
      Variables={
        "Add Spoken Language",
      },
    },
    {
      Category="VAR",
      Formula=Formula("LoremasterLVL/4"),
      Variables={
        "BonusLanguageCount",
      },
    },
  },
  Types={
    "ClassFeatures",
    "LoremasterClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Add Spoken Language",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseLanguage(function (character, lang)
      return ((not (character.HasLanguage(lang))) and (character.IsQualifiedFor(lang) and (((lang.IsType("Spoken"))))))
    end),
  },
  Stackable=false,
  AutomaticLanguages={
    {
      Selector=function (language)
        return stringMatch(language.Name, "%LIST")
      end,
    },
  },
  Types={
    "AddSpokenLanguage",
  },
})
DefineAbility({
  Name="Instant Mastery",
  Key="Secret Lore ~ Instant Mastery",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseSkill(function (character, skill)
      return ((character.Ranks(skill) == 0))
    end),
    MaxTimes=1,
  },
  Description={
    Format="4 ranks of a skill in which the character has no ranks",
  },
  SourcePage="p.387",
  Stackable=false,
  Bonuses={
    {
      Category="SKILLRANK",
      Formula=Formula("4"),
      Variables={
        "LIST",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 1)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Secret Health",
  Key="Secret Lore ~ Secret Health",
  Category="Special Ability",
  Description={
    Format="Toughness bonus feat",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="HP",
      Formula=Formula("3"),
      Variables={
        "CURRENTMAX",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 2)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Secrets of Inner Strength",
  Key="Secret Lore ~ Secrets of Inner Strength",
  Category="Special Ability",
  Description={
    Format="+2 bonus on Will saves",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="SAVE",
      Formula=Formula("2"),
      Variables={
        "BASE.Will",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 3)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="The Lore of True Stamina",
  Key="Secret Lore ~ The Lore of True Stamina",
  Category="Special Ability",
  Description={
    Format="+2 bonus on Fortitude saves",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="SAVE",
      Formula=Formula("2"),
      Variables={
        "BASE.Fortitude",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 4)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Secret Knowledge of Avoidance",
  Key="Secret Lore ~ Secret Knowledge of Avoidance",
  Category="Special Ability",
  Description={
    Format="+2 bonus on Reflex saves",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="SAVE",
      Formula=Formula("2"),
      Variables={
        "BASE.Reflex",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 5)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Weapon Trick",
  Key="Secret Lore ~ Weapon Trick",
  Category="Special Ability",
  Description={
    Format="+1 bonus on attack rolls",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("1"),
      Variables={
        "BASEAB",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 6)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Dodge Trick",
  Key="Secret Lore ~ Dodge Trick",
  Category="Special Ability",
  Description={
    Format="+1 dodge bonus to AC",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="COMBAT",
      Formula=Formula("1"),
      Type={
        Name="Dodge",
      },
      Variables={
        "AC",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 7)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Applicable Knowledge",
  Key="Secret Lore ~ Applicable Knowledge",
  Category="Special Ability",
  Description={
    Format="Any one feat",
  },
  SourcePage="p.387",
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("1"),
      Variables={
        "FEAT",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 8)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Newfound Arcana",
  Key="Secret Lore ~ Newfound Arcana",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseClass(function (character, class)
      return ((character.HasClass(class) and (((class.CanCastSpells)))))
    end),
  },
  Description={
    Format="One Bonus 1st-level spell",
  },
  SourcePage="p.387",
  Stackable=false,
  Bonuses={
    {
      Category="SPELLCAST",
      Formula=Formula("1"),
      Variables={
        "CLASS=%LIST;LEVEL=1",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 9)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="More Newfound Arcana",
  Key="Secret Lore ~ More Newfound Arcana",
  Category="Special Ability",
  AllowMultiple=true,
  Choice={
    Choose=ChooseClass(function (character, class)
      return ((character.HasClass(class) and (((class.CanCastSpells)))))
    end),
  },
  Description={
    Format="One bonus 2nd-level spell",
  },
  SourcePage="p.387",
  Stackable=false,
  Bonuses={
    {
      Category="SPELLCAST",
      Formula=Formula("1"),
      Variables={
        "CLASS=%LIST;LEVEL=2",
      },
    },
  },
  Conditions={
    function (character, item, sources)
      return (character.Variables["LoremasterSecretsLVL"] >= 10)
    end,
  },
  Types={
    "SpecialQuality",
    "LoremasterSecret",
  },
})
DefineAbility({
  Name="Combined Spells",
  Key="Mystic Theurge ~ Combined Spells",
  Category="Special Ability",
  Description={
    Format="You can prepare and cast spells from one of your spellcasting classes using the available slots from any of your other spellcasting classes. Spells prepared or cast in this way take up a slot one level higher than they originally occupied. This ability cannot be used to cast a spell at a lower level if that spell exists on both spell lists. You can prepare spells up to level %1 from one of your spellcasting classes using the slots one level higher of the other spellcasting class. The components of these spells do not change, but they otherwise follow the rules for the spellcasting class used to cast the spell. Spontaneous spellcasters can only select spells that they have prepared that day using non-spontaneous classes for this ability, even if the spells have already been cast.",
    Arguments={
      Formula("CombinedSpellsMaxLevel"),
    },
  },
  SourcePage="p.388",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(CombinedSpellsLVL+1)/2"),
      Variables={
        "CombinedSpellsMaxLevel",
      },
    },
  },
  Types={
    "ClassFeatures",
    "Mystic TheurgeClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Spell Synthesis",
  Key="Mystic Theurge ~ Spell Synthesis",
  Category="Special Ability",
  Description={
    Format="You can cast two spells, one from each of your spellcasting classes, using one action. Both of the spells must have the same casting time. You can make any decisions concerning the spells independently. Any target affected by both of the spells takes a -2 penalty on saves made against each spell. You receive a +2 bonus on caster level checks made to overcome spell resistance with these two spells. You may use this ability once per day.",
  },
  SourcePage="p.388",
  Types={
    "ClassFeatures",
    "Mystic TheurgeClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Bardic Knowledge",
  Key="Pathfinder Chronicler ~ Bardic Knowledge",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Bardic Knowledge",
      },
    },
  },
  Types={
    "Pathfinder ChroniclerClassFeatures",
  },
})
DefineAbility({
  Name="Bardic Performance",
  Key="Pathfinder Chronicler ~ Bardic Performance",
  Category="Special Ability",
  Description={
    Format="At 3rd level, a Pathfinder chronicler gains this ability, which functions like the bard class feature of the same name, except that the chronicler's effective bard level is 2 lower than her class level. Levels in this class stack with levels in any other class that grants a similar ability to determine her effective bard level.",
  },
  SourcePage="p.390",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Bard ~ Bardic Performance",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("CL-2"),
      Variables={
        "BardicPerformanceDuration",
        "BardicPerformanceLVL",
      },
    },
  },
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Deep Pockets",
  Key="Pathfinder Chronicler ~ Deep Pockets",
  Category="Special Ability",
  Description={
    Format="A Pathfinder chronicler collects items as well as lore, picking up small amounts of this or that throughout her travels. As a result, she may carry unspecified equipment worth up to 100 gp per class level. This can be any kind of gear that can reasonably fit into a backpack, including potions and scrolls (but not any other sort of magic item). As a full-round action, the chronicler may dig through her pockets to retrieve an item she specifies at that time, deducting its value from the allocated amount of cost. This item cannot weigh more than 10 pounds. When the total remaining cost reaches 0, the chronicler can retrieve no more items until she refills her deep pockets by spending a few hours and an amount of gold to bring her total up to 100 gp per class level. In addition, if she takes 1 hour to pack her gear each day, she gains a +4 bonus to Strength to determine her light encumbrance. This does not affect her maximum carrying capacity. The efficient distribution of weight simply encumbers her less than the same amount of weight normally should. Finally, the Pathfinder chronicler gains a +4 bonus on Sleight of Hand checks made to conceal small objects on her person.",
  },
  SourcePage="p.389",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Master Scribe",
  Key="Pathfinder Chronicler ~ Master Scribe",
  Category="Special Ability",
  Description={
    Format="A Pathfinder chronicler adds her class level as a bonus on all Linguistics and Profession (scribe) checks, as well as Use Magic Device checks involving scrolls or other written magical items. A Pathfinder chronicler can make Linguistics checks to decipher text as a full-round action and can always take 10 on Linguistics and Profession (scribe) checks, even if distracted or endangered.",
  },
  SourcePage="p.390",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Live to Tell the Tale",
  Key="Pathfinder Chronicler ~ Live to Tell the Tale",
  Category="Special Ability",
  Description={
    Format="At 2nd level, once per day per two class levels, a Pathfinder chronicler can attempt a new saving throw against any ongoing condition against which she failed a saving throw in a previous round, even if the effect is normally permanent. This ability has no effect on conditions that do not allow saving throws or against instantaneous effects.",
  },
  SourcePage="p.390",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Pathfinding",
  Key="Pathfinder Chronicler ~ Pathfinding",
  Category="Special Ability",
  Description={
    Format="Beginning at 2nd level, a Pathfinder chronicler develops an excellent sense of direction and skill at leading others through difficult terrain or by following ancient maps. A Pathfinder chronicler gains a +5 bonus on Survival checks made to avoid becoming lost and to Intelligence checks to escape a maze spell. In addition, she always uses the \"road or trail\" overland movement modifier even when in trackless terrain, whether on foot or mounted. With a DC 15 Survival check, the Pathfinder chronicler can extend this benefit to one companion per class level.",
  },
  SourcePage="p.390",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Improved Aid",
  Key="Pathfinder Chronicler ~ Improved Aid",
  Category="Special Ability",
  Description={
    Format="Pathfinder chroniclers frequently serve as the companions of great heroes, standing by their sides and recording their deeds, but often lending a crucial helping hand. Starting at 3rd level, a Pathfinder chronicler  using the aid another action grants a +4 bonus, rather than the normal +2.",
  },
  SourcePage="p.390",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Epic Tales",
  Key="Pathfinder Chronicler ~ Epic Tales",
  Category="Special Ability",
  Description={
    Format="A 4th-level Pathfinder chronicler can inscribe a tale so evocative and so moving that it conveys  the effects of bardic music through the written word. To create an epic tale requires the pathfinder chronicler to expend a number of rounds of her bardic performance ability equal to twice the duration of the epic tale (maximum duration of 10 rounds), and any relevant Performance skill check is made with Profession (scribe) instead. An epic tale affects only the reader, but it grants all the benefits that would normally apply for hearing a performance. A Pathfinder chronicler may apply the effects of any feats that affect bardic music to her epic tales. An epic tale retains its supernatural potency for 1 day per class level. It requires 1 hour to inscribe, a full-round action to activate, and a duration equal to 1/2 the number of bardic performance rounds expended during its creation. Once activated, an epic tale's magic is consumed.",
  },
  SourcePage="p.390",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Whispering Campaign",
  Key="Pathfinder Chronicler ~ Whispering Campaign",
  Category="Special Ability",
  Description={
    Format="Pathfinder chroniclers influence the world through their control of information and ability to shape public perception. At 5th level, as a special use of bardic music, the Pathfinder chronicler can create the effect of a doom spell as cast by a sorcerer of her class level by denouncing a creature in person. This is a language-dependent effect. Alternatively, the chronicler can denounce a particular target (an individual or a definable group of creatures) to others. This form of bardic music creates the effect of the enthrall spell, but at the end of the performance all creatures who failed to save shift their attitude toward the target of the oration by one step (in the direction of the Pathfinder chronicler's choice) for 1 day per class level.",
  },
  SourcePage="p.390",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Inspire Action",
  Key="Pathfinder Chronicler ~ Inspire Action",
  Category="Special Ability",
  Description={
    Format="As a special use of bardic music, a 6th level Pathfinder chronicler can exhort any one ally within hearing to a sudden surge of action, allowing her ally to immediately take an extra move action. This does not count against the ally's number of actions on his own turn.",
    Conditions={
      function (character, item, sources)
        return (character.Variables["InspireActionBonus"] == 0)
      end,
    },
  },
  SourcePage="p.391",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["PathfinderChroniclerLVL"] >= 9)
        end,
      },
      Variables={
        "InspireActionBonus",
      },
    },
  },
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Call Down the Legends",
  Key="Pathfinder Chronicler ~ Call Down the Legends",
  Category="Special Ability",
  Description={
    Format="At 7th level, once per week as a full-round action, a Pathfinder chronicler can summon 2d4 4th-level human barbarians, as if she used a bronze horn of Valhalla; these summoned barbarians serve her with complete loyalty. The barbarians are constructs, not actual people (although they seem to be). They arrive with the normal starting equipment for barbarians (see page 454) and attack anyone the chronicler designates.",
  },
  SourcePage="p.391",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Greater Epic Tales",
  Key="Pathfinder Chronicler ~ Greater Epic Tales",
  Category="Special Ability",
  Description={
    Format="At 8th level, the Pathfinder chronicler's written word gains power. This ability functions like the chronicler's epic tales ability, except that if read aloud, the bardic music takes effect as if the author had used the ability, but the effects are targeted by the reader and use the reader's Charisma score where applicable.",
  },
  SourcePage="p.391",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Lay of the Exalted Dead",
  Key="Pathfinder Chronicler ~ Lay of the Exalted Dead",
  Category="Special Ability",
  Description={
    Format="Once per week as a full round action, a 10th-level Pathfinder chronicler can summon 1d4+1 5th-level human barbarians, as if she used an iron horn of Valhalla. The summoned barbarians serve her with complete and unquestioning loyalty. They are constructs, with the incorporeal subtype (they take 50%% of the damage from corporeal sources, and no damage from nonmagical sources). They arrive wearing +2 studded leather and wielding +1 ghost touch greataxes (allowing them to deal full damage to corporeal creatures) and attack anyone the chronicler designates. To the chronicler and their allies, these exalted dead appear like a noble troop of spectral warriors. Her enemies, however, behold the terrible wrath of the ancient heroes and must succeed at Will saves or become shaken for 1 round per summoned barbarian (DC 15 + the Pathfinder chronicler's Charisma modifier).",
  },
  SourcePage="p.391",
  Types={
    "Pathfinder ChroniclerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
})
DefineAbility({
  Name="Weapon and Armor Proficiency",
  Key="Shadowdancer ~ Weapon and Armor Proficiency",
  Category="Special Ability",
  Description={
    Format="Shadowdancers are proficient with the club, crossbow (hand, light, or heavy), dagger (any type), dart, mace, morningstar, quarterstaff, rapier, sap, shortbow (normal and composite), and short sword. Shadowdancers are proficient with light armor but not with shields.",
  },
  Visible=true,
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Types={
        "ArmorProfLight",
      },
    },
  },
  AutomaticProficiencies={
    {
      Kind="Weapon",
      Names={
        "Club",
        "Crossbow (Hand)",
        "Crossbow (Light)",
        "Crossbow (Heavy)",
        "Dagger",
        "Dart",
        "Mace (Light)",
        "Mace (Heavy)",
        "Morningstar",
        "Quarterstaff",
        "Rapier",
        "Sap",
        "Shortbow",
        "Sword (Short)",
      },
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "ClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Hide in Plain Sight",
  Key="Shadowdancer ~ Hide in Plain Sight",
  Category="Special Ability",
  Description={
    Format="A shadowdancer can use the Stealth skill even while being observed. As long as she is within 10 feet of some sort of shadow, a shadowdancer can hide herself from view in the open without anything to actually hide behind. She cannot, however, hide in her own shadow.",
  },
  SourcePage="p.392",
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Defensive",
  },
})
DefineAbility({
  Name="Darkvision",
  Key="Shadowdancer ~ Darkvision",
  Category="Special Ability",
  Description={
    Format="At 2nd level, a shadowdancer gains darkvision out to a range of 60 feet. If she already has darkvision, the range increases by 30 feet.",
  },
  SourcePage="p.392",
  Templates={
    "Shadowdancer Darkvision",
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
  },
})
DefineAbility({
  Name="Rogue Talents",
  Key="Shadowdancer ~ Rogue Talents",
  Category="Special Ability",
  SourcePage="p.392",
  Visible=false,
  Bonuses={
    {
      Category="ABILITYPOOL",
      Formula=Formula("ShadowDancerTalentLVL/3"),
      Variables={
        "Rogue Talent",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ShadowdancerLVL"),
      Variables={
        "ShadowDancerTalentLVL",
      },
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
  },
})
DefineAbility({
  Name="Shadow Illusion",
  Key="Shadowdancer ~ Shadow Illusion",
  Category="Special Ability",
  Description={
    Format="When a shadowdancer reaches 3rd level, she can create visual illusions. This ability functions as silent image, using the shadowdancer's level as the caster level. A shadowdancer can use this ability once per day for every two shadowdancer levels she has attained. The DC for this ability is Charisma-based.",
  },
  SourcePage="p.392",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ShadowdancerLVL"),
      Variables={
        "ShadowIllusionLVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Silent Image",
      SpellBookName="Class",
      Times="1",
      TimeUnit="Day",
      DC="11+CHA",
      CasterLevel="ShadowIllusionLVL",
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Summon Shadow",
  Key="Shadowdancer ~ Summon Shadow",
  Category="Special Ability",
  Description={
    Format="At 3rd level, a shadowdancer can summon a shadow, an undead shade. Unlike a normal shadow, this shadow's alignment matches that of the shadowdancer, and the creature cannot create spawn. The summoned shadow receives a +4 bonus on Will saves made to halve the damage from positive channeled energy and the shadow cannot be turned or commanded. This shadow serves as a companion to the shadowdancer and can communicate intelligibly with the shadowdancer. This shadow has a number of hit points equal to half the shadowdancer's total. The shadow uses the shadowdancer's base attack bonus and base save bonuses. Otherwise, this shadow is identical to the shadow found in the Pathfinder RPG Bestiary. If a shadow companion is destroyed, or the shadowdancer chooses to dismiss it, the shadowdancer must attempt a DC 15 Fortitude save. If the saving throw fails, the shadowdancer gains one permanent negative level. A successful saving throw avoids this negative level. A destroyed or dismissed shadow companion cannot be replaced for 30 days.",
  },
  SourcePage="p.392",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ShadowdancerLVL"),
      Variables={
        "ShadowCompanionLVL",
      },
    },
  },
  FollowerTypes={
    {
      Type="Shadow Companion",
      IsValidFollower=function (follower)
        return follower.Name == "Companion (Shadow)"
      end,
      FollowerLevelAdjustment=0,
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "Supernatural",
  },
  Followers={
    ['Shadow Companion']=1,
  },
})
DefineAbility({
  Name="Shadow Call",
  Key="Shadowdancer ~ Shadow Call",
  Category="Special Ability",
  Description={
    Format="At 4th level, a shadowdancer can create creatures and effects out of raw shadow. This ability functions as shadow conjuration, using the shadowdancer's level as the caster level. A shadowdancer can use this ability once per day at 4th level, plus one additional time per day for every two levels attained beyond 4th (2/day at 6th level, 3/day at 8th level, and 4/day at 10th level). Upon reaching 10th level, this ability functions as greater shadow conjuration. The DC for this ability is Charisma-based.",
  },
  SourcePage="p.393",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ShadowDancerLVL"),
      Variables={
        "ShadowCallLvl",
      },
    },
    {
      Category="VAR",
      Formula=Formula("ShadowDancerLVL/2"),
      Variables={
        "ShadowCallTimes",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Shadow Conjuration",
      SpellBookName="Class",
      Times="ShadowCallTimes",
      TimeUnit="Day",
      DC="14+CHA",
      CasterLevel="ShadowCallLvl",
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "SpellLike",
  },
})
DefineAbility({
  Name="Shadow Jump",
  Key="Shadowdancer ~ Shadow Jump",
  Category="Special Ability",
  Description={
    Format="At 4th level, a shadowdancer gains the ability to travel between shadows as if by means of a dimension door spell. The limitation is that the magical transport must begin and end in an area with at least some dim light. A shadowdancer can jump up to a total of 40 feet each day in this way; this may be a single jump of 40 feet or four jumps of 10 feet each. Every two levels higher than 4th, the distance a shadowdancer can jump each day doubles (80 feet at 6th, 160 feet at 8th, and 320 feet at 10th). This amount can be split among many jumps, but each one, no matter how small, counts as a 10-foot increment.",
  },
  SourcePage="p.393",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 ft)",
      Arguments={
        "ShadowJump",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ShadowdancerLVL"] >= 4)
        end,
      },
      Variables={
        "ShadowJump",
      },
    },
    {
      Category="VAR",
      Formula=Formula("20"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ShadowdancerLVL"] >= 6)
        end,
      },
      Variables={
        "ShadowJump",
      },
    },
    {
      Category="VAR",
      Formula=Formula("40"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ShadowdancerLVL"] >= 8)
        end,
      },
      Variables={
        "ShadowJump",
      },
    },
    {
      Category="VAR",
      Formula=Formula("80"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["ShadowdancerLVL"] >= 10)
        end,
      },
      Variables={
        "ShadowJump",
      },
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Defensive Roll",
  Key="Shadowdancer ~ Defensive Roll",
  Category="Special Ability",
  Description={
    Format="Starting at 5th level, once per day, a shadowdancer can attempt to avoid a lethal blow. This functions as the rogue's advanced talent of the same name.",
  },
  SourcePage="p.393",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Rogue Talent ~ Defensive Roll",
      },
    },
  },
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "Defensive",
  },
})
DefineAbility({
  Name="Shadow Power",
  Key="Shadowdancer ~ Shadow Power",
  Category="Special Ability",
  Description={
    Format="At 8th level, a shadowdancer can use raw shadow to damage her foes. This ability functions as shadow evocation, using the shadowdancer's level as the caster level. A shadowdancer can use this ability once per day at 8th level, and one additional time per day upon reaching 10th level. The DC for this ability is Charisma-based.",
  },
  SourcePage="p.393",
  Types={
    "ShadowdancerClassFeatures",
    "SpecialAttack",
    "SpellLike",
  },
})
DefineAbility({
  Name="Shadow Master",
  Key="Shadowdancer ~ Shadow Master",
  Category="Special Ability",
  Description={
    Format="At 10th level, whenever a shadowdancer is in an area of dim light, she gains DR 10/- and a +2 luck bonus on all saving throws. In addition, whenever she successfully scores a critical hit against a foe who is in an area of dim light, that foe is blinded for 1d6 rounds.",
  },
  SourcePage="p.393",
  Types={
    "ShadowdancerClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "Defensive",
  },
})
DefineAbility({
  Name="Uncanny Dodge",
  Key="Shadowdancer ~ Uncanny Dodge",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Uncanny Dodge ~ Base",
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("ShadowdancerLVL"),
      Type={
        Name="EachClass",
        Replace=true,
      },
      Variables={
        "UncannyDodgeFlankingLevel",
      },
    },
    {
      Category="VAR",
      Formula=Formula("(ShadowdancerLVL+1)/3"),
      Variables={
        "UncannyDodgeLVL",
      },
    },
  },
  Types={
    "Internal",
    "ShadowdancerClassFeatures",
  },
})
DefineAbility({
  Name="Evasion",
  Key="Shadowdancer ~ Evasion",
  Category="Special Ability",
  Types={
    "Internal",
    "ShadowdancerClassFeatures",
  },
})
DefineAbility({
  Name="Slippery Mind",
  Key="Shadowdancer ~ Slippery Mind",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Rogue Talent ~ Slippery Mind",
      },
    },
  },
  Types={
    "Internal",
    "ShadowdancerClassFeatures",
  },
})
DefineAbility({
  Name="Improved Evasion",
  Key="Shadowdancer ~ Improved Evasion",
  Category="Special Ability",
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Rogue Talent ~ Improved Evasion",
      },
    },
  },
  Types={
    "Internal",
    "ShadowdancerClassFeatures",
  },
})
DefineAbility({
  Name="Barbarian Class",
  Category="Internal",
  Abilities={
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Weapon and Armor Proficiency",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianArmorProficiencies") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianWeaponProficiencies") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Weapon Prof ~ Martial",
        "Weapon Prof ~ Simple",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianWeaponProficiencies") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Shield Prof",
      },
      Types={
        "ArmorProfMedium",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianArmorProficiencies") then return true end
            return false
          end))
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Rage",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianRage") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 1)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Fast Movement",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianFastMovement") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 1)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Rage Powers",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianRagePowers") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 2)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Uncanny Dodge Tracker",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 2)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Trap Sense",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianTrapSense") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 3)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Damage Reduction",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianDamageReduction") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 7)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Greater Rage",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianGreaterRage") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 11)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Indomitable Will",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianIndomitableWill") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 14)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Tireless Rage",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianTirelessRage") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 17)
        end,
      },
    },
    {
      Category="Barbarian Class Feature",
      Nature="AUTOMATIC",
      Names={
        "Barbarian ~ Mighty Rage",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Archetype" then return false end
            if ability.IsAnyType("BarbarianMightyRage") then return true end
            return false
          end))
        end,
        function (character, item, sources)
          return (character.Variables["BarbarianLVL"] >= 20)
        end,
      },
    },
  },
  Types={
    "ClassFeaturesProgression",
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Air Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AirDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Animal Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AnimalDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Chaos Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ChaosDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Death Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DeathDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Destruction Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DestructionDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Earth Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EarthDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Evil Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EvilDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Fire Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["FireDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Good Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["GoodDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Healing Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["HealingDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Law Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["LawDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Luck Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["LuckDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Knowledge Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["KnowledgeDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Magic Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MagicDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Plant Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PlantDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Protection Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ProtectionDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Strength Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["StrengthDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sun Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["SunDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Travel Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["TravelDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Trickery Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["TrickeryDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "War Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["WarDomainAllowed"] == 1)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Water Domain",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["WaterDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Bard Class",
  Category="Internal",
  Add={
    AddSpellCasterLevel({
      Classes={
        "Bard",
      },
    }),
  },
  Types={
    "CastingClassSupport",
  },
})
DefineAbility({
  Name="Cleric Class",
  Category="Internal",
  Add={
    AddSpellCasterLevel({
      Classes={
        "Cleric",
      },
    }),
  },
  Types={
    "CastingClassSupport",
  },
})
DefineAbility({
  Name="Sorcerer Class",
  Category="Internal",
  Add={
    AddSpellCasterLevel({
      Classes={
        "Sorcerer",
      },
    }),
  },
  Types={
    "CastingClassSupport",
  },
})
DefineAbility({
  Name="Wizard Class",
  Category="Internal",
  Add={
    AddSpellCasterLevel({
      Classes={
        "Wizard",
      },
    }),
  },
  Types={
    "CastingClassSupport",
  },
})
DefineAbility({
  Name="Air Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Air",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Air",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Animal Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Animal",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Animal",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Chaos Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Chaos",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Chaos",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Death Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Death",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Death",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Destruction Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Destruction",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Destruction",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Earth Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Earth",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Earth",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Evil Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Evil",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Evil",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Fire Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Fire",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Fire",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Good Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Good",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Good",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Healing Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Healing",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Healing",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Law Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Law",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Law",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Luck Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Luck",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Luck",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Knowledge Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Knowledge",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Knowledge",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Magic Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Magic",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Magic",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Plant Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Plant",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Plant",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Protection Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Protection",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Protection",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Strength Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Strength",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Strength",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Sun Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Sun",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Sun",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Travel Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Travel",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Travel",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Trickery Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Trickery",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Trickery",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="War Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ War",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ War",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Water Domain",
  Category="Internal",
  Abilities={
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Cleric Domain ~ Water",
      },
      Conditions={
        function (character, item, sources)
          return character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end)
        end,
      },
    },
    {
      Category="Internal",
      Nature="AUTOMATIC",
      Names={
        "Sorcerer Domain ~ Water",
      },
      Conditions={
        function (character, item, sources)
          return not (character.HasAnyAbility(function (ability)
            if ability.Category ~= "Internal" then return false end
            if ability.Name == "Cleric Class" then return true end
            return false
          end))
        end,
      },
    },
  },
  Types={
    "MonsterDomainGranter",
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Air",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Wind Wall",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Gaseous Form",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Air Walk",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Control Winds",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Chain Lightning",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Control Weather",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AirDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Animal",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Calm Animals",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Hold Animal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dominate Animal",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Summon Nature's Ally IV",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Commune with Nature",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antilife Shell",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animal Shapes",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Summon Nature's Ally VIII",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AnimalDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Chaos",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Law",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shatter",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Law",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Chaos Hammer",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Law",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Animate Objects",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Word of Chaos",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cloak of Chaos",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ChaosDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Death",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cause Fear",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Death Knell",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Animate Dead",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Death Ward",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Slay Living",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Create Undead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Destruction",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Create Greater Undead",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Wail of the Banshee",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DeathDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Destruction",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Inflict Light Wounds",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shatter",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Contagion",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Inflict Critical Wounds",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Inflict Light Wounds (Mass)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Harm",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Disintegrate",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Implosion",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DestructionDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Earth",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Stone",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Soften Earth and Stone",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Stone Shape",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spike Stones",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Stone",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Iron Body",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EarthDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Evil",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Good",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Desecrate",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Good",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Unholy Blight",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Good",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Create Undead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Blasphemy",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Unholy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EvilDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Fire",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Produce Flame",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Resist Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Wall of Fire",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Fire Storm",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Incendiary Cloud",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["FireDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Good",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Evil",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Aid",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Evil",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Holy Smite",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Evil",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Blade Barrier",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Holy Word",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Holy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["GoodDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Healing",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cure Light Wounds",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Cure Moderate Wounds",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Cure Serious Wounds",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Cure Critical Wounds",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Cure Light Wounds (Mass)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Heal",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Regenerate",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cure Critical Wounds (Mass)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Heal (Mass)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["HealingDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Law",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Chaos",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Calm Emotions",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Chaos",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Order's Wrath",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Chaos",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Hold Monster",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Dictum",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Shield of Law",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["LawDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Luck",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entropic Shield",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Aid",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Freedom of Movement",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Break Enchantment",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Moment of Prescience",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Miracle",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["LuckDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Knowledge",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Detect Secret Doors",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Detect Thoughts",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Clairaudience/Clairvoyance",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Divination",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "True Seeing",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Find the Path",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Legend Lore",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Discern Location",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Foresight",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["KnowledgeDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Magic",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Aura",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Identify",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dispel Magic",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Imbue with Spell Ability",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antimagic Field",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Protection from Spells",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Mage's Disjunction",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MagicDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Plant",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entangle",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Barkskin",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Plant Growth",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Command Plants",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Thorns",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Repel Wood",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animate Plants",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Control Plants",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shambler",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PlantDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Protection",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Sanctuary",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shield Other",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spell Immunity",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antimagic Field",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Repulsion",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Mind Blank",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ProtectionDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Strength",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Enlarge Person",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Bull's Strength",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spell Immunity",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Righteous Might",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Grasping Hand",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Clenched Fist",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Crushing Hand",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["StrengthDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Sun",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Endure Elements",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Heat Metal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Searing Light",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Sunbeam",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Sunburst",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["SunDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Travel",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Longstrider",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Locate Object",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Fly",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Dimension Door",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Teleport",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Find the Path",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Phase Door",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Astral Projection",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["TravelDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Trickery",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Disguise Self",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Invisibility",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Nondetection",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Confusion",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "False Vision",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Screen",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Polymorph Any Object",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Time Stop",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["TrickeryDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ War",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Weapon",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Spiritual Weapon",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Divine Power",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Blade Barrier",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Power Word Blind",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Power Word Stun",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Power Word Kill",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["WarDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Sorcerer Domain ~ Water",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Sorcerer/Cleric (Arcane)",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Fog Cloud",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Water Breathing",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Control Water",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Ice Storm",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Cone of Cold",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Acid Fog",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Horrid Wilting",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["WaterDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Air",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Wind Wall",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Gaseous Form",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Air Walk",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Control Winds",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Chain Lightning",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Control Weather",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Whirlwind",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AirDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Animal",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Calm Animals",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Hold Animal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dominate Animal",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Summon Nature's Ally IV",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Commune with Nature",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antilife Shell",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animal Shapes",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Summon Nature's Ally VIII",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shapechange",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["AnimalDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Chaos",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Law",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shatter",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Law",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Chaos Hammer",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Law",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Animate Objects",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Word of Chaos",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cloak of Chaos",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ChaosDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Death",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cause Fear",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Death Knell",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Animate Dead",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Death Ward",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Slay Living",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Create Undead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Destruction",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Create Greater Undead",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Wail of the Banshee",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DeathDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Destruction",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Inflict Light Wounds",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shatter",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Contagion",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Inflict Critical Wounds",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Inflict Light Wounds (Mass)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Harm",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Disintegrate",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Implosion",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DestructionDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Earth",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Stone",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Soften Earth and Stone",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Stone Shape",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spike Stones",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Stone",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Earthquake",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Iron Body",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EarthDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Evil",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Good",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Desecrate",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Good",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Unholy Blight",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Good",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Create Undead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Blasphemy",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Unholy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["EvilDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Fire",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Burning Hands",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Produce Flame",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Resist Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Wall of Fire",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Fire Storm",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Incendiary Cloud",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["FireDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Good",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Evil",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Aid",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Evil",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Holy Smite",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Evil",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Blade Barrier",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Holy Word",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Holy Aura",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["GoodDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Healing",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Cure Light Wounds",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Cure Moderate Wounds",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Cure Serious Wounds",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Cure Critical Wounds",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Cure Light Wounds (Mass)",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Heal",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Regenerate",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Cure Critical Wounds (Mass)",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Heal (Mass)",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["HealingDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Law",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Protection from Chaos",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Calm Emotions",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Circle against Chaos",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Order's Wrath",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Dispel Chaos",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Hold Monster",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Dictum",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Shield of Law",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Summon Monster IX",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["LawDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Luck",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entropic Shield",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Aid",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Freedom of Movement",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Break Enchantment",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Moment of Prescience",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Miracle",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["LuckDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Knowledge",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Detect Secret Doors",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Detect Thoughts",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Clairaudience/Clairvoyance",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Divination",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "True Seeing",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Find the Path",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Legend Lore",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Discern Location",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Foresight",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["KnowledgeDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Magic",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Aura",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Identify",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Dispel Magic",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Imbue with Spell Ability",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antimagic Field",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Spell Turning",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Protection from Spells",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Mage's Disjunction",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["MagicDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Plant",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Entangle",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Barkskin",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Plant Growth",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Command Plants",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Wall of Thorns",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Repel Wood",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Animate Plants",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Control Plants",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Shambler",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["PlantDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Protection",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Sanctuary",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Shield Other",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Protection from Energy",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spell Immunity",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Spell Resistance",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Antimagic Field",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Repulsion",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Mind Blank",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["ProtectionDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Strength",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Enlarge Person",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Bull's Strength",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Spell Immunity",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Righteous Might",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Stoneskin",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Grasping Hand",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Clenched Fist",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Crushing Hand",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["StrengthDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Sun",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Endure Elements",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Heat Metal",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Searing Light",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Fire Shield",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Fire Seeds",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Sunbeam",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Sunburst",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Prismatic Sphere",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["SunDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Travel",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Longstrider",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Locate Object",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Fly",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Dimension Door",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Teleport",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Find the Path",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Teleport (Greater)",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Phase Door",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Astral Projection",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["TravelDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Trickery",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Disguise Self",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Invisibility",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Nondetection",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Confusion",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "False Vision",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Mislead",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Screen",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Polymorph Any Object",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Time Stop",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["TrickeryDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ War",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Magic Weapon",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Spiritual Weapon",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Magic Vestment",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Divine Power",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Flame Strike",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Blade Barrier",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Power Word Blind",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Power Word Stun",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Power Word Kill",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["WarDomainAllowed"] == 1)
        end,
      },
    },
  },
})
DefineAbility({
  Name="Cleric Domain ~ Water",
  Category="Internal",
  SpellLists={
    {
      Kind="Class",
      Name="Cleric",
      Levels={
        {
          SpellLevel=1,
          Spells={
            "Obscuring Mist",
          },
        },
        {
          SpellLevel=2,
          Spells={
            "Fog Cloud",
          },
        },
        {
          SpellLevel=3,
          Spells={
            "Water Breathing",
          },
        },
        {
          SpellLevel=4,
          Spells={
            "Control Water",
          },
        },
        {
          SpellLevel=5,
          Spells={
            "Ice Storm",
          },
        },
        {
          SpellLevel=6,
          Spells={
            "Cone of Cold",
          },
        },
        {
          SpellLevel=7,
          Spells={
            "Acid Fog",
          },
        },
        {
          SpellLevel=8,
          Spells={
            "Horrid Wilting",
          },
        },
        {
          SpellLevel=9,
          Spells={
            "Elemental Swarm",
          },
        },
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["WaterDomainAllowed"] == 1)
        end,
      },
    },
  },
})
ModifyAbility({
  Name="Default",
  Category="Internal",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("1"),
      Type={
        Name="Base",
      },
      Variables={
        "SLA_Base_LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("TL"),
      Type={
        Name="Base",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["Default_SLA_LVL"] == 0)
        end,
      },
      Variables={
        "SLA_Base_LVL",
      },
    },
    {
      Category="VAR",
      Formula=Formula("CHA"),
      Variables={
        "SLA_DC_STAT",
      },
    },
  },
})
DefineAbility({
  Name="Acid Splash",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Acid_Splash_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Acid_Splash_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Acid_Splash_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Acid Splash",
      SpellBookName="Innate",
      Times="Acid_Splash_Times",
      TimeUnit="Day",
      DC="Acid_Splash_DC",
      CasterLevel="Acid_Splash_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellAcid_Splash"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Acid_Splash_Times"] >= 1)
        end,
      },
    },
    {
      Name="Acid Splash",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Acid_Splash_DC",
      CasterLevel="Acid_Splash_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellAcid_Splash"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Acid_Splash_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Arcane Mark",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Arcane_Mark_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Arcane_Mark_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Arcane_Mark_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Arcane Mark",
      SpellBookName="Innate",
      Times="Arcane_Mark_Times",
      TimeUnit="Day",
      DC="Arcane_Mark_DC",
      CasterLevel="Arcane_Mark_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellArcane_Mark"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Arcane_Mark_Times"] >= 1)
        end,
      },
    },
    {
      Name="Arcane Mark",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Arcane_Mark_DC",
      CasterLevel="Arcane_Mark_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellArcane_Mark"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Arcane_Mark_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Bleed",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Bleed_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Bleed_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Bleed_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Bleed",
      SpellBookName="Innate",
      Times="Bleed_Times",
      TimeUnit="Day",
      DC="Bleed_DC",
      CasterLevel="Bleed_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellBleed"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bleed_Times"] >= 1)
        end,
      },
    },
    {
      Name="Bleed",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Bleed_DC",
      CasterLevel="Bleed_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellBleed"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Bleed_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Create Water",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Create_Water_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Create_Water_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Create_Water_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Create Water",
      SpellBookName="Innate",
      Times="Create_Water_Times",
      TimeUnit="Day",
      DC="Create_Water_DC",
      CasterLevel="Create_Water_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCreate_Water"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Create_Water_Times"] >= 1)
        end,
      },
    },
    {
      Name="Create Water",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Create_Water_DC",
      CasterLevel="Create_Water_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCreate_Water"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Create_Water_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Dancing Lights",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Dancing_Lights_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Dancing_Lights_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Dancing_Lights_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Dancing Lights",
      SpellBookName="Innate",
      Times="Dancing_Lights_Times",
      TimeUnit="Day",
      DC="Dancing_Lights_DC",
      CasterLevel="Dancing_Lights_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDancing_Lights"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Dancing_Lights_Times"] >= 1)
        end,
      },
    },
    {
      Name="Dancing Lights",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Dancing_Lights_DC",
      CasterLevel="Dancing_Lights_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDancing_Lights"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Dancing_Lights_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Daze",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Daze_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Daze_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Daze_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Daze",
      SpellBookName="Innate",
      Times="Daze_Times",
      TimeUnit="Day",
      DC="Daze_DC",
      CasterLevel="Daze_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDaze"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Daze_Times"] >= 1)
        end,
      },
    },
    {
      Name="Daze",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Daze_DC",
      CasterLevel="Daze_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDaze"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Daze_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Detect Magic",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Detect_Magic_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Magic_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Magic_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Detect Magic",
      SpellBookName="Innate",
      Times="Detect_Magic_Times",
      TimeUnit="Day",
      DC="Detect_Magic_DC",
      CasterLevel="Detect_Magic_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Magic"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Magic_Times"] >= 1)
        end,
      },
    },
    {
      Name="Detect Magic",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Detect_Magic_DC",
      CasterLevel="Detect_Magic_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Magic"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Magic_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Detect Poison",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Detect_Poison_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Poison_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Poison_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Detect Poison",
      SpellBookName="Innate",
      Times="Detect_Poison_Times",
      TimeUnit="Day",
      DC="Detect_Poison_DC",
      CasterLevel="Detect_Poison_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Poison"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Poison_Times"] >= 1)
        end,
      },
    },
    {
      Name="Detect Poison",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Detect_Poison_DC",
      CasterLevel="Detect_Poison_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Poison"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Poison_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Disrupt Undead",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Disrupt_Undead_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Disrupt_Undead_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Disrupt_Undead_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Disrupt Undead",
      SpellBookName="Innate",
      Times="Disrupt_Undead_Times",
      TimeUnit="Day",
      DC="Disrupt_Undead_DC",
      CasterLevel="Disrupt_Undead_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDisrupt_Undead"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Disrupt_Undead_Times"] >= 1)
        end,
      },
    },
    {
      Name="Disrupt Undead",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Disrupt_Undead_DC",
      CasterLevel="Disrupt_Undead_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDisrupt_Undead"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Disrupt_Undead_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Flare",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Flare_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Flare_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Flare_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Flare",
      SpellBookName="Innate",
      Times="Flare_Times",
      TimeUnit="Day",
      DC="Flare_DC",
      CasterLevel="Flare_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellFlare"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Flare_Times"] >= 1)
        end,
      },
    },
    {
      Name="Flare",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Flare_DC",
      CasterLevel="Flare_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellFlare"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Flare_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Ghost Sound",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Ghost_Sound_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Ghost_Sound_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Ghost_Sound_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Ghost Sound",
      SpellBookName="Innate",
      Times="Ghost_Sound_Times",
      TimeUnit="Day",
      DC="Ghost_Sound_DC",
      CasterLevel="Ghost_Sound_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellGhost_Sound"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ghost_Sound_Times"] >= 1)
        end,
      },
    },
    {
      Name="Ghost Sound",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Ghost_Sound_DC",
      CasterLevel="Ghost_Sound_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellGhost_Sound"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ghost_Sound_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Guidance",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Guidance_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Guidance_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Guidance_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Guidance",
      SpellBookName="Innate",
      Times="Guidance_Times",
      TimeUnit="Day",
      DC="Guidance_DC",
      CasterLevel="Guidance_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellGuidance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Guidance_Times"] >= 1)
        end,
      },
    },
    {
      Name="Guidance",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Guidance_DC",
      CasterLevel="Guidance_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellGuidance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Guidance_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Know Direction",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Know_Direction_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Know_Direction_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Know_Direction_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Know Direction",
      SpellBookName="Innate",
      Times="Know_Direction_Times",
      TimeUnit="Day",
      DC="Know_Direction_DC",
      CasterLevel="Know_Direction_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellKnow_Direction"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Know_Direction_Times"] >= 1)
        end,
      },
    },
    {
      Name="Know Direction",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Know_Direction_DC",
      CasterLevel="Know_Direction_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellKnow_Direction"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Know_Direction_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Light",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Light_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Light_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Light_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Light",
      SpellBookName="Innate",
      Times="Light_Times",
      TimeUnit="Day",
      DC="Light_DC",
      CasterLevel="Light_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLight"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Light_Times"] >= 1)
        end,
      },
    },
    {
      Name="Light",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Light_DC",
      CasterLevel="Light_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLight"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Light_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Lullaby",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Lullaby_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Lullaby_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Lullaby_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Lullaby",
      SpellBookName="Innate",
      Times="Lullaby_Times",
      TimeUnit="Day",
      DC="Lullaby_DC",
      CasterLevel="Lullaby_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLullaby"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Lullaby_Times"] >= 1)
        end,
      },
    },
    {
      Name="Lullaby",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Lullaby_DC",
      CasterLevel="Lullaby_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLullaby"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Lullaby_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Mage Hand",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Mage_Hand_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Mage_Hand_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Mage_Hand_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Mage Hand",
      SpellBookName="Innate",
      Times="Mage_Hand_Times",
      TimeUnit="Day",
      DC="Mage_Hand_DC",
      CasterLevel="Mage_Hand_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMage_Hand"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Mage_Hand_Times"] >= 1)
        end,
      },
    },
    {
      Name="Mage Hand",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Mage_Hand_DC",
      CasterLevel="Mage_Hand_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMage_Hand"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Mage_Hand_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Mending",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Mending_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Mending_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Mending_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Mending",
      SpellBookName="Innate",
      Times="Mending_Times",
      TimeUnit="Day",
      DC="Mending_DC",
      CasterLevel="Mending_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMending"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Mending_Times"] >= 1)
        end,
      },
    },
    {
      Name="Mending",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Mending_DC",
      CasterLevel="Mending_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMending"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Mending_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Message",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Message_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Message_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Message_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Message",
      SpellBookName="Innate",
      Times="Message_Times",
      TimeUnit="Day",
      DC="Message_DC",
      CasterLevel="Message_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMessage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Message_Times"] >= 1)
        end,
      },
    },
    {
      Name="Message",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Message_DC",
      CasterLevel="Message_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMessage"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Message_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Open/Close",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Open/Close_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Open_Close_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Open_Close_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Open/Close",
      SpellBookName="Innate",
      Times="Open_Close_Times",
      TimeUnit="Day",
      DC="Open/Close_DC",
      CasterLevel="Open_Close_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellOpen_Close"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Open_Close_Times"] >= 1)
        end,
      },
    },
    {
      Name="Open/Close",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Open/Close_DC",
      CasterLevel="Open_Close_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellOpen_Close"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Open_Close_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Prestidigitation",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Prestidigitation_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Prestidigitation_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Prestidigitation_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Prestidigitation",
      SpellBookName="Innate",
      Times="Prestidigitation_Times",
      TimeUnit="Day",
      DC="Prestidigitation_DC",
      CasterLevel="Prestidigitation_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellPrestidigitation"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Prestidigitation_Times"] >= 1)
        end,
      },
    },
    {
      Name="Prestidigitation",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Prestidigitation_DC",
      CasterLevel="Prestidigitation_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellPrestidigitation"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Prestidigitation_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Purify Food and Drink",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Purify_Food_and_Drink_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Purify_Food_and_Drink_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Purify_Food_and_Drink_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Purify Food and Drink",
      SpellBookName="Innate",
      Times="Purify_Food_and_Drink_Times",
      TimeUnit="Day",
      DC="Purify_Food_and_Drink_DC",
      CasterLevel="Purify_Food_and_Drink_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellPurify_Food_and_Drink"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Purify_Food_and_Drink_Times"] >= 1)
        end,
      },
    },
    {
      Name="Purify Food and Drink",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Purify_Food_and_Drink_DC",
      CasterLevel="Purify_Food_and_Drink_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellPurify_Food_and_Drink"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Purify_Food_and_Drink_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Ray of Frost",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Ray_of_Frost_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Ray_of_Frost_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Ray_of_Frost_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Ray of Frost",
      SpellBookName="Innate",
      Times="Ray_of_Frost_Times",
      TimeUnit="Day",
      DC="Ray_of_Frost_DC",
      CasterLevel="Ray_of_Frost_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellRay_of_Frost"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ray_of_Frost_Times"] >= 1)
        end,
      },
    },
    {
      Name="Ray of Frost",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Ray_of_Frost_DC",
      CasterLevel="Ray_of_Frost_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellRay_of_Frost"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Ray_of_Frost_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Read Magic",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Read_Magic_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Read_Magic_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Read_Magic_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Read Magic",
      SpellBookName="Innate",
      Times="Read_Magic_Times",
      TimeUnit="Day",
      DC="Read_Magic_DC",
      CasterLevel="Read_Magic_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellRead_Magic"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Read_Magic_Times"] >= 1)
        end,
      },
    },
    {
      Name="Read Magic",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Read_Magic_DC",
      CasterLevel="Read_Magic_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellRead_Magic"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Read_Magic_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Resistance",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Resistance_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Resistance_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Resistance_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Resistance",
      SpellBookName="Innate",
      Times="Resistance_Times",
      TimeUnit="Day",
      DC="Resistance_DC",
      CasterLevel="Resistance_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellResistance_"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Resistance_Times"] >= 1)
        end,
      },
    },
    {
      Name="Resistance",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Resistance_DC",
      CasterLevel="Resistance_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellResistance"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Resistance_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Stabilize",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Stabilize_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Stabilize_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Stabilize_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Stabilize",
      SpellBookName="Innate",
      Times="Stabilize_Times",
      TimeUnit="Day",
      DC="Stabilize_DC",
      CasterLevel="Stabilize_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellStabilize"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Stabilize_Times"] >= 1)
        end,
      },
    },
    {
      Name="Stabilize",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Stabilize_DC",
      CasterLevel="Stabilize_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellStabilize"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Stabilize_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Summon Instrument",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Summon_Instrument_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Summon_Instrument_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Summon_Instrument_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Summon Instrument",
      SpellBookName="Innate",
      Times="Summon_Instrument_Times",
      TimeUnit="Day",
      DC="Summon_Instrument_DC",
      CasterLevel="Summon_Instrument_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellSummon_Instrument"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Summon_Instrument_Times"] >= 1)
        end,
      },
    },
    {
      Name="Summon Instrument",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Summon_Instrument_DC",
      CasterLevel="Summon_Instrument_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellSummon_Instrument"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Summon_Instrument_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Touch of Fatigue",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Touch_of_Fatigue_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Touch_of_Fatigue_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Touch_of_Fatigue_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Touch of Fatigue",
      SpellBookName="Innate",
      Times="Touch_of_Fatigue_Times",
      TimeUnit="Day",
      DC="Touch_of_Fatigue_DC",
      CasterLevel="Touch_of_Fatigue_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellTouch_of_Fatigue"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Touch_of_Fatigue_Times"] >= 1)
        end,
      },
    },
    {
      Name="Touch of Fatigue",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Touch_of_Fatigue_DC",
      CasterLevel="Touch_of_Fatigue_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellTouch_of_Fatigue"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Touch_of_Fatigue_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Virtue",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Virtue_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Virtue_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Virtue_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Virtue",
      SpellBookName="Innate",
      Times="Virtue_Times",
      TimeUnit="Day",
      DC="Virtue_DC",
      CasterLevel="Virtue_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellVirtue"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Virtue_Times"] >= 1)
        end,
      },
    },
    {
      Name="Virtue",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Virtue_DC",
      CasterLevel="Virtue_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellVirtue"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Virtue_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL0",
  },
})
DefineAbility({
  Name="Acid Splash",
  Key="Spell ~ Acid Splash",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Acid Splash",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Arcane Mark",
  Key="Spell ~ Arcane Mark",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Arcane Mark",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Bleed",
  Key="Spell ~ Bleed",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Bleed",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Create Water",
  Key="Spell ~ Create Water",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Create Water",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
  },
})
DefineAbility({
  Name="Dancing Lights",
  Key="Spell ~ Dancing Lights",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Dancing Lights",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Daze",
  Key="Spell ~ Daze",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Daze",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Detect Magic",
  Key="Spell ~ Detect Magic",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Detect Magic",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Detect Poison",
  Key="Spell ~ Detect Poison",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Detect Poison",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Disrupt Undead",
  Key="Spell ~ Disrupt Undead",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Disrupt Undead",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Flare",
  Key="Spell ~ Flare",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Flare",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Ghost Sound",
  Key="Spell ~ Ghost Sound",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Ghost Sound",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Guidance",
  Key="Spell ~ Guidance",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Guidance",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
  },
})
DefineAbility({
  Name="Know Direction",
  Key="Spell ~ Know Direction",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Know Direction",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Bard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Light",
  Key="Spell ~ Light",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Light",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Lullaby",
  Key="Spell ~ Lullaby",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Lullaby",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Mage Hand",
  Key="Spell ~ Mage Hand",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Mage Hand",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Mending",
  Key="Spell ~ Mending",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Mending",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Message",
  Key="Spell ~ Message",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Message",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Open/Close",
  Key="Spell ~ Open/Close",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Open/Close",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Prestidigitation",
  Key="Spell ~ Prestidigitation",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Prestidigitation",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Purify Food and Drink",
  Key="Spell ~ Purify Food and Drink",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Purify Food and Drink",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
  },
})
DefineAbility({
  Name="Ray of Frost",
  Key="Spell ~ Ray of Frost",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Ray of Frost",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Read Magic",
  Key="Spell ~ Read Magic",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Read Magic",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Resistance",
  Key="Spell ~ Resistance",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
    "Bard_SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Stabilize",
  Key="Spell ~ Stabilize",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Stabilize",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
  },
})
DefineAbility({
  Name="Summon Instrument",
  Key="Spell ~ Summon Instrument",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Summon Instrument",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Bard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Touch of Fatigue",
  Key="Spell ~ Touch of Fatigue",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Touch of Fatigue",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Wizard_SLA_LVL0",
  },
})
DefineAbility({
  Name="Virtue",
  Key="Spell ~ Virtue",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Virtue",
      },
    },
  },
  Types={
    "SLA_LVL0",
    "Druid_SLA_LVL0",
    "Cleric_SLA_LVL0",
  },
})
DefineAbility({
  Name="Calm Animals",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Calm_Animals_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Calm_Animals_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Calm_Animals_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Calm Animals",
      SpellBookName="Innate",
      Times="Calm_Animals_Times",
      TimeUnit="Day",
      DC="Calm_Animals_DC",
      CasterLevel="Calm_Animals_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCalm_Animals"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Calm_Animals_Times"] >= 1)
        end,
      },
    },
    {
      Name="Calm Animals",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Calm_Animals_DC",
      CasterLevel="Calm_Animals_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCalm_Animals"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Calm_Animals_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Charm Animal",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Charm_Animal_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Charm_Animal_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Charm_Animal_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Charm Animal",
      SpellBookName="Innate",
      Times="Charm_Animal_Times",
      TimeUnit="Day",
      DC="Charm_Animal_DC",
      CasterLevel="Charm_Animal_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCharm_Animal"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Charm_Animal_Times"] >= 1)
        end,
      },
    },
    {
      Name="Charm Animal",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Charm_Animal_DC",
      CasterLevel="Charm_Animal_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCharm_Animal"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Charm_Animal_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Cure Light Wounds",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Cure_Light_Wounds_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Cure_Light_Wounds_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Cure_Light_Wounds_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Cure Light Wounds",
      SpellBookName="Innate",
      Times="Cure_Light_Wounds_Times",
      TimeUnit="Day",
      DC="Cure_Light_Wounds_DC",
      CasterLevel="Cure_Light_Wounds_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCure_Light_Wounds"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Cure_Light_Wounds_Times"] >= 1)
        end,
      },
    },
    {
      Name="Cure Light Wounds",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Cure_Light_Wounds_DC",
      CasterLevel="Cure_Light_Wounds_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellCure_Light_Wounds"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Cure_Light_Wounds_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Detect Animals or Plants",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Detect_Animals_or_Plants_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Animals_or_Plants_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Animals_or_Plants_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Detect Animals or Plants",
      SpellBookName="Innate",
      Times="Detect_Animals_or_Plants_Times",
      TimeUnit="Day",
      DC="Detect_Animals_or_Plants_DC",
      CasterLevel="Detect_Animals_or_Plants_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Animals_or_Plants"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Animals_or_Plants_Times"] >= 1)
        end,
      },
    },
    {
      Name="Detect Animals or Plants",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Detect_Animals_or_Plants_DC",
      CasterLevel="Detect_Animals_or_Plants_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Animals_or_Plants"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Animals_or_Plants_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Detect Snares and Pits",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Detect_Snares_and_Pits_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Snares_and_Pits_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Snares_and_Pits_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Detect Snares and Pits",
      SpellBookName="Innate",
      Times="Detect_Snares_and_Pits_Times",
      TimeUnit="Day",
      DC="Detect_Snares_and_Pits_DC",
      CasterLevel="Detect_Snares_and_Pits_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Snares_and_Pits"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Snares_and_Pits_Times"] >= 1)
        end,
      },
    },
    {
      Name="Detect Snares and Pits",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Detect_Snares_and_Pits_DC",
      CasterLevel="Detect_Snares_and_Pits_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect_Snares_and_Pits"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Snares_and_Pits_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Endure Elements",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Endure_Elements_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Endure_Elements_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Endure_Elements_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Endure Elements",
      SpellBookName="Innate",
      Times="Endure_Elements_Times",
      TimeUnit="Day",
      DC="Endure_Elements_DC",
      CasterLevel="Endure_Elements_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellEndure_Elements"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Endure_Elements_Times"] >= 1)
        end,
      },
    },
    {
      Name="Endure Elements",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Endure_Elements_DC",
      CasterLevel="Endure_Elements_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellEndure_Elements"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Endure_Elements_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Entangle",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Entangle_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Entangle_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Entangle_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Entangle",
      SpellBookName="Innate",
      Times="Entangle_Times",
      TimeUnit="Day",
      DC="Entangle_DC",
      CasterLevel="Entangle_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellEntangle"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Entangle_Times"] >= 1)
        end,
      },
    },
    {
      Name="Entangle",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Entangle_DC",
      CasterLevel="Entangle_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellEntangle"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Entangle_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Faerie Fire",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Faerie_Fire_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Faerie_Fire_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Faerie_Fire_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Faerie Fire",
      SpellBookName="Innate",
      Times="Faerie_Fire_Times",
      TimeUnit="Day",
      DC="Faerie_Fire_DC",
      CasterLevel="Faerie_Fire_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellFaerie_Fire"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Faerie_Fire_Times"] >= 1)
        end,
      },
    },
    {
      Name="Faerie Fire",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Faerie_Fire_DC",
      CasterLevel="Faerie_Fire_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellFaerie_Fire"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Faerie_Fire_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Goodberry",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Goodberry_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Goodberry_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Goodberry_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Goodberry",
      SpellBookName="Innate",
      Times="Goodberry_Times",
      TimeUnit="Day",
      DC="Goodberry_DC",
      CasterLevel="Goodberry_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellGoodberry"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Goodberry_Times"] >= 1)
        end,
      },
    },
    {
      Name="Goodberry",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Goodberry_DC",
      CasterLevel="Goodberry_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellGoodberry"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Goodberry_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Hide from Animals",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Hide_from_Animals_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Hide_from_Animals_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Hide_from_Animals_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Hide from Animals",
      SpellBookName="Innate",
      Times="Hide_from_Animals_Times",
      TimeUnit="Day",
      DC="Hide_from_Animals_DC",
      CasterLevel="Hide_from_Animals_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellHide_from_Animals"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Hide_from_Animals_Times"] >= 1)
        end,
      },
    },
    {
      Name="Hide from Animals",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Hide_from_Animals_DC",
      CasterLevel="Hide_from_Animals_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellHide_from_Animals"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Hide_from_Animals_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Jump",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Jump_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Jump_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Jump_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Jump",
      SpellBookName="Innate",
      Times="Jump_Times",
      TimeUnit="Day",
      DC="Jump_DC",
      CasterLevel="Jump_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellJump"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Jump_Times"] >= 1)
        end,
      },
    },
    {
      Name="Jump",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Jump_DC",
      CasterLevel="Jump_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellJump"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Jump_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Longstrider",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Longstrider_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Longstrider_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Longstrider_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Longstrider",
      SpellBookName="Innate",
      Times="Longstrider_Times",
      TimeUnit="Day",
      DC="Longstrider_DC",
      CasterLevel="Longstrider_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLongstrider"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Longstrider_Times"] >= 1)
        end,
      },
    },
    {
      Name="Longstrider",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Longstrider_DC",
      CasterLevel="Longstrider_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLongstrider"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Longstrider_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Magic Fang",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Magic_Fang_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Magic_Fang_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Magic_Fang_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Magic Fang",
      SpellBookName="Innate",
      Times="Magic_Fang_Times",
      TimeUnit="Day",
      DC="Magic_Fang_DC",
      CasterLevel="Magic_Fang_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMagic_Fang"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Magic_Fang_Times"] >= 1)
        end,
      },
    },
    {
      Name="Magic Fang",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Magic_Fang_DC",
      CasterLevel="Magic_Fang_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMagic_Fang"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Magic_Fang_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Magic Stone",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Magic_Stone_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Magic_Stone_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Magic_Stone_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Magic Stone",
      SpellBookName="Innate",
      Times="Magic_Stone_Times",
      TimeUnit="Day",
      DC="Magic_Stone_DC",
      CasterLevel="Magic_Stone_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMagic_Stone"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Magic_Stone_Times"] >= 1)
        end,
      },
    },
    {
      Name="Magic Stone",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Magic_Stone_DC",
      CasterLevel="Magic_Stone_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellMagic_Stone"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Magic_Stone_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Obscuring Mist",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Obscuring_Mist_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Obscuring_Mist_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Obscuring_Mist_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Obscuring Mist",
      SpellBookName="Innate",
      Times="Obscuring_Mist_Times",
      TimeUnit="Day",
      DC="Obscuring_Mist_DC",
      CasterLevel="Obscuring_Mist_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellObscuring_Mist"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Obscuring_Mist_Times"] >= 1)
        end,
      },
    },
    {
      Name="Obscuring Mist",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Obscuring_Mist_DC",
      CasterLevel="Obscuring_Mist_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellObscuring_Mist"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Obscuring_Mist_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Pass without Trace",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Pass_without_Trace_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Pass_without_Trace_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Pass_without_Trace_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Pass without Trace",
      SpellBookName="Innate",
      Times="Pass_without_Trace_Times",
      TimeUnit="Day",
      DC="Pass_without_Trace_DC",
      CasterLevel="Pass_without_Trace_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellPass_without_Trace"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Pass_without_Trace_Times"] >= 1)
        end,
      },
    },
    {
      Name="Pass without Trace",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Pass_without_Trace_DC",
      CasterLevel="Pass_without_Trace_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellPass_without_Trace"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Pass_without_Trace_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Produce Flame",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Produce_Flame_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Produce_Flame_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Produce_Flame_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Produce Flame",
      SpellBookName="Innate",
      Times="Produce_Flame_Times",
      TimeUnit="Day",
      DC="Produce_Flame_DC",
      CasterLevel="Produce_Flame_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellProduce_Flame"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Produce_Flame_Times"] >= 1)
        end,
      },
    },
    {
      Name="Produce Flame",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Produce_Flame_DC",
      CasterLevel="Produce_Flame_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellProduce_Flame"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Produce_Flame_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Shillelagh",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Shillelagh_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Shillelagh_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Shillelagh_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Shillelagh",
      SpellBookName="Innate",
      Times="Shillelagh_Times",
      TimeUnit="Day",
      DC="Shillelagh_DC",
      CasterLevel="Shillelagh_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellShillelagh"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Shillelagh_Times"] >= 1)
        end,
      },
    },
    {
      Name="Shillelagh",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Shillelagh_DC",
      CasterLevel="Shillelagh_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellShillelagh"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Shillelagh_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Speak with Animals",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Speak_with_Animals_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Speak_with_Animals_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Speak_with_Animals_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Speak with Animals",
      SpellBookName="Innate",
      Times="Speak_with_Animals_Times",
      TimeUnit="Day",
      DC="Speak_with_Animals_DC",
      CasterLevel="Speak_with_Animals_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellSpeak_with_Animals"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Speak_with_Animals_Times"] >= 1)
        end,
      },
    },
    {
      Name="Speak with Animals",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Speak_with_Animals_DC",
      CasterLevel="Speak_with_Animals_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellSpeak_with_Animals"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Speak_with_Animals_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Summon Nature's Ally I",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Summon_Natures_Ally_I_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Summon_Natures_Ally_I_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Summon_Natures_Ally_I_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Summon Nature's Ally I",
      SpellBookName="Innate",
      Times="Summon_Natures_Ally_I_Times",
      TimeUnit="Day",
      DC="Summon_Natures_Ally_I_DC",
      CasterLevel="Summon_Natures_Ally_I_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellSummon_Natures_Ally_I"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Summon_Natures_Ally_I_Times"] >= 1)
        end,
      },
    },
    {
      Name="Summon Nature's Ally I",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Summon_Natures_Ally_I_DC",
      CasterLevel="Summon_Natures_Ally_I_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellSummon_Natures_Ally_I"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Summon_Natures_Ally_I_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Darkness",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Darkness_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Darkness_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Darkness_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Darkness",
      SpellBookName="Innate",
      Times="Darkness_Times",
      TimeUnit="Day",
      DC="Darkness_DC",
      CasterLevel="Darkness_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDarkness"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Darkness_Times"] >= 1)
        end,
      },
    },
    {
      Name="Darkness",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Darkness_DC",
      CasterLevel="Darkness_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDarkness"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Darkness_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Deeper Darkness",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Deeper_Darkness_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Deeper_Darkness_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Deeper_Darkness_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Deeper Darkness",
      SpellBookName="Innate",
      Times="Deeper_Darkness_Times",
      TimeUnit="Day",
      DC="Deeper_Darkness_DC",
      CasterLevel="Deeper_Darkness_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDeeper Darkness"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Deeper_Darkness_Times"] >= 1)
        end,
      },
    },
    {
      Name="Deeper Darkness",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Deeper_Darkness_DC",
      CasterLevel="Deeper_Darkness_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDeeper Darkness"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Deeper_Darkness_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeDivineLVL1",
  },
})
DefineAbility({
  Name="Levitate",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Levitate_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Levitate_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Levitate_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Levitate",
      SpellBookName="Innate",
      Times="Levitate_Times",
      TimeUnit="Day",
      DC="Levitate_DC",
      CasterLevel="Levitate_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLevitate"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Levitate_Times"] >= 1)
        end,
      },
    },
    {
      Name="Levitate",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Levitate_DC",
      CasterLevel="Levitate_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellLevitate"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Levitate_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Detect Magic",
  Category="Spell-Like Ability",
  Description={
    Format="Blank",
  },
  Visible=true,
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+SLA_DC_STAT"),
      Variables={
        "Detect_Magic_DC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_Times"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Magic_Times",
      },
    },
    {
      Category="VAR",
      Formula=Formula("SLA_Base_LVL"),
      Type={
        Name="Base",
      },
      Variables={
        "Detect_Magic_LVL",
      },
    },
  },
  SpellLikeAbilities={
    {
      Name="Detect Magic",
      SpellBookName="Innate",
      Times="Detect_Magic_Times",
      TimeUnit="Day",
      DC="Detect_Magic_DC",
      CasterLevel="Detect_Magic_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect Magic"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Magic_Times"] >= 1)
        end,
      },
    },
    {
      Name="Detect Magic",
      SpellBookName="Innate",
      Times="ATWILL",
      TimeUnit="Day",
      DC="Detect_Magic_DC",
      CasterLevel="Detect_Magic_LVL",
      Conditions={
        function (character, item, sources)
          return (character.Variables["DisableSpellDetect Magic"] == 0)
        end,
        function (character, item, sources)
          return (character.Variables["Detect_Magic_Times"] <= 0)
        end,
      },
    },
  },
  Types={
    "SpellLike",
    "SpellLikeArcaneLVL1",
  },
})
DefineAbility({
  Name="Calm Animals",
  Key="Spell ~ Calm Animals",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Calm Animals",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Charm Animal",
  Key="Spell ~ Charm Animal",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Charm Animal",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Cure Light Wounds",
  Key="Spell ~ Cure Light Wounds",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Cure Light Wounds",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
    "Cleric_SLA_LVL1",
  },
})
DefineAbility({
  Name="Detect Animals or Plants",
  Key="Spell ~ Detect Animals or Plants",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Detect Animals or Plants",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Detect Snares and Pits",
  Key="Spell ~ Detect Snares and Pits",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Detect Snares and Pits",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Endure Elements",
  Key="Spell ~ Endure Elements",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Endure Elements",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
    "Cleric_SLA_LVL1",
  },
})
DefineAbility({
  Name="Entangle",
  Key="Spell ~ Entangle",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Entangle",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Faerie Fire",
  Key="Spell ~ Faerie Fire",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Faerie Fire",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Goodberry",
  Key="Spell ~ Goodberry",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Goodberry",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Hide from Animals",
  Key="Spell ~ Hide from Animals",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Hide from Animals",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Jump",
  Key="Spell ~ Jump",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Jump",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Longstrider",
  Key="Spell ~ Longstrider",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Longstrider",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Magic Fang",
  Key="Spell ~ Magic Fang",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Magic Fang",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Magic Stone",
  Key="Spell ~ Magic Stone",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Magic Stone",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
    "Cleric_SLA_LVL1",
  },
})
DefineAbility({
  Name="Obscuring Mist",
  Key="Spell ~ Obscuring Mist",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Obscuring Mist",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
    "Cleric_SLA_LVL1",
  },
})
DefineAbility({
  Name="Pass without Trace",
  Key="Spell ~ Pass without Trace",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Pass without Trace",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Produce Flame",
  Key="Spell ~ Produce Flame",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Produce Flame",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Shillelagh",
  Key="Spell ~ Shillelagh",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Shillelagh",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Speak with Animals",
  Key="Spell ~ Speak with Animals",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Speak with Animals",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Summon Nature's Ally I",
  Key="Spell ~ Summon Nature's Ally I",
  Category="Internal",
  Abilities={
    {
      Category="Spell-Like Ability",
      Nature="AUTOMATIC",
      Names={
        "Summon Nature's Ally I",
      },
    },
  },
  Types={
    "SLA_LVL1",
    "Druid_SLA_LVL1",
  },
})
DefineAbility({
  Name="Lightning Arc",
  Key="Air Domain ~ Lightning Arc",
  Category="Special Ability",
  Description={
    Format="As a standard action you can unleash an arc of electricity targeting any foe within 30 feet as a ranged touch attack. This arc of electricity deals 1d6+%1 points of electricity damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainAirLVL/2"),
      Formula("LightningArcTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainAirLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.41",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "LightningArcTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainAirTimes"),
      Variables={
        "LightningArcTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Electricity Resistance",
  Key="Air Domain ~ Electricity Resistance",
  Category="Special Ability",
  SourcePage="p.41",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Electricity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Electricity",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainAirResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ElectricityResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 6)
        end,
      },
      Variables={
        "DomainAirResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainAirLVL"] >= 12)
        end,
      },
      Variables={
        "DomainAirResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
  },
})
DefineAbility({
  Name="Speak with Animals",
  Key="Animal Domain ~ Speak with Animals",
  Category="Special Ability",
  Description={
    Format="You can Speak with Animals, as per the spell, for %1 rounds per day.",
    Arguments={
      Formula("SpeakWithAnimalsRounds"),
    },
  },
  SourcePage="p.41",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "SpeakWithAnimalsRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "SpeakWithAnimalsRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+DomainAnimalLVL"),
      Variables={
        "SpeakWithAnimalsRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Communicate",
  },
})
DefineAbility({
  Name="Animal Companion",
  Key="Animal Domain ~ Animal Companion",
  Category="Special Ability",
  Description={
    Format="You gain the service of an animal companion.",
  },
  SourcePage="p.41",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainAnimalLVL-3"),
      Variables={
        "AnimalCompanionMasterLVL",
      },
    },
  },
  FollowerTypes={
    {
      Type="Animal Companion",
      IsValidFollower=function (follower)
        return follower.RaceType == "Companion"
      end,
      FollowerLevelAdjustment=0,
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Animal Companion",
  },
  Followers={
    ['Animal Companion']=1,
  },
})
DefineAbility({
  Name="Artificer's Touch",
  Key="Artifice Domain ~ Artificer's Touch",
  Category="Special Ability",
  Description={
    Format="You can cast Mending at will (CL %1) to repair damaged objects. In addition, you can cause damage to objects and construct creatures by striking them with a melee touch attack. Objects and constructs take 1d6 points of damage. This attack bypasses up to %1 points of damage reduction and hardness. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainArtificeLVL"),
      Formula("ArtificersTouchTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainArtificeLVL"] < 2)
      end,
    },
  },
  SourcePage="p.41",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ArtificersTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ArtificersTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainArtificeTimes"),
      Variables={
        "ArtificersTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Dancing Weapons",
  Key="Artifice Domain ~ Dancing Weapons",
  Category="Special Ability",
  Description={
    Format="You can give a weapon toched the Dancing special weapon quality for 4 rounds. You can use this ability %1 times per day.",
    Arguments={
      Formula("DancingWeaponTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DancingWeaponTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DancingWeaponTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainArtificeLVL-4)/4"),
      Variables={
        "DancingWeaponTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Touch of Chaos",
  Key="Chaos Domain ~ Touch of Chaos",
  Category="Special Ability",
  Description={
    Format="You can imbue a target with chaos as a melee touch attack. For the next round, any time the target rolls a d20, he must roll twice and take the less favorable result. You can use this ability %1 times per day.",
    Arguments={
      Formula("TouchofChaosTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofChaosTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofChaosTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainChaosTimes"),
      Variables={
        "TouchofChaosTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Chaos Blade",
  Key="Chaos Domain ~ Chaos Blade",
  Category="Special Ability",
  Description={
    Format="You can give a weapon tocuhed the Anarchic special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainChaosLVL/2"),
      Formula("ChaosBladeTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds, %2/day)",
      Arguments={
        "DomainChaosLVL/2",
        "ChaosBladeTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ChaosBladeTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainChaosLVL-4)/4"),
      Variables={
        "ChaosBladeTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Dazing Touch",
  Key="Charm Domain ~ Dazing Touch",
  Category="Special Ability",
  Description={
    Format="You can cause a living creature to become dazed for 1 round as a melee touch attack. Creatures with more thatn %1 Hit Dice are unaffected. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainCharmLVL"),
      Formula("DazingTouchTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DazingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DazingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainCharmTimes"),
      Variables={
        "DazingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Charming Smile",
  Key="Charm Domain ~ Charming Smile",
  Category="Special Ability",
  Description={
    Format="You can cast Charm Person as a swift action with a DC of %1. You can only have one creature charmed in this way at a time. The total duration of this effect is %2 round per day. These rounds do not need to be consecutive, and you can dismiss the charm anytime as a free action. Each attempt to use this ability consumes 1 round of its duration, whether or not the creature succeeds on its save to resist the effect.",
    Arguments={
      Formula("DomainCharmDC"),
      Formula("CharmCharmingSmileRounds"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "CharmCharmingSmileRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainCharmLVL"),
      Variables={
        "CharmCharmingSmileRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Calming Touch",
  Key="Community Domain ~ Calming Touch",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action to heal it of 1d6+%1 points of nonlethal damage. This touch also removes the fatigued, shaken, and sickened conditions (but has no effect on more severe conditions). You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainCommunityLVL"),
      Formula("CalmingTouchTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "CalmingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "CalmingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainCommunityTimes"),
      Variables={
        "CalmingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Unity",
  Key="Community Domain ~ Unity",
  Category="Special Ability",
  Description={
    Format="Whenever a spell targets you and one or more allies within 30 feet, you can use this ability to allow your allies to use your saving throw against the effect instead of their own. Each ally must decide individually before the rolls are made. Using this ability is an immediate action. You can use this ability %1 times per day.",
    Arguments={
      Formula("UnityTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "UnityTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "UnityTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainCommunityLVL-4)/4"),
      Variables={
        "UnityTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Touch of Darkness",
  Key="Darkness Domain ~ Touch of Darkness",
  Category="Special Ability",
  Description={
    Format="As a melee touch attack, you can cause a creature's vision to be fraught with shadows and darkness. The creature touched treats all other creatures as if they had concealment, suffering a 20%% miss chance on all attack rolls. This effect lasts for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainDarknessLVL/2,1)"),
      Formula("TouchofDarknessTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofDarknessTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofDarknessTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDarknessTimes"),
      Variables={
        "TouchofDarknessTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Eyes of Darkness",
  Key="Darkness Domain ~ Eyes of Darkness",
  Category="Special Ability",
  Description={
    Format="Your vision is not impaired by lighting conditions, even in absolute darkness and magic darkness. You can use this ability for %1 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("EyesOfDarknessRounds"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "EyesOfDarknessRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "EyesOfDarknessRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDarknessLVL/2"),
      Variables={
        "EyesOfDarknessRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Sense",
  },
})
DefineAbility({
  Name="Bleeding Touch",
  Key="Death Domain ~ Bleeding Touch",
  Category="Special Ability",
  Description={
    Format="As a melee touch attack, you can cause a living creature to take 1d6 points of damage per round. This effect persists for %1 rounds or until stopped with a DC 15 Heal check or any spell or effect that heals damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainDeathLVL/2,1)"),
      Formula("BleedingTouchTimes"),
    },
  },
  SourcePage="p.42",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BleedingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BleedingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDeathTimes"),
      Variables={
        "BleedingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Death's Embrace",
  Key="Death Domain ~ Death's Embrace",
  Category="Special Ability",
  Description={
    Format="You heal damage instead of taking damage from channeled negative energy. If the channeled negative energy targets undead, you heal hit points just like undead in the area.",
  },
  SourcePage="p.43",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
  },
})
DefineAbility({
  Name="Destructive Smite",
  Key="Destruction Domain ~ Destructive Smite",
  Category="Special Ability",
  Description={
    Format="You gain the destructive smite power; the supernatural ability to make a single melee attack with a +%1 morale bonus on damage rolls. You must declare the destructive smite before making the attack. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainDestructionLVL/2,1)"),
      Formula("DestructiveSmiteTimes"),
    },
  },
  SourcePage="p.43",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DestructiveSmiteTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DestructiveSmiteTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDestructionTimes"),
      Variables={
        "DestructiveSmiteTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Destructive Aura",
  Key="Destruction Domain ~ Destructive Aura",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of destruction for %1 rounds per day. All attacks made against targets in this aura (including you) gain a +%2 morale bonus on damage and all critical threats are automatically confirmed. These rounds do not need to be consecutive.",
    Arguments={
      Formula("DestructiveAuraRounds"),
      Formula("DomainDestructionLVL/2"),
    },
  },
  SourcePage="p.43",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "DestructiveAuraRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DestructiveAuraRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainDestructionLVL"),
      Variables={
        "DestructiveAuraRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Acid Dart",
  Key="Earth Domain ~ Acid Dart",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can unleash an acid dart targeting any foe within 30 feet as a ranged touch attack. This acid dart deals 1d6+%1 points of acid damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainEarthLVL/2"),
      Formula("AcidDartTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainEarthLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.43",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "AcidDartTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AcidDartTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainEarthTimes"),
      Variables={
        "AcidDartTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Acid Resistance",
  Key="Earth Domain ~ Acid Resistance",
  Category="Special Ability",
  SourcePage="p.43",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Acid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Acid",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainEarthResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "AcidResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 6)
        end,
      },
      Variables={
        "DomainEarthResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainEarthLVL"] >= 12)
        end,
      },
      Variables={
        "DomainEarthResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
  },
})
DefineAbility({
  Name="Touch of Evil",
  Key="Evil Domain ~ Touch of Evil",
  Category="Special Ability",
  Description={
    Format="You can cause a creature to become sickened as a melee touch attack. Creatures sickened by your touch count as good for the purposes of spells with the Evil descriptor. This ability lasts for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainEvilLVL/2,1)"),
      Formula("TouchofEvilTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofEvilTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofEvilTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainEvilTimes"),
      Variables={
        "TouchofEvilTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Scythe of Evil",
  Key="Evil Domain ~ Scythe of Evil",
  Category="Special Ability",
  Description={
    Format="You can give a weapon you touch the Unholy special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainEvilLVL/2"),
      Formula("ScytheOfEvilTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ScytheOfEvilTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ScytheOfEvilTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainEvilLVL-4)/4"),
      Variables={
        "ScytheOfEvilTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Fire Bolt",
  Key="Fire Domain ~ Fire Bolt",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can unleash a scorching bolt of divine fire from your hand. You can target any single foe within 30 feet as a ranged touch attack with this bolt of fire. If you hit the foe, the fire bolt deals 1d6+%1 points of fire damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainFireLVL/2"),
      Formula("FireBoltTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainFireLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "FireBoltTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "FireBoltTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainFireTimes"),
      Variables={
        "FireBoltTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Fire Resistance",
  Key="Fire Domain ~ Fire Resistance",
  Category="Special Ability",
  SourcePage="p.44",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Fire",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Fire",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainFireResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "FireResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 6)
        end,
      },
      Variables={
        "DomainFireResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainFireLVL"] >= 12)
        end,
      },
      Variables={
        "DomainFireResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
  },
})
DefineAbility({
  Name="Touch of Glory",
  Key="Glory Domain ~ Touch of Glory",
  Category="Special Ability",
  Description={
    Format="You can cause your hand to shimmer with divine radiance, allowing you to touch a creature as a standard action and give it a +%1 bonus to a single Charisma-based skill check or Charisma ability check. This ability lasts for one hour or until the creature touched elects to apply the bonus to a roll. You can use this ability to grant the bonus %2 times per day.",
    Arguments={
      Formula("DomainGloryLVL"),
      Formula("TouchofGloryTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofGloryTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofGloryTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainGloryTimes"),
      Variables={
        "TouchofGloryTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Divine Presence",
  Key="Glory Domain ~ Divine Presence",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of divine presence for %1 rounds. All allies within this aura are treated as if under the effects of a Sanctuary spell with a DC of %2. These rounds do not need to be consecutive. Activating this ability is a standard action. If an ally leaves the area or makes an attack, the effect ends for that ally. If you make an attack, the effect ends for you and your allies.",
    Arguments={
      Formula("GloryDivinePresenceRounds"),
      Formula("DomainGloryDC"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DomainGloryLVL",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainGloryLVL"),
      Variables={
        "GloryDivinePresenceRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Touch of Good",
  Key="Domain Power ~ Touch of Good",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action, granting giving it a +%1 sacred bonus on attack rolls, skill checks, ability checks, and saving throws for 1 round. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainGoodLVL/2,1)"),
      Formula("TouchofGoodTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofGoodTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofGoodTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainGoodTimes"),
      Variables={
        "TouchofGoodTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Holy Lance",
  Key="Domain Power ~ Holy Lance",
  Category="Special Ability",
  Description={
    Format="You can give a weapon you touch the Holy special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainGoodLVL"),
      Formula("HolyLanceTimes"),
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "HolyLanceTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "HolyLanceTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainGoodLVL-4)/4"),
      Variables={
        "HolyLanceTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Rebuke Death",
  Key="Healing Domain ~ Rebuke Death",
  Category="Special Ability",
  Description={
    Format="You can touch a living creature as a standard action, healing it of 1d4+%1 points of damage. You can only use this ability on a creature that is below 0 hit points. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainHealingLVL/2"),
      Formula("RebukeDeathTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainHealingLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.44",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "RebukeDeathTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "RebukeDeathTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainHealingTimes"),
      Variables={
        "RebukeDeathTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Healer's Blessing",
  Key="Healing Domain ~ Healer's Blessing",
  Category="Special Ability",
  Description={
    Format="All of your cure spells are treated as if they were empowered, increasing the amount of damage healed by half (+50%%). This does not apply to damage dealt to undead with a cure spell. This does not stack with the Empower Spell metamagic feat.",
  },
  SourcePage="p.44",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Lore Keeper",
  Key="Knowledge Domain ~ Lore Keeper",
  Category="Special Ability",
  Description={
    Format="You can touch a creature to learn about its abilities and weaknesses. With a successful touch attack, you gain information as if you made the appropriate Knowledge skill check with a result equal to %1.",
    Arguments={
      Formula("LoreKeeperDomainSkillBonus"),
    },
  },
  SourcePage="p.45",
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("15+DomainKnowledgeLVL+WIS"),
      Variables={
        "LoreKeeperDomainSkillBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Remote Viewing",
  Key="Knowledge Domain ~ Remote Viewing",
  Category="Special Ability",
  Description={
    Format="You can use Clairaudience/Clairvoyance as a spell-like ability (CL %1). You can use this ability for %1 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("RemoteViewingRounds"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "RemoteViewingRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "RemoteViewingRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainKnowledgeLVL"),
      Variables={
        "RemoteViewingRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Touch of Law",
  Key="Law Domain ~ Touch of Law",
  Category="Special Ability",
  Description={
    Format="You can touch a willing creature as a standard action, infusing it with the power of divine order and allowing it to treat all attack rolls, skill checks, ability checks, and saving throws for 1 round as if the natural d20 roll resulted in an 11. You can use this ability %1 times per day.",
    Arguments={
      Formula("TouchofLawTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "TouchofLawTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TouchofLawTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLawTimes"),
      Variables={
        "TouchofLawTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Staff of Order",
  Key="Law Domain ~ Staff of Order",
  Category="Special Ability",
  Description={
    Format="You can give a weapon touched the Axiomatic special weapon quality for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainLawLVL/2"),
      Formula("StaffOfOrderTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "StaffOfOrderTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "StaffOfOrderTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainLawLVL-4)/4"),
      Variables={
        "StaffOfOrderTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Liberation",
  Key="Liberation Domain ~ Liberation",
  Category="Special Ability",
  Description={
    Format="You have the ability to ignore impediments to your mobility. For %1 rounds per day, you can move normally regardless of magical effects that impede movement, as if you were affected by Freedom of Movement. This effect  occurs automatically as soon as it applies. These rounds do not need to be consecutive.",
    Arguments={
      Formula("LiberationRounds"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "LiberationRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "LiberationRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLiberationLVL"),
      Variables={
        "LiberationRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Freedom's Call",
  Key="Liberation Domain ~ Freedom's Call",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of freedom for %1 rounds per day. Allies within this aura are not affected by the confused, grappled, frightened, panicked, paralyzed, pinned, or shaken conditions. This aura only suppresses these effects, and they return once a creature leaves the aura or when the aura ends, if applicable. These rounds do not need to be consecutive.",
    Arguments={
      Formula("FreedomsCallRounds"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "FreedomsCallRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "FreedomsCallRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLiberationLVL"),
      Variables={
        "FreedomsCallRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Bit of Luck",
  Key="Luck Domain ~ Bit of Luck",
  Category="Special Ability",
  Description={
    Format="You can touch a willing creature as a standard action, giving it a bit of luck. For the next round, any time the target rolls a d20, he may roll twice and take the more favorable result. You can use this ability %1 times per day.",
    Arguments={
      Formula("BitofLuckTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BitofLuckTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BitofLuckTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLuckTimes"),
      Variables={
        "BitofLuckTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Defensive",
  },
})
DefineAbility({
  Name="Good Fortune",
  Key="Luck Domain ~ Good Fortune",
  Category="Special Ability",
  Description={
    Format="As an immediate action, you can reroll any one d20 roll that you have just made before the results of the roll are revealed. You must take the result of the reroll, even if it's worse than the original roll. You can use this ability %1 times per day.",
    Arguments={
      Formula("GoodFortuneTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "GoodFortuneTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "GoodFortuneTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainLuckLVL/6"),
      Variables={
        "GoodFortuneTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
    "Defensive",
  },
})
DefineAbility({
  Name="Vision of Madness",
  Key="Madness Domain ~ Vision of Madness",
  Category="Special Ability",
  Description={
    Format="You can give a creature a vision of madness as a melee touch attack. Choose one of the following; attack rolls, saving throws, or skill checks. The target receives a +%1 bonus to the chosen rolls and a -%1 penalty to the other two types of rolls. This effect fades after 3 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainMadnessLVL/2,1)"),
      Formula("VisionofMadnessTimes"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "VisionofMadnessTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "VisionofMadnessTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainMadnessTimes"),
      Variables={
        "VisionofMadnessTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Aura of Madness",
  Key="Madness Domain ~ Aura of Madness",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of madness for %1 rounds per day. Enemies within this aura are affected by Confusion unless they make a Will save (DC %2). The Confusion effect ends immediately when the creature leaves the area or the aura expires. Creatures that succeed on their saving throw are immune to this aura for 24 hours. These rounds do not need to be consecutive.",
    Arguments={
      Formula("AuraOfMadnessRounds"),
      Formula("DomainMadnessDC"),
    },
  },
  SourcePage="p.45",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "AuraOfMadnessRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AuraOfMadnessRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainMadnessLVL"),
      Variables={
        "AuraOfMadnessRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Hand of the Acolyte",
  Key="Magic Domain ~ Hand of the Acolyte",
  Category="Special Ability",
  Description={
    Format="You can cause your melee weapon to fly from your grasp and strike a foe before instantly returning. As a standard action, you can make a single attack with a melee weapon at a range of 30 feet. This attack is treated as a ranged attack with a thrown weapon, except that you add your Wisdom modifier instead of your Dexterity modifier (damage still relies on Strength). This ability cannot be used to perform a combat maneuver. You can use this ability %1 times per day.",
    Arguments={
      Formula("HandoftheAcolyteTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "HandoftheAcolyteTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "HandoftheAcolyteTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainMagicTimes"),
      Variables={
        "HandoftheAcolyteTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Dispelling Touch",
  Key="Magic Domain ~ Dispelling Touch",
  Category="Special Ability",
  Description={
    Format="You can use a targeted Dispel Magic effect as a melee touch attack. You can use this ability %1 times per day.",
    Arguments={
      Formula("DispellingTouchTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "DispellingTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "DispellingTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("(DomainMagicLVL-4)/4"),
      Variables={
        "DispellingTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Inspiring Word",
  Key="Nobility Domain ~ Inspiring Word",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can speak an inspiring word to a creature within 30 feet. That creature receives a +2 morale bonus on attack rolls, skill checks, ability checks, and saving throws for %1 rounds. You can use this power %2 times per day.",
    Arguments={
      Formula("max(DomainNobilityLVL/2,1)"),
      Formula("DomainNobilityTimes"),
    },
  },
  SourcePage="p.46",
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Leadership",
  Key="Nobility Domain ~ Leadership",
  Category="Special Ability",
  Description={
    Format="You receive Leadership as a bonus feat. In addition, you gain a +2 bonus on your leadership score as long as you uphold the tenets of your deity (or divine concept if you do not venerate a deity).",
  },
  SourcePage="p.46",
  Abilities={
    {
      Category="FEAT",
      Nature="AUTOMATIC",
      Names={
        "Leadership",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
  },
})
DefineAbility({
  Name="Wooden Fist",
  Key="Plant Domain ~ Wooden Fist",
  Category="Special Ability",
  Description={
    Format="As a free action, your hands can become as hard as wood, covered in tiny thorns. While you have wooden fists, your unarmed strikes do not provoke attacks of opportunity, deal lethal damage, and gain a +%1 bonus on damage rolls. You can use this ability for %2 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("max(DomainPlantLVL/2,1)"),
      Formula("WoodenFistRounds"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "WoodenFistRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WoodenFistRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("3+WIS"),
      Variables={
        "WoodenFistRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Bramble Armor",
  Key="Plant Domain ~ Bramble Armor",
  Category="Special Ability",
  Description={
    Format="You can cause a host of wooden thorns to burst from your skin as a free action. While Bramble Armor is in effect, any foe striking you with an unarmed strike or a melee weapon without reach takes 1d6+%1 points of piercing damage. You can use this ability for %2 rounds per day. These rounds do not need to be consecutive.",
    Arguments={
      Formula("DomainPlantLVL/2"),
      Formula("BrambleArmorRounds"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "BrambleArmorRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BrambleArmorRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainPlantLVL"),
      Variables={
        "BrambleArmorRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Defensive",
  },
})
DefineAbility({
  Name="Resistant Touch",
  Key="Protection Domain ~ Resistant Touch",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can touch an ally and grant them your +%1 resistance bonus for 1 minute. When you use this ability, you lose your resistance bonus granted by the Protection domain for 1 minute. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainProtectionSaveBonus"),
      Formula("ResistantTouchTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "ResistantTouchTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "ResistantTouchTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainProtectionTimes"),
      Variables={
        "ResistantTouchTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Defensive",
  },
})
DefineAbility({
  Name="Aura of Protection",
  Key="Protection Domain ~ Aura of Protection",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura of protection for %1 rounds per day. You and your allies within this aura gain a +%2 deflection to AC resistance 5 against all elements (acid, cold, electricity, fire, and sonic). These rounds do not need to be consecutive.",
    Arguments={
      Formula("AuraOfProtectionRounds"),
      Formula("(DomainProtectionLVL-4)/4"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "AuraOfProtectionRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AuraOfProtectionRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainProtectionLVL"),
      Variables={
        "AuraOfProtectionRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Gentle Rest",
  Key="Repose Domain ~ Gentle Rest",
  Category="Special Ability",
  Description={
    Format="Your touch can fill a creature with lethargy, causing a living creature to become staggered for 1 round as a melee touch attack. If you touch a staggered living creatures, that creature falls asleep for 1 round instead. Undead creatures touched by you are staggered for %1 rounds. You can use this ability %2 times per day.",
    Arguments={
      Formula("WIS"),
      Formula("GentleRestTimes"),
    },
  },
  SourcePage="p.46",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "GentleRestTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "GentleRestTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainReposeTimes"),
      Variables={
        "GentleRestTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Ward Against Death",
  Key="Repose Domain ~ Ward Against Death",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot aura that wards against death for %1 rounds per day. Living creatures in this area are immune to death effects, energy drain, and effects that cause negative levels. This ward does not remove negative levels that a creature has already gained, but the negative levels have no effect while the creature is inside the warded area. These rounds do not need to be consecutive.",
    Arguments={
      Formula("WardAgainstDeathRounds"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "WardAgainstDeathRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WardAgainstDeathRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainReposeLVL"),
      Variables={
        "WardAgainstDeathRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Blast Rune",
  Key="Rune Domain ~ Blast Rune",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can create a Blast Rune in any adjacent square. Any creature entering this square takes 1d6+%1 points of damage. This rune deals either acid, cold, electricity, or fire damage, decided when you create the rune. The rune is invisible and lasts %2 rounds or until discharged. You cannot create a Blast Rune in a square occupied by another creature. This rune counts as a 1st-level spell for the purposes of dispelling. It can be discovered with at DC 26 Perception skill check and disarmed with a DC 26 Disable Device skill check. You can use this ability %3 times per day.",
    Arguments={
      Formula("DomainRuneLVL/2"),
      Formula("DomainRuneLVL"),
      Formula("BlastRuneTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainRuneLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BlastRuneTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BlastRuneTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainRuneTimes"),
      Variables={
        "BlastRuneTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Spell Rune",
  Key="Rune Domain ~ Spell Rune",
  Category="Special Ability",
  Description={
    Format="You can attach another spell that you cast to one of your Blast Runes, causing that spell to affect the creature that triggers the rune, in addition to the damage. This spell must be of at least one level lower than the highest-level cleric spell you can cast, and it must target one or more creatures. Regardless of the number of targets the spell can normally affect, it only affects the creature that triggers the rune.",
  },
  SourcePage="p.47",
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Strength Surge",
  Key="Strength Domain ~ Strength Surge",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can touch a creature to give it great strength. For 1 round, the target gains a +%1 enhancement bonus to melee attacks. combat maneuver checks that rely on Strength, Stregth-based skills, and Strength checks. You can use this ability %2 times per day.",
    Arguments={
      Formula("max(DomainStrengthLVL/2,1)"),
      Formula("StrengthSurgeTimes"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "StrengthSurgeTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "StrengthSurgeTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainStrengthTimes"),
      Variables={
        "StrengthSurgeTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Might of the Gods",
  Key="Strength Domain ~ Might of the Gods",
  Category="Special Ability",
  Description={
    Format="You can add a +%1 enhancement bonus to your Strength score for %1 rounds per day. That bonus only applies on Strength checks and Strength-based skill checks. These rounds do not need to be consecutive.",
    Arguments={
      Formula("MightOfTheGodsRounds"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "MightOfTheGodsRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "MightOfTheGodsRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainStrengthLVL"),
      Variables={
        "MightOfTheGodsRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Sun's Blessing",
  Key="Sun Domain ~ Sun's Blessing",
  Category="Special Ability",
  Description={
    Format="Whenever you channel positive energy to harm undead creatures, add a +%1 bonus to the damage dealt. Undead do not add their channel resistance to their saves when you channel positive energy.",
    Arguments={
      Formula("DomainSunLVL"),
    },
  },
  SourcePage="p.47",
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Nimbus of Light",
  Key="Sun Domain ~ Nimbus of Light",
  Category="Special Ability",
  Description={
    Format="You can emit a 30-foot nimbus of light for %1 rounds per day. This acts as a Daylight spell. In addition, undead within this radius take %1 points of damage each round that they remain inside the nimbus. Spells and spell-like abilities with the Darkness descriptor are automatically dispelled if brought inside this nimbus. These rounds do not need to be consecutive.",
    Arguments={
      Formula("SunNimbusOfLightRounds"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "SunNimbusOfLightRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "SunNimbusOfLightRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainSunLVL"),
      Variables={
        "SunNimbusOfLightRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "Aura",
  },
})
DefineAbility({
  Name="Agile Feet",
  Key="Travel Domain ~ Agile Feet",
  Category="Special Ability",
  Description={
    Format="As a free action, you can gain increased mobility for 1 round. For the next round, you ignore all difficult terrain and do not take any penalties for moving through it. You can use this ability %1 times per day.",
    Arguments={
      Formula("AgileFeetTimes"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "AgileFeetTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "AgileFeetTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainTravelTimes"),
      Variables={
        "AgileFeetTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Dimensional Hop",
  Key="Travel Domain ~ Dimensional Hop",
  Category="Special Ability",
  Description={
    Format="You can teleport up to %1 feet per day as a move action. This teleportation must be used in 5-foot increments and such movement does not provoke attacks of opportunity. You must have line of sight to your destination to use this ability. You can bring other willing creatures with you, but you must expend an equal amount of distance for each creature brought.",
    Arguments={
      Formula("TravelDimensionalHop"),
    },
  },
  SourcePage="p.47",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 5-ft. increments)",
      Arguments={
        "TravelDimensionalHop/5",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TravelDimensionalHop/5",
      },
    },
    {
      Name="CheckType",
      FormatString="5-ft. increments",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainTravelLVL*10"),
      Variables={
        "TravelDimensionalHop",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "ModifyMovement",
  },
})
DefineAbility({
  Name="Copycat",
  Key="Trickery Domain ~ Copycat",
  Category="Special Ability",
  Description={
    Format="You can create an illusory double of yourself as a move action. This double functions as a single Mirror Image and lasts for %1 rounds, or until the illusory duplicate is dispelled or destroyed. You can have no more than one Copycat at a time. This ability does not stack with the Mirror Image spell. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainTrickeryLVL"),
      Formula("CopycatTimes"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "CopycatTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "CopycatTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainTrickeryTimes"),
      Variables={
        "CopycatTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Master's Illusion",
  Key="Trickery Domain ~ Master's Illusion",
  Category="Special Ability",
  Description={
    Format="You can create an illusion that hides the appearance of yourself and any number of allies within 30 feet for %1 rounds. This ability otherwise functions like the spell Veil. The save DC to disbelieve this effect is %2. The rounds do not need to be consecutive.",
    Arguments={
      Formula("TrickeryMastersIllusionRounds"),
      Formula("TrickeryMastersIllusionDC"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "TrickeryMastersIllusionRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("10+(DomainTrickeryLVL/2)+WIS"),
      Variables={
        "TrickeryMastersIllusionDC",
      },
    },
    {
      Category="VAR",
      Formula=Formula("DomainTrickeryLVL"),
      Variables={
        "TrickeryMastersIllusionRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
    "Defensive",
  },
})
DefineAbility({
  Name="Battle Rage",
  Key="Domain Power ~ Battle Rage",
  Category="Special Ability",
  Description={
    Format="You can touch a creature as a standard action to give it a +%1 bonus on melee damage rolls for 1 round. You can do so %2 times per day.",
    Arguments={
      Formula("max(DomainWarLVL/2,1)"),
      Formula("BattleRageTimes"),
    },
  },
  SourcePage="p.48",
  TemporaryBonus={
    Bonus={
      Category="WEAPON",
      Formula=Formula("max(DomainWarLVL/2,1)"),
      Variables={
        "DAMAGE",
      },
    },
    Target="EQ|Melee",
  },
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "BattleRageTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "BattleRageTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWarTimes"),
      Variables={
        "BattleRageTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Weapon Master",
  Key="Domain Power ~ Weapon Master",
  Category="Special Ability",
  Description={
    Format="As a swift action, you gain the use of one combat feat for %1 rounds per day. These rounds do not need to be consecutive and you can change the feat chosen each time you use this ability. You must meet the prerequisites to use these feats.",
    Arguments={
      Formula("WeaponMasterRounds"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1 rounds/day)",
      Arguments={
        "WeaponMasterRounds",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WeaponMasterRounds",
      },
    },
    {
      Name="CheckType",
      FormatString="Rounds per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWarLVL"),
      Variables={
        "WeaponMasterRounds",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Supernatural",
    "DomainPower",
  },
})
DefineAbility({
  Name="Icicle",
  Key="Water Domain ~ Icicle",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can fire an icicle from your finger, targeting any foe within 30 feet as a ranged touch attack. The icicle deals 1d6+%1 points of cold damage. You can use this ability %2 times per day.",
    Arguments={
      Formula("DomainWaterLVL/2"),
      Formula("IcicleTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainWaterLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "IcicleTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "IcicleTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWaterTimes"),
      Variables={
        "IcicleTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Cold Resistance",
  Key="Water Domain ~ Cold Resistance",
  Category="Special Ability",
  SourcePage="p.48",
  Visible=false,
  Abilities={
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Resistance to Cold",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 6)
        end,
      },
    },
    {
      Category="Special Ability",
      Nature="AUTOMATIC",
      Names={
        "Immunity to Cold",
      },
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 20)
        end,
      },
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWaterResistanceBonus"),
      Type={
        Name="Resistance",
      },
      Variables={
        "ColdResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 6)
        end,
      },
      Variables={
        "DomainWaterResistanceBonus",
      },
    },
    {
      Category="VAR",
      Formula=Formula("10"),
      Conditions={
        function (character, item, sources)
          return (character.Variables["DomainWaterLVL"] >= 12)
        end,
      },
      Variables={
        "DomainWaterResistanceBonus",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "Extraordinary",
    "DomainPower",
  },
})
DefineAbility({
  Name="Storm Burst",
  Key="Weather Domain ~ Storm Burst",
  Category="Special Ability",
  Description={
    Format="As a standard action, you can create a storm burst targeting any foe within 30 feet as a ranged touch attack. The storm burst deals 1d6+%1 points of nonlethal damage. In addition, the target is buffeted by winds and rain, causing it to take a -2 penalty on attack rolls for 1 round. You can use this ability %2 times per day",
    Arguments={
      Formula("DomainWeatherLVL/2"),
      Formula("StormBurstTimes"),
    },
    Conditions={
      function (character, item, sources)
        return (character.Variables["DomainWeatherLVL"] >= 2)
      end,
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="Ability Benefit",
      FormatString="(%1/day)",
      Arguments={
        "StormBurstTimes",
      },
    },
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "StormBurstTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWeatherTimes"),
      Variables={
        "StormBurstTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialAttack",
    "SpellLike",
    "DomainPower",
  },
})
DefineAbility({
  Name="Lightning Lord",
  Key="Weather Domain ~ Lightning Lord",
  Category="Special Ability",
  Description={
    Format="You can call down %1 bolts of lightning per day. You can call down as many bolts as you want with a single standard action, but no creature can be the target of more than one bolt and no two targets can be more than 30 feet apart. This ability otherwise functions as Call Lightning.",
    Arguments={
      Formula("WeatherLightningLordTimes"),
    },
  },
  SourcePage="p.48",
  Aspects={
    {
      Name="CheckCount",
      FormatString="%1",
      Arguments={
        "WeatherLightningLordTimes",
      },
    },
    {
      Name="CheckType",
      FormatString="Uses per Day",
    },
  },
  Bonuses={
    {
      Category="VAR",
      Formula=Formula("DomainWeatherLVL"),
      Variables={
        "WeatherLightningLordTimes",
      },
    },
  },
  Types={
    "ClericClassFeatures",
    "SpecialQuality",
    "SpellLike",
    "DomainPower",
  },
})
